// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_VSDinv_6ph_asym_uz_VSDinv_6ph_asym,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=8,HLS_SYN_TPT=9,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5512,HLS_SYN_LUT=5219,HLS_VERSION=2022_2}" *)

module uz_VSDinv_6ph_asym (
        in_alpha,
        in_beta,
        out_a1,
        out_b1,
        out_c1,
        out_a2,
        out_b2,
        out_c2,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] in_alpha;
input  [31:0] in_beta;
output  [31:0] out_a1;
output  [31:0] out_b1;
output  [31:0] out_c1;
output  [31:0] out_a2;
output  [31:0] out_b2;
output  [31:0] out_c2;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    multiply_1_U0_ap_start;
wire    multiply_1_U0_ap_done;
wire    multiply_1_U0_ap_continue;
wire    multiply_1_U0_ap_idle;
wire    multiply_1_U0_ap_ready;
wire   [31:0] multiply_1_U0_ap_return;
wire    products_0_full_n;
wire    multiply_224_U0_ap_start;
wire    multiply_224_U0_ap_done;
wire    multiply_224_U0_ap_continue;
wire    multiply_224_U0_ap_idle;
wire    multiply_224_U0_ap_ready;
wire   [31:0] multiply_224_U0_ap_return;
wire    products_1_full_n;
wire    Block_entry4245_proc_U0_ap_start;
wire    Block_entry4245_proc_U0_ap_done;
wire    Block_entry4245_proc_U0_ap_continue;
wire    Block_entry4245_proc_U0_ap_idle;
wire    Block_entry4245_proc_U0_ap_ready;
wire   [31:0] Block_entry4245_proc_U0_ap_return;
wire    products_assign_load_loc_channel_full_n;
wire    Block_entry4246_proc_U0_ap_start;
wire    Block_entry4246_proc_U0_ap_done;
wire    Block_entry4246_proc_U0_ap_continue;
wire    Block_entry4246_proc_U0_ap_idle;
wire    Block_entry4246_proc_U0_ap_ready;
wire   [31:0] Block_entry4246_proc_U0_out_a1;
wire    Block_entry4246_proc_U0_out_a1_ap_vld;
wire    multiply_3_U0_ap_start;
wire    multiply_3_U0_ap_done;
wire    multiply_3_U0_ap_continue;
wire    multiply_3_U0_ap_idle;
wire    multiply_3_U0_ap_ready;
wire   [31:0] multiply_3_U0_ap_return;
wire    products_0_1_full_n;
wire    multiply_425_U0_ap_start;
wire    multiply_425_U0_ap_done;
wire    multiply_425_U0_ap_continue;
wire    multiply_425_U0_ap_idle;
wire    multiply_425_U0_ap_ready;
wire   [31:0] multiply_425_U0_ap_return;
wire    products_1_1_full_n;
wire    Block_entry4250_proc_U0_ap_start;
wire    Block_entry4250_proc_U0_ap_done;
wire    Block_entry4250_proc_U0_ap_continue;
wire    Block_entry4250_proc_U0_ap_idle;
wire    Block_entry4250_proc_U0_ap_ready;
wire   [31:0] Block_entry4250_proc_U0_ap_return;
wire    products_assign_1_load_loc_channel_full_n;
wire    Block_entry4251_proc_U0_ap_start;
wire    Block_entry4251_proc_U0_ap_done;
wire    Block_entry4251_proc_U0_ap_continue;
wire    Block_entry4251_proc_U0_ap_idle;
wire    Block_entry4251_proc_U0_ap_ready;
wire   [31:0] Block_entry4251_proc_U0_out_b1;
wire    Block_entry4251_proc_U0_out_b1_ap_vld;
wire    multiply_5_U0_ap_start;
wire    multiply_5_U0_ap_done;
wire    multiply_5_U0_ap_continue;
wire    multiply_5_U0_ap_idle;
wire    multiply_5_U0_ap_ready;
wire   [31:0] multiply_5_U0_ap_return;
wire    products_0_2_full_n;
wire    multiply_626_U0_ap_start;
wire    multiply_626_U0_ap_done;
wire    multiply_626_U0_ap_continue;
wire    multiply_626_U0_ap_idle;
wire    multiply_626_U0_ap_ready;
wire   [31:0] multiply_626_U0_ap_return;
wire    products_1_2_full_n;
wire    Block_entry4255_proc_U0_ap_start;
wire    Block_entry4255_proc_U0_ap_done;
wire    Block_entry4255_proc_U0_ap_continue;
wire    Block_entry4255_proc_U0_ap_idle;
wire    Block_entry4255_proc_U0_ap_ready;
wire   [31:0] Block_entry4255_proc_U0_ap_return;
wire    products_assign_2_load_loc_channel_full_n;
wire    Block_entry4256_proc_U0_ap_start;
wire    Block_entry4256_proc_U0_ap_done;
wire    Block_entry4256_proc_U0_ap_continue;
wire    Block_entry4256_proc_U0_ap_idle;
wire    Block_entry4256_proc_U0_ap_ready;
wire   [31:0] Block_entry4256_proc_U0_out_c1;
wire    Block_entry4256_proc_U0_out_c1_ap_vld;
wire    multiply_7_U0_ap_start;
wire    multiply_7_U0_ap_done;
wire    multiply_7_U0_ap_continue;
wire    multiply_7_U0_ap_idle;
wire    multiply_7_U0_ap_ready;
wire   [31:0] multiply_7_U0_ap_return;
wire    products_0_3_full_n;
wire    multiply_827_U0_ap_start;
wire    multiply_827_U0_ap_done;
wire    multiply_827_U0_ap_continue;
wire    multiply_827_U0_ap_idle;
wire    multiply_827_U0_ap_ready;
wire   [31:0] multiply_827_U0_ap_return;
wire    products_1_3_full_n;
wire    Block_entry4260_proc_U0_ap_start;
wire    Block_entry4260_proc_U0_ap_done;
wire    Block_entry4260_proc_U0_ap_continue;
wire    Block_entry4260_proc_U0_ap_idle;
wire    Block_entry4260_proc_U0_ap_ready;
wire   [31:0] Block_entry4260_proc_U0_ap_return;
wire    products_assign_3_load_loc_channel_full_n;
wire    Block_entry4261_proc_U0_ap_start;
wire    Block_entry4261_proc_U0_ap_done;
wire    Block_entry4261_proc_U0_ap_continue;
wire    Block_entry4261_proc_U0_ap_idle;
wire    Block_entry4261_proc_U0_ap_ready;
wire   [31:0] Block_entry4261_proc_U0_out_a2;
wire    Block_entry4261_proc_U0_out_a2_ap_vld;
wire    multiply_9_U0_ap_start;
wire    multiply_9_U0_ap_done;
wire    multiply_9_U0_ap_continue;
wire    multiply_9_U0_ap_idle;
wire    multiply_9_U0_ap_ready;
wire   [31:0] multiply_9_U0_ap_return;
wire    products_0_4_full_n;
wire    multiply_1028_U0_ap_start;
wire    multiply_1028_U0_ap_done;
wire    multiply_1028_U0_ap_continue;
wire    multiply_1028_U0_ap_idle;
wire    multiply_1028_U0_ap_ready;
wire   [31:0] multiply_1028_U0_ap_return;
wire    products_1_4_full_n;
wire    Block_entry4265_proc_U0_ap_start;
wire    Block_entry4265_proc_U0_ap_done;
wire    Block_entry4265_proc_U0_ap_continue;
wire    Block_entry4265_proc_U0_ap_idle;
wire    Block_entry4265_proc_U0_ap_ready;
wire   [31:0] Block_entry4265_proc_U0_ap_return;
wire    products_assign_4_load_loc_channel_full_n;
wire    Block_entry4266_proc_U0_ap_start;
wire    Block_entry4266_proc_U0_ap_done;
wire    Block_entry4266_proc_U0_ap_continue;
wire    Block_entry4266_proc_U0_ap_idle;
wire    Block_entry4266_proc_U0_ap_ready;
wire   [31:0] Block_entry4266_proc_U0_out_b2;
wire    Block_entry4266_proc_U0_out_b2_ap_vld;
wire    multiply_11_U0_ap_start;
wire    multiply_11_U0_ap_done;
wire    multiply_11_U0_ap_continue;
wire    multiply_11_U0_ap_idle;
wire    multiply_11_U0_ap_ready;
wire   [31:0] multiply_11_U0_ap_return;
wire    products_0_5_full_n;
wire    multiply29_U0_ap_start;
wire    multiply29_U0_ap_done;
wire    multiply29_U0_ap_continue;
wire    multiply29_U0_ap_idle;
wire    multiply29_U0_ap_ready;
wire   [31:0] multiply29_U0_ap_return;
wire    products_1_5_full_n;
wire    Block_entry4270_proc_U0_ap_start;
wire    Block_entry4270_proc_U0_ap_done;
wire    Block_entry4270_proc_U0_ap_continue;
wire    Block_entry4270_proc_U0_ap_idle;
wire    Block_entry4270_proc_U0_ap_ready;
wire   [31:0] Block_entry4270_proc_U0_ap_return;
wire    products_assign_5_load_loc_channel_full_n;
wire    Block_entry4271_proc_U0_ap_start;
wire    Block_entry4271_proc_U0_ap_done;
wire    Block_entry4271_proc_U0_ap_continue;
wire    Block_entry4271_proc_U0_ap_idle;
wire    Block_entry4271_proc_U0_ap_ready;
wire   [31:0] Block_entry4271_proc_U0_out_c2;
wire    Block_entry4271_proc_U0_out_c2_ap_vld;
wire   [31:0] products_0_dout;
wire   [1:0] products_0_num_data_valid;
wire   [1:0] products_0_fifo_cap;
wire    products_0_empty_n;
wire   [31:0] products_1_dout;
wire   [2:0] products_1_num_data_valid;
wire   [2:0] products_1_fifo_cap;
wire    products_1_empty_n;
wire   [31:0] products_assign_load_loc_channel_dout;
wire   [1:0] products_assign_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_load_loc_channel_fifo_cap;
wire    products_assign_load_loc_channel_empty_n;
wire   [31:0] products_0_1_dout;
wire   [1:0] products_0_1_num_data_valid;
wire   [1:0] products_0_1_fifo_cap;
wire    products_0_1_empty_n;
wire   [31:0] products_1_1_dout;
wire   [2:0] products_1_1_num_data_valid;
wire   [2:0] products_1_1_fifo_cap;
wire    products_1_1_empty_n;
wire   [31:0] products_assign_1_load_loc_channel_dout;
wire   [1:0] products_assign_1_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_1_load_loc_channel_fifo_cap;
wire    products_assign_1_load_loc_channel_empty_n;
wire   [31:0] products_0_2_dout;
wire   [1:0] products_0_2_num_data_valid;
wire   [1:0] products_0_2_fifo_cap;
wire    products_0_2_empty_n;
wire   [31:0] products_1_2_dout;
wire   [2:0] products_1_2_num_data_valid;
wire   [2:0] products_1_2_fifo_cap;
wire    products_1_2_empty_n;
wire   [31:0] products_assign_2_load_loc_channel_dout;
wire   [1:0] products_assign_2_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_2_load_loc_channel_fifo_cap;
wire    products_assign_2_load_loc_channel_empty_n;
wire   [31:0] products_0_3_dout;
wire   [1:0] products_0_3_num_data_valid;
wire   [1:0] products_0_3_fifo_cap;
wire    products_0_3_empty_n;
wire   [31:0] products_1_3_dout;
wire   [2:0] products_1_3_num_data_valid;
wire   [2:0] products_1_3_fifo_cap;
wire    products_1_3_empty_n;
wire   [31:0] products_assign_3_load_loc_channel_dout;
wire   [1:0] products_assign_3_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_3_load_loc_channel_fifo_cap;
wire    products_assign_3_load_loc_channel_empty_n;
wire   [31:0] products_0_4_dout;
wire   [1:0] products_0_4_num_data_valid;
wire   [1:0] products_0_4_fifo_cap;
wire    products_0_4_empty_n;
wire   [31:0] products_1_4_dout;
wire   [2:0] products_1_4_num_data_valid;
wire   [2:0] products_1_4_fifo_cap;
wire    products_1_4_empty_n;
wire   [31:0] products_assign_4_load_loc_channel_dout;
wire   [1:0] products_assign_4_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_4_load_loc_channel_fifo_cap;
wire    products_assign_4_load_loc_channel_empty_n;
wire   [31:0] products_0_5_dout;
wire   [1:0] products_0_5_num_data_valid;
wire   [1:0] products_0_5_fifo_cap;
wire    products_0_5_empty_n;
wire   [31:0] products_1_5_dout;
wire   [2:0] products_1_5_num_data_valid;
wire   [2:0] products_1_5_fifo_cap;
wire    products_1_5_empty_n;
wire   [31:0] products_assign_5_load_loc_channel_dout;
wire   [1:0] products_assign_5_load_loc_channel_num_data_valid;
wire   [1:0] products_assign_5_load_loc_channel_fifo_cap;
wire    products_assign_5_load_loc_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_multiply_1_U0_ap_ready;
wire    ap_sync_multiply_1_U0_ap_ready;
reg    ap_sync_reg_multiply_224_U0_ap_ready;
wire    ap_sync_multiply_224_U0_ap_ready;
reg    ap_sync_reg_multiply_3_U0_ap_ready;
wire    ap_sync_multiply_3_U0_ap_ready;
reg    ap_sync_reg_multiply_425_U0_ap_ready;
wire    ap_sync_multiply_425_U0_ap_ready;
reg    ap_sync_reg_multiply_5_U0_ap_ready;
wire    ap_sync_multiply_5_U0_ap_ready;
reg    ap_sync_reg_multiply_626_U0_ap_ready;
wire    ap_sync_multiply_626_U0_ap_ready;
reg    ap_sync_reg_multiply_7_U0_ap_ready;
wire    ap_sync_multiply_7_U0_ap_ready;
reg    ap_sync_reg_multiply_827_U0_ap_ready;
wire    ap_sync_multiply_827_U0_ap_ready;
reg    ap_sync_reg_multiply_9_U0_ap_ready;
wire    ap_sync_multiply_9_U0_ap_ready;
reg    ap_sync_reg_multiply_1028_U0_ap_ready;
wire    ap_sync_multiply_1028_U0_ap_ready;
reg    ap_sync_reg_multiply_11_U0_ap_ready;
wire    ap_sync_multiply_11_U0_ap_ready;
reg    ap_sync_reg_multiply29_U0_ap_ready;
wire    ap_sync_multiply29_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_multiply_1_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_224_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_3_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_425_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_5_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_626_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_7_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_827_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_9_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_1028_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply_11_U0_ap_ready = 1'b0;
#0 ap_sync_reg_multiply29_U0_ap_ready = 1'b0;
end

uz_VSDinv_6ph_asym_multiply_1 multiply_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_1_U0_ap_start),
    .ap_done(multiply_1_U0_ap_done),
    .ap_continue(multiply_1_U0_ap_continue),
    .ap_idle(multiply_1_U0_ap_idle),
    .ap_ready(multiply_1_U0_ap_ready),
    .arg2(in_alpha),
    .ap_return(multiply_1_U0_ap_return)
);

uz_VSDinv_6ph_asym_multiply_224 multiply_224_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_224_U0_ap_start),
    .ap_done(multiply_224_U0_ap_done),
    .ap_continue(multiply_224_U0_ap_continue),
    .ap_idle(multiply_224_U0_ap_idle),
    .ap_ready(multiply_224_U0_ap_ready),
    .arg2(in_beta),
    .ap_return(multiply_224_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4245_proc Block_entry4245_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4245_proc_U0_ap_start),
    .ap_done(Block_entry4245_proc_U0_ap_done),
    .ap_continue(Block_entry4245_proc_U0_ap_continue),
    .ap_idle(Block_entry4245_proc_U0_ap_idle),
    .ap_ready(Block_entry4245_proc_U0_ap_ready),
    .p_read(products_0_dout),
    .ap_return(Block_entry4245_proc_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4246_proc Block_entry4246_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4246_proc_U0_ap_start),
    .ap_done(Block_entry4246_proc_U0_ap_done),
    .ap_continue(Block_entry4246_proc_U0_ap_continue),
    .ap_idle(Block_entry4246_proc_U0_ap_idle),
    .ap_ready(Block_entry4246_proc_U0_ap_ready),
    .p_read(products_1_dout),
    .p_read1(products_assign_load_loc_channel_dout),
    .out_a1(Block_entry4246_proc_U0_out_a1),
    .out_a1_ap_vld(Block_entry4246_proc_U0_out_a1_ap_vld)
);

uz_VSDinv_6ph_asym_multiply_3 multiply_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_3_U0_ap_start),
    .ap_done(multiply_3_U0_ap_done),
    .ap_continue(multiply_3_U0_ap_continue),
    .ap_idle(multiply_3_U0_ap_idle),
    .ap_ready(multiply_3_U0_ap_ready),
    .arg2(in_alpha),
    .ap_return(multiply_3_U0_ap_return)
);

uz_VSDinv_6ph_asym_multiply_425 multiply_425_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_425_U0_ap_start),
    .ap_done(multiply_425_U0_ap_done),
    .ap_continue(multiply_425_U0_ap_continue),
    .ap_idle(multiply_425_U0_ap_idle),
    .ap_ready(multiply_425_U0_ap_ready),
    .arg2(in_beta),
    .ap_return(multiply_425_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4250_proc Block_entry4250_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4250_proc_U0_ap_start),
    .ap_done(Block_entry4250_proc_U0_ap_done),
    .ap_continue(Block_entry4250_proc_U0_ap_continue),
    .ap_idle(Block_entry4250_proc_U0_ap_idle),
    .ap_ready(Block_entry4250_proc_U0_ap_ready),
    .p_read(products_0_1_dout),
    .ap_return(Block_entry4250_proc_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4251_proc Block_entry4251_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4251_proc_U0_ap_start),
    .ap_done(Block_entry4251_proc_U0_ap_done),
    .ap_continue(Block_entry4251_proc_U0_ap_continue),
    .ap_idle(Block_entry4251_proc_U0_ap_idle),
    .ap_ready(Block_entry4251_proc_U0_ap_ready),
    .p_read(products_1_1_dout),
    .p_read1(products_assign_1_load_loc_channel_dout),
    .out_b1(Block_entry4251_proc_U0_out_b1),
    .out_b1_ap_vld(Block_entry4251_proc_U0_out_b1_ap_vld)
);

uz_VSDinv_6ph_asym_multiply_5 multiply_5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_5_U0_ap_start),
    .ap_done(multiply_5_U0_ap_done),
    .ap_continue(multiply_5_U0_ap_continue),
    .ap_idle(multiply_5_U0_ap_idle),
    .ap_ready(multiply_5_U0_ap_ready),
    .arg2(in_alpha),
    .ap_return(multiply_5_U0_ap_return)
);

uz_VSDinv_6ph_asym_multiply_626 multiply_626_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_626_U0_ap_start),
    .ap_done(multiply_626_U0_ap_done),
    .ap_continue(multiply_626_U0_ap_continue),
    .ap_idle(multiply_626_U0_ap_idle),
    .ap_ready(multiply_626_U0_ap_ready),
    .arg2(in_beta),
    .ap_return(multiply_626_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4255_proc Block_entry4255_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4255_proc_U0_ap_start),
    .ap_done(Block_entry4255_proc_U0_ap_done),
    .ap_continue(Block_entry4255_proc_U0_ap_continue),
    .ap_idle(Block_entry4255_proc_U0_ap_idle),
    .ap_ready(Block_entry4255_proc_U0_ap_ready),
    .p_read(products_0_2_dout),
    .ap_return(Block_entry4255_proc_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4256_proc Block_entry4256_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4256_proc_U0_ap_start),
    .ap_done(Block_entry4256_proc_U0_ap_done),
    .ap_continue(Block_entry4256_proc_U0_ap_continue),
    .ap_idle(Block_entry4256_proc_U0_ap_idle),
    .ap_ready(Block_entry4256_proc_U0_ap_ready),
    .p_read(products_1_2_dout),
    .p_read1(products_assign_2_load_loc_channel_dout),
    .out_c1(Block_entry4256_proc_U0_out_c1),
    .out_c1_ap_vld(Block_entry4256_proc_U0_out_c1_ap_vld)
);

uz_VSDinv_6ph_asym_multiply_7 multiply_7_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_7_U0_ap_start),
    .ap_done(multiply_7_U0_ap_done),
    .ap_continue(multiply_7_U0_ap_continue),
    .ap_idle(multiply_7_U0_ap_idle),
    .ap_ready(multiply_7_U0_ap_ready),
    .arg2(in_alpha),
    .ap_return(multiply_7_U0_ap_return)
);

uz_VSDinv_6ph_asym_multiply_827 multiply_827_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_827_U0_ap_start),
    .ap_done(multiply_827_U0_ap_done),
    .ap_continue(multiply_827_U0_ap_continue),
    .ap_idle(multiply_827_U0_ap_idle),
    .ap_ready(multiply_827_U0_ap_ready),
    .arg2(in_beta),
    .ap_return(multiply_827_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4260_proc Block_entry4260_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4260_proc_U0_ap_start),
    .ap_done(Block_entry4260_proc_U0_ap_done),
    .ap_continue(Block_entry4260_proc_U0_ap_continue),
    .ap_idle(Block_entry4260_proc_U0_ap_idle),
    .ap_ready(Block_entry4260_proc_U0_ap_ready),
    .p_read(products_0_3_dout),
    .ap_return(Block_entry4260_proc_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4261_proc Block_entry4261_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4261_proc_U0_ap_start),
    .ap_done(Block_entry4261_proc_U0_ap_done),
    .ap_continue(Block_entry4261_proc_U0_ap_continue),
    .ap_idle(Block_entry4261_proc_U0_ap_idle),
    .ap_ready(Block_entry4261_proc_U0_ap_ready),
    .p_read(products_1_3_dout),
    .p_read1(products_assign_3_load_loc_channel_dout),
    .out_a2(Block_entry4261_proc_U0_out_a2),
    .out_a2_ap_vld(Block_entry4261_proc_U0_out_a2_ap_vld)
);

uz_VSDinv_6ph_asym_multiply_9 multiply_9_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_9_U0_ap_start),
    .ap_done(multiply_9_U0_ap_done),
    .ap_continue(multiply_9_U0_ap_continue),
    .ap_idle(multiply_9_U0_ap_idle),
    .ap_ready(multiply_9_U0_ap_ready),
    .arg2(in_alpha),
    .ap_return(multiply_9_U0_ap_return)
);

uz_VSDinv_6ph_asym_multiply_1028 multiply_1028_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_1028_U0_ap_start),
    .ap_done(multiply_1028_U0_ap_done),
    .ap_continue(multiply_1028_U0_ap_continue),
    .ap_idle(multiply_1028_U0_ap_idle),
    .ap_ready(multiply_1028_U0_ap_ready),
    .arg2(in_beta),
    .ap_return(multiply_1028_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4265_proc Block_entry4265_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4265_proc_U0_ap_start),
    .ap_done(Block_entry4265_proc_U0_ap_done),
    .ap_continue(Block_entry4265_proc_U0_ap_continue),
    .ap_idle(Block_entry4265_proc_U0_ap_idle),
    .ap_ready(Block_entry4265_proc_U0_ap_ready),
    .p_read(products_0_4_dout),
    .ap_return(Block_entry4265_proc_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4266_proc Block_entry4266_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4266_proc_U0_ap_start),
    .ap_done(Block_entry4266_proc_U0_ap_done),
    .ap_continue(Block_entry4266_proc_U0_ap_continue),
    .ap_idle(Block_entry4266_proc_U0_ap_idle),
    .ap_ready(Block_entry4266_proc_U0_ap_ready),
    .p_read(products_1_4_dout),
    .p_read1(products_assign_4_load_loc_channel_dout),
    .out_b2(Block_entry4266_proc_U0_out_b2),
    .out_b2_ap_vld(Block_entry4266_proc_U0_out_b2_ap_vld)
);

uz_VSDinv_6ph_asym_multiply_11 multiply_11_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply_11_U0_ap_start),
    .ap_done(multiply_11_U0_ap_done),
    .ap_continue(multiply_11_U0_ap_continue),
    .ap_idle(multiply_11_U0_ap_idle),
    .ap_ready(multiply_11_U0_ap_ready),
    .arg2(in_alpha),
    .ap_return(multiply_11_U0_ap_return)
);

uz_VSDinv_6ph_asym_multiply29 multiply29_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(multiply29_U0_ap_start),
    .ap_done(multiply29_U0_ap_done),
    .ap_continue(multiply29_U0_ap_continue),
    .ap_idle(multiply29_U0_ap_idle),
    .ap_ready(multiply29_U0_ap_ready),
    .arg2(in_beta),
    .ap_return(multiply29_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4270_proc Block_entry4270_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4270_proc_U0_ap_start),
    .ap_done(Block_entry4270_proc_U0_ap_done),
    .ap_continue(Block_entry4270_proc_U0_ap_continue),
    .ap_idle(Block_entry4270_proc_U0_ap_idle),
    .ap_ready(Block_entry4270_proc_U0_ap_ready),
    .p_read(products_0_5_dout),
    .ap_return(Block_entry4270_proc_U0_ap_return)
);

uz_VSDinv_6ph_asym_Block_entry4271_proc Block_entry4271_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry4271_proc_U0_ap_start),
    .ap_done(Block_entry4271_proc_U0_ap_done),
    .ap_continue(Block_entry4271_proc_U0_ap_continue),
    .ap_idle(Block_entry4271_proc_U0_ap_idle),
    .ap_ready(Block_entry4271_proc_U0_ap_ready),
    .p_read(products_1_5_dout),
    .p_read1(products_assign_5_load_loc_channel_dout),
    .out_c2(Block_entry4271_proc_U0_out_c2),
    .out_c2_ap_vld(Block_entry4271_proc_U0_out_c2_ap_vld)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_1_U0_ap_return),
    .if_full_n(products_0_full_n),
    .if_write(multiply_1_U0_ap_done),
    .if_dout(products_0_dout),
    .if_num_data_valid(products_0_num_data_valid),
    .if_fifo_cap(products_0_fifo_cap),
    .if_empty_n(products_0_empty_n),
    .if_read(Block_entry4245_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d3_S products_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_224_U0_ap_return),
    .if_full_n(products_1_full_n),
    .if_write(multiply_224_U0_ap_done),
    .if_dout(products_1_dout),
    .if_num_data_valid(products_1_num_data_valid),
    .if_fifo_cap(products_1_fifo_cap),
    .if_empty_n(products_1_empty_n),
    .if_read(Block_entry4246_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_assign_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4245_proc_U0_ap_return),
    .if_full_n(products_assign_load_loc_channel_full_n),
    .if_write(Block_entry4245_proc_U0_ap_done),
    .if_dout(products_assign_load_loc_channel_dout),
    .if_num_data_valid(products_assign_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_load_loc_channel_empty_n),
    .if_read(Block_entry4246_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_3_U0_ap_return),
    .if_full_n(products_0_1_full_n),
    .if_write(multiply_3_U0_ap_done),
    .if_dout(products_0_1_dout),
    .if_num_data_valid(products_0_1_num_data_valid),
    .if_fifo_cap(products_0_1_fifo_cap),
    .if_empty_n(products_0_1_empty_n),
    .if_read(Block_entry4250_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d3_S products_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_425_U0_ap_return),
    .if_full_n(products_1_1_full_n),
    .if_write(multiply_425_U0_ap_done),
    .if_dout(products_1_1_dout),
    .if_num_data_valid(products_1_1_num_data_valid),
    .if_fifo_cap(products_1_1_fifo_cap),
    .if_empty_n(products_1_1_empty_n),
    .if_read(Block_entry4251_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_assign_1_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4250_proc_U0_ap_return),
    .if_full_n(products_assign_1_load_loc_channel_full_n),
    .if_write(Block_entry4250_proc_U0_ap_done),
    .if_dout(products_assign_1_load_loc_channel_dout),
    .if_num_data_valid(products_assign_1_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_1_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_1_load_loc_channel_empty_n),
    .if_read(Block_entry4251_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_5_U0_ap_return),
    .if_full_n(products_0_2_full_n),
    .if_write(multiply_5_U0_ap_done),
    .if_dout(products_0_2_dout),
    .if_num_data_valid(products_0_2_num_data_valid),
    .if_fifo_cap(products_0_2_fifo_cap),
    .if_empty_n(products_0_2_empty_n),
    .if_read(Block_entry4255_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d3_S products_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_626_U0_ap_return),
    .if_full_n(products_1_2_full_n),
    .if_write(multiply_626_U0_ap_done),
    .if_dout(products_1_2_dout),
    .if_num_data_valid(products_1_2_num_data_valid),
    .if_fifo_cap(products_1_2_fifo_cap),
    .if_empty_n(products_1_2_empty_n),
    .if_read(Block_entry4256_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_assign_2_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4255_proc_U0_ap_return),
    .if_full_n(products_assign_2_load_loc_channel_full_n),
    .if_write(Block_entry4255_proc_U0_ap_done),
    .if_dout(products_assign_2_load_loc_channel_dout),
    .if_num_data_valid(products_assign_2_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_2_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_2_load_loc_channel_empty_n),
    .if_read(Block_entry4256_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_7_U0_ap_return),
    .if_full_n(products_0_3_full_n),
    .if_write(multiply_7_U0_ap_done),
    .if_dout(products_0_3_dout),
    .if_num_data_valid(products_0_3_num_data_valid),
    .if_fifo_cap(products_0_3_fifo_cap),
    .if_empty_n(products_0_3_empty_n),
    .if_read(Block_entry4260_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d3_S products_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_827_U0_ap_return),
    .if_full_n(products_1_3_full_n),
    .if_write(multiply_827_U0_ap_done),
    .if_dout(products_1_3_dout),
    .if_num_data_valid(products_1_3_num_data_valid),
    .if_fifo_cap(products_1_3_fifo_cap),
    .if_empty_n(products_1_3_empty_n),
    .if_read(Block_entry4261_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_assign_3_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4260_proc_U0_ap_return),
    .if_full_n(products_assign_3_load_loc_channel_full_n),
    .if_write(Block_entry4260_proc_U0_ap_done),
    .if_dout(products_assign_3_load_loc_channel_dout),
    .if_num_data_valid(products_assign_3_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_3_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_3_load_loc_channel_empty_n),
    .if_read(Block_entry4261_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_9_U0_ap_return),
    .if_full_n(products_0_4_full_n),
    .if_write(multiply_9_U0_ap_done),
    .if_dout(products_0_4_dout),
    .if_num_data_valid(products_0_4_num_data_valid),
    .if_fifo_cap(products_0_4_fifo_cap),
    .if_empty_n(products_0_4_empty_n),
    .if_read(Block_entry4265_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d3_S products_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_1028_U0_ap_return),
    .if_full_n(products_1_4_full_n),
    .if_write(multiply_1028_U0_ap_done),
    .if_dout(products_1_4_dout),
    .if_num_data_valid(products_1_4_num_data_valid),
    .if_fifo_cap(products_1_4_fifo_cap),
    .if_empty_n(products_1_4_empty_n),
    .if_read(Block_entry4266_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_assign_4_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4265_proc_U0_ap_return),
    .if_full_n(products_assign_4_load_loc_channel_full_n),
    .if_write(Block_entry4265_proc_U0_ap_done),
    .if_dout(products_assign_4_load_loc_channel_dout),
    .if_num_data_valid(products_assign_4_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_4_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_4_load_loc_channel_empty_n),
    .if_read(Block_entry4266_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply_11_U0_ap_return),
    .if_full_n(products_0_5_full_n),
    .if_write(multiply_11_U0_ap_done),
    .if_dout(products_0_5_dout),
    .if_num_data_valid(products_0_5_num_data_valid),
    .if_fifo_cap(products_0_5_fifo_cap),
    .if_empty_n(products_0_5_empty_n),
    .if_read(Block_entry4270_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d3_S products_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(multiply29_U0_ap_return),
    .if_full_n(products_1_5_full_n),
    .if_write(multiply29_U0_ap_done),
    .if_dout(products_1_5_dout),
    .if_num_data_valid(products_1_5_num_data_valid),
    .if_fifo_cap(products_1_5_fifo_cap),
    .if_empty_n(products_1_5_empty_n),
    .if_read(Block_entry4271_proc_U0_ap_ready)
);

uz_VSDinv_6ph_asym_fifo_w32_d2_S products_assign_5_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry4270_proc_U0_ap_return),
    .if_full_n(products_assign_5_load_loc_channel_full_n),
    .if_write(Block_entry4270_proc_U0_ap_done),
    .if_dout(products_assign_5_load_loc_channel_dout),
    .if_num_data_valid(products_assign_5_load_loc_channel_num_data_valid),
    .if_fifo_cap(products_assign_5_load_loc_channel_fifo_cap),
    .if_empty_n(products_assign_5_load_loc_channel_empty_n),
    .if_read(Block_entry4271_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply29_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply29_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply29_U0_ap_ready <= ap_sync_multiply29_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_1028_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_1028_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_1028_U0_ap_ready <= ap_sync_multiply_1028_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_11_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_11_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_11_U0_ap_ready <= ap_sync_multiply_11_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_1_U0_ap_ready <= ap_sync_multiply_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_224_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_224_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_224_U0_ap_ready <= ap_sync_multiply_224_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_3_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_3_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_3_U0_ap_ready <= ap_sync_multiply_3_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_425_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_425_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_425_U0_ap_ready <= ap_sync_multiply_425_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_5_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_5_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_5_U0_ap_ready <= ap_sync_multiply_5_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_626_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_626_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_626_U0_ap_ready <= ap_sync_multiply_626_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_7_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_7_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_7_U0_ap_ready <= ap_sync_multiply_7_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_827_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_827_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_827_U0_ap_ready <= ap_sync_multiply_827_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_multiply_9_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_multiply_9_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_multiply_9_U0_ap_ready <= ap_sync_multiply_9_U0_ap_ready;
        end
    end
end

assign Block_entry4245_proc_U0_ap_continue = products_assign_load_loc_channel_full_n;

assign Block_entry4245_proc_U0_ap_start = products_0_empty_n;

assign Block_entry4246_proc_U0_ap_continue = ap_sync_done;

assign Block_entry4246_proc_U0_ap_start = (products_assign_load_loc_channel_empty_n & products_1_empty_n);

assign Block_entry4250_proc_U0_ap_continue = products_assign_1_load_loc_channel_full_n;

assign Block_entry4250_proc_U0_ap_start = products_0_1_empty_n;

assign Block_entry4251_proc_U0_ap_continue = ap_sync_done;

assign Block_entry4251_proc_U0_ap_start = (products_assign_1_load_loc_channel_empty_n & products_1_1_empty_n);

assign Block_entry4255_proc_U0_ap_continue = products_assign_2_load_loc_channel_full_n;

assign Block_entry4255_proc_U0_ap_start = products_0_2_empty_n;

assign Block_entry4256_proc_U0_ap_continue = ap_sync_done;

assign Block_entry4256_proc_U0_ap_start = (products_assign_2_load_loc_channel_empty_n & products_1_2_empty_n);

assign Block_entry4260_proc_U0_ap_continue = products_assign_3_load_loc_channel_full_n;

assign Block_entry4260_proc_U0_ap_start = products_0_3_empty_n;

assign Block_entry4261_proc_U0_ap_continue = ap_sync_done;

assign Block_entry4261_proc_U0_ap_start = (products_assign_3_load_loc_channel_empty_n & products_1_3_empty_n);

assign Block_entry4265_proc_U0_ap_continue = products_assign_4_load_loc_channel_full_n;

assign Block_entry4265_proc_U0_ap_start = products_0_4_empty_n;

assign Block_entry4266_proc_U0_ap_continue = ap_sync_done;

assign Block_entry4266_proc_U0_ap_start = (products_assign_4_load_loc_channel_empty_n & products_1_4_empty_n);

assign Block_entry4270_proc_U0_ap_continue = products_assign_5_load_loc_channel_full_n;

assign Block_entry4270_proc_U0_ap_start = products_0_5_empty_n;

assign Block_entry4271_proc_U0_ap_continue = ap_sync_done;

assign Block_entry4271_proc_U0_ap_start = (products_assign_5_load_loc_channel_empty_n & products_1_5_empty_n);

assign ap_done = ap_sync_done;

assign ap_idle = (multiply_9_U0_ap_idle & multiply_827_U0_ap_idle & multiply_7_U0_ap_idle & multiply_626_U0_ap_idle & multiply_5_U0_ap_idle & multiply_425_U0_ap_idle & multiply_3_U0_ap_idle & multiply_224_U0_ap_idle & multiply_1_U0_ap_idle & multiply_11_U0_ap_idle & multiply_1028_U0_ap_idle & multiply29_U0_ap_idle & (products_assign_5_load_loc_channel_empty_n ^ 1'b1) & (products_1_5_empty_n ^ 1'b1) & (products_0_5_empty_n ^ 1'b1) & (products_assign_4_load_loc_channel_empty_n ^ 1'b1) & (products_1_4_empty_n ^ 1'b1) & (products_0_4_empty_n ^ 1'b1) & (products_assign_3_load_loc_channel_empty_n ^ 1'b1) & (products_1_3_empty_n ^ 1'b1) & (products_0_3_empty_n ^ 1'b1) & (products_assign_2_load_loc_channel_empty_n ^ 1'b1) & (products_1_2_empty_n ^ 1'b1) & (products_0_2_empty_n ^ 1'b1) & (products_assign_1_load_loc_channel_empty_n ^ 1'b1) & (products_1_1_empty_n ^ 1'b1) & (products_0_1_empty_n ^ 1'b1) & (products_assign_load_loc_channel_empty_n ^ 1'b1) & (products_1_empty_n ^ 1'b1) & (products_0_empty_n ^ 1'b1) & Block_entry4271_proc_U0_ap_idle & Block_entry4270_proc_U0_ap_idle & Block_entry4266_proc_U0_ap_idle & Block_entry4265_proc_U0_ap_idle & Block_entry4261_proc_U0_ap_idle & Block_entry4260_proc_U0_ap_idle & Block_entry4256_proc_U0_ap_idle & Block_entry4255_proc_U0_ap_idle & Block_entry4251_proc_U0_ap_idle & Block_entry4250_proc_U0_ap_idle & Block_entry4246_proc_U0_ap_idle & Block_entry4245_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_done = (Block_entry4271_proc_U0_ap_done & Block_entry4266_proc_U0_ap_done & Block_entry4261_proc_U0_ap_done & Block_entry4256_proc_U0_ap_done & Block_entry4251_proc_U0_ap_done & Block_entry4246_proc_U0_ap_done);

assign ap_sync_multiply29_U0_ap_ready = (multiply29_U0_ap_ready | ap_sync_reg_multiply29_U0_ap_ready);

assign ap_sync_multiply_1028_U0_ap_ready = (multiply_1028_U0_ap_ready | ap_sync_reg_multiply_1028_U0_ap_ready);

assign ap_sync_multiply_11_U0_ap_ready = (multiply_11_U0_ap_ready | ap_sync_reg_multiply_11_U0_ap_ready);

assign ap_sync_multiply_1_U0_ap_ready = (multiply_1_U0_ap_ready | ap_sync_reg_multiply_1_U0_ap_ready);

assign ap_sync_multiply_224_U0_ap_ready = (multiply_224_U0_ap_ready | ap_sync_reg_multiply_224_U0_ap_ready);

assign ap_sync_multiply_3_U0_ap_ready = (multiply_3_U0_ap_ready | ap_sync_reg_multiply_3_U0_ap_ready);

assign ap_sync_multiply_425_U0_ap_ready = (multiply_425_U0_ap_ready | ap_sync_reg_multiply_425_U0_ap_ready);

assign ap_sync_multiply_5_U0_ap_ready = (multiply_5_U0_ap_ready | ap_sync_reg_multiply_5_U0_ap_ready);

assign ap_sync_multiply_626_U0_ap_ready = (multiply_626_U0_ap_ready | ap_sync_reg_multiply_626_U0_ap_ready);

assign ap_sync_multiply_7_U0_ap_ready = (multiply_7_U0_ap_ready | ap_sync_reg_multiply_7_U0_ap_ready);

assign ap_sync_multiply_827_U0_ap_ready = (multiply_827_U0_ap_ready | ap_sync_reg_multiply_827_U0_ap_ready);

assign ap_sync_multiply_9_U0_ap_ready = (multiply_9_U0_ap_ready | ap_sync_reg_multiply_9_U0_ap_ready);

assign ap_sync_ready = (ap_sync_multiply_9_U0_ap_ready & ap_sync_multiply_827_U0_ap_ready & ap_sync_multiply_7_U0_ap_ready & ap_sync_multiply_626_U0_ap_ready & ap_sync_multiply_5_U0_ap_ready & ap_sync_multiply_425_U0_ap_ready & ap_sync_multiply_3_U0_ap_ready & ap_sync_multiply_224_U0_ap_ready & ap_sync_multiply_1_U0_ap_ready & ap_sync_multiply_11_U0_ap_ready & ap_sync_multiply_1028_U0_ap_ready & ap_sync_multiply29_U0_ap_ready);

assign multiply29_U0_ap_continue = products_1_5_full_n;

assign multiply29_U0_ap_start = ((ap_sync_reg_multiply29_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_1028_U0_ap_continue = products_1_4_full_n;

assign multiply_1028_U0_ap_start = ((ap_sync_reg_multiply_1028_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_11_U0_ap_continue = products_0_5_full_n;

assign multiply_11_U0_ap_start = ((ap_sync_reg_multiply_11_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_1_U0_ap_continue = products_0_full_n;

assign multiply_1_U0_ap_start = ((ap_sync_reg_multiply_1_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_224_U0_ap_continue = products_1_full_n;

assign multiply_224_U0_ap_start = ((ap_sync_reg_multiply_224_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_3_U0_ap_continue = products_0_1_full_n;

assign multiply_3_U0_ap_start = ((ap_sync_reg_multiply_3_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_425_U0_ap_continue = products_1_1_full_n;

assign multiply_425_U0_ap_start = ((ap_sync_reg_multiply_425_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_5_U0_ap_continue = products_0_2_full_n;

assign multiply_5_U0_ap_start = ((ap_sync_reg_multiply_5_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_626_U0_ap_continue = products_1_2_full_n;

assign multiply_626_U0_ap_start = ((ap_sync_reg_multiply_626_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_7_U0_ap_continue = products_0_3_full_n;

assign multiply_7_U0_ap_start = ((ap_sync_reg_multiply_7_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_827_U0_ap_continue = products_1_3_full_n;

assign multiply_827_U0_ap_start = ((ap_sync_reg_multiply_827_U0_ap_ready ^ 1'b1) & ap_start);

assign multiply_9_U0_ap_continue = products_0_4_full_n;

assign multiply_9_U0_ap_start = ((ap_sync_reg_multiply_9_U0_ap_ready ^ 1'b1) & ap_start);

assign out_a1 = Block_entry4246_proc_U0_out_a1;

assign out_a2 = Block_entry4261_proc_U0_out_a2;

assign out_b1 = Block_entry4251_proc_U0_out_b1;

assign out_b2 = Block_entry4266_proc_U0_out_b2;

assign out_c1 = Block_entry4256_proc_U0_out_c1;

assign out_c2 = Block_entry4271_proc_U0_out_c2;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "uz_VSDinv_6ph_asym_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //uz_VSDinv_6ph_asym

