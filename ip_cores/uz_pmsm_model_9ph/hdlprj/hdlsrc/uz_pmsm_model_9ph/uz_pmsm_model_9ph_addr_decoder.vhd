-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdlprj\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_addr_decoder.vhd
-- Created: 2022-04-15 14:11:31
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_addr_decoder
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph_axi4/uz_pmsm_model_9ph_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_output_general               :   IN    vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
        read_output_currents_dq           :   IN    vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
        read_output_currents_abc          :   IN    vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_inputs_general              :   OUT   vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
        write_input_voltages_dq           :   OUT   vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
        write_input_voltages_abc          :   OUT   vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
        write_Model_Parameter_reset_integrators :   OUT   std_logic;  -- ufix1
        write_Model_Parameter_simulate_mechanics :   OUT   std_logic;  -- ufix1
        write_Model_Parameter_switch_pspl :   OUT   std_logic;  -- ufix1
        write_Model_Parameter_control_dq_abc :   OUT   std_logic;  -- ufix1
        write_Physical_Parameter_1_J      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_mu       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_M_R0     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_1_L_d    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_1_L_q    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_R_1      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_polepair :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_psi_pm   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_o1     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_o2     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_x1     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_y1     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_x2     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_y2     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Physical_Parameter_L_zero   :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END uz_pmsm_model_9ph_addr_decoder;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_output_general_1_1    : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_general        : std_logic;  -- ufix1
  SIGNAL strobe_sel_output_general        : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_output_general         : std_logic;  -- ufix1
  SIGNAL strobe_sw_output_general         : std_logic;  -- ufix1
  SIGNAL strobe_reg_output_general        : std_logic;  -- ufix1
  SIGNAL read_output_general_unsigned     : vector_of_unsigned32(0 TO 4);  -- ufix32 [5]
  SIGNAL sync_reg_output_general          : vector_of_unsigned32(0 TO 4);  -- ufix32 [5]
  SIGNAL data_slice_output_general_1      : vector_of_unsigned32(0 TO 4);  -- ufix32 [5]
  SIGNAL decode_sel_output_general_1_2    : std_logic;  -- ufix1
  SIGNAL data_slice_output_general_1_0    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_general_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_general_1_3    : std_logic;  -- ufix1
  SIGNAL data_slice_output_general_1_1    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_general_1_2     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_general_1_4    : std_logic;  -- ufix1
  SIGNAL data_slice_output_general_1_2    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_general_1_3     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_general_1_5    : std_logic;  -- ufix1
  SIGNAL data_slice_output_general_1_3    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_general_1_4     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_1 : std_logic;  -- ufix1
  SIGNAL data_slice_output_general_1_4    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_general_1_5     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq    : std_logic;  -- ufix1
  SIGNAL strobe_sel_output_currents_dq    : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_output_currents_dq     : std_logic;  -- ufix1
  SIGNAL strobe_sw_output_currents_dq     : std_logic;  -- ufix1
  SIGNAL strobe_reg_output_currents_dq    : std_logic;  -- ufix1
  SIGNAL read_output_currents_dq_unsigned : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL sync_reg_output_currents_dq      : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL data_slice_output_currents_dq_1  : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL decode_sel_output_currents_dq_1_2 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_0 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_3 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_4 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_5 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_6 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_7 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_6 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_8 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_6 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_7 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_dq_1_9 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_7 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_8 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_1 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_dq_1_8 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_dq_1_9 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc   : std_logic;  -- ufix1
  SIGNAL strobe_sel_output_currents_abc   : std_logic;  -- ufix1
  SIGNAL const_zero_2                     : std_logic;  -- ufix1
  SIGNAL strobe_in_output_currents_abc    : std_logic;  -- ufix1
  SIGNAL strobe_sw_output_currents_abc    : std_logic;  -- ufix1
  SIGNAL strobe_reg_output_currents_abc   : std_logic;  -- ufix1
  SIGNAL read_output_currents_abc_unsigned : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL sync_reg_output_currents_abc     : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL data_slice_output_currents_abc_1 : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL decode_sel_output_currents_abc_1_2 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_0 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_3 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_4 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_2 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_5 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_3 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_6 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_4 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_7 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_5 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_6 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_8 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_6 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_7 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_output_currents_abc_1_9 : std_logic;  -- ufix1
  SIGNAL data_slice_output_currents_abc_1_7 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_8 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_output_currents_abc_1_8 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_output_currents_abc_1_9 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_inputs_general        : std_logic;  -- ufix1
  SIGNAL strobe_sel_inputs_general        : std_logic;  -- ufix1
  SIGNAL const_zero_3                     : std_logic;  -- ufix1
  SIGNAL strobe_in_inputs_general         : std_logic;  -- ufix1
  SIGNAL strobe_sw_inputs_general         : std_logic;  -- ufix1
  SIGNAL decode_sel_inputs_general_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_inputs_general_1_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_inputs_general_2_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_inputs_general_2_1       : std_logic;  -- ufix1
  SIGNAL strobe_reg_inputs_general        : std_logic;  -- ufix1
  SIGNAL data_reg_inputs_general_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_inputs_general_2_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_inputs_general         : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL sync_reg_inputs_general_1        : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL decode_sel_input_voltages_dq     : std_logic;  -- ufix1
  SIGNAL strobe_sel_input_voltages_dq     : std_logic;  -- ufix1
  SIGNAL const_zero_4                     : std_logic;  -- ufix1
  SIGNAL strobe_in_input_voltages_dq      : std_logic;  -- ufix1
  SIGNAL strobe_sw_input_voltages_dq      : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_2_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_2_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_3_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_3_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_4_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_4_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_5_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_5_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_6_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_6_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_7_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_7_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_8_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_8_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_dq_9_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_dq_9_1    : std_logic;  -- ufix1
  SIGNAL strobe_reg_input_voltages_dq     : std_logic;  -- ufix1
  SIGNAL data_reg_input_voltages_dq_1_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_2_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_3_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_4_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_5_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_6_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_7_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_8_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_dq_9_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_input_voltages_dq      : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL sync_reg_input_voltages_dq_1     : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL decode_sel_input_voltages_abc    : std_logic;  -- ufix1
  SIGNAL strobe_sel_input_voltages_abc    : std_logic;  -- ufix1
  SIGNAL const_zero_5                     : std_logic;  -- ufix1
  SIGNAL strobe_in_input_voltages_abc     : std_logic;  -- ufix1
  SIGNAL strobe_sw_input_voltages_abc     : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_1_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_2_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_2_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_3_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_3_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_4_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_4_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_5_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_5_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_6_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_6_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_7_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_7_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_8_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_8_1   : std_logic;  -- ufix1
  SIGNAL decode_sel_input_voltages_abc_9_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_input_voltages_abc_9_1   : std_logic;  -- ufix1
  SIGNAL strobe_reg_input_voltages_abc    : std_logic;  -- ufix1
  SIGNAL data_reg_input_voltages_abc_1_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_2_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_3_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_4_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_5_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_6_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_7_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_8_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_reg_input_voltages_abc_9_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_input_voltages_abc     : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL sync_reg_input_voltages_abc_1    : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL decode_sel_Model_Parameter_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_reset_integrators : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_reset_integrators_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_reset_integrators_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Model_Parameter_simulate_mechanics_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_simulate_mechanics_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_simulate_mechanics : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_simulate_mechanics_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_simulate_mechanics_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Model_Parameter_switch_pspl_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_switch_pspl_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_switch_pspl : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_switch_pspl_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_switch_pspl_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Model_Parameter_control_dq_abc_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Model_Parameter_control_dq_abc_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Model_Parameter_control_dq_abc : std_logic;  -- ufix1
  SIGNAL data_reg_Model_Parameter_control_dq_abc_1_1 : std_logic;  -- ufix1
  SIGNAL write_concats_Model_Parameter_control_dq_abc_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Physical_Parameter_1_J_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_1_J_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_1_J_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_mu_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_mu_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_mu_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_M_R0_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_M_R0_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_M_R0_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_1_L_d_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_1_L_d_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_1_L_d_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_1_L_q_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_1_L_q_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_1_L_q_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_R_1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_R_1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_R_1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_polepair_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_polepair_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_polepair_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_psi_pm_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_psi_pm_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_psi_pm_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_o1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_o1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_o1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_o2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_o2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_o2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_x1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_x1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_x1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_y1_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_y1_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_y1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_x2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_x2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_x2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_y2_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_y2_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_y2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Physical_Parameter_L_zero_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Physical_Parameter_L_zero_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_Physical_Parameter_L_zero_1_1 : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_output_general_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A8#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  
  decode_sel_output_general <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00B0#, 14) ELSE
      '0';

  strobe_sel_output_general <= decode_sel_output_general AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_output_general <= data_write_unsigned(0);

  
  strobe_sw_output_general <= const_zero WHEN strobe_sel_output_general = '0' ELSE
      strobe_in_output_general;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_output_general <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_output_general <= strobe_sw_output_general;
      END IF;
    END IF;
  END PROCESS reg_process;


  outputgen5: FOR k IN 0 TO 4 GENERATE
    read_output_general_unsigned(k) <= unsigned(read_output_general(k));
  END GENERATE;

  reg_output_general_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_output_general(0) <= to_unsigned(0, 32);
        sync_reg_output_general(1) <= to_unsigned(0, 32);
        sync_reg_output_general(2) <= to_unsigned(0, 32);
        sync_reg_output_general(3) <= to_unsigned(0, 32);
        sync_reg_output_general(4) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_output_general = '1' THEN
        sync_reg_output_general(0) <= read_output_general_unsigned(0);
        sync_reg_output_general(1) <= read_output_general_unsigned(1);
        sync_reg_output_general(2) <= read_output_general_unsigned(2);
        sync_reg_output_general(3) <= read_output_general_unsigned(3);
        sync_reg_output_general(4) <= read_output_general_unsigned(4);
      END IF;
    END IF;
  END PROCESS reg_output_general_process;


  data_slice_output_general_1(0) <= sync_reg_output_general(0);
  data_slice_output_general_1(1) <= sync_reg_output_general(1);
  data_slice_output_general_1(2) <= sync_reg_output_general(2);
  data_slice_output_general_1(3) <= sync_reg_output_general(3);
  data_slice_output_general_1(4) <= sync_reg_output_general(4);

  
  decode_sel_output_general_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A9#, 14) ELSE
      '0';

  data_slice_output_general_1_0 <= data_slice_output_general_1(0);

  
  decode_rd_output_general_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_output_general_1_1 = '0' ELSE
      data_slice_output_general_1_0;

  
  decode_sel_output_general_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00AA#, 14) ELSE
      '0';

  data_slice_output_general_1_1 <= data_slice_output_general_1(1);

  
  decode_rd_output_general_1_2 <= decode_rd_output_general_1_1 WHEN decode_sel_output_general_1_2 = '0' ELSE
      data_slice_output_general_1_1;

  
  decode_sel_output_general_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00AB#, 14) ELSE
      '0';

  data_slice_output_general_1_2 <= data_slice_output_general_1(2);

  
  decode_rd_output_general_1_3 <= decode_rd_output_general_1_2 WHEN decode_sel_output_general_1_3 = '0' ELSE
      data_slice_output_general_1_2;

  
  decode_sel_output_general_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00AC#, 14) ELSE
      '0';

  data_slice_output_general_1_3 <= data_slice_output_general_1(3);

  
  decode_rd_output_general_1_4 <= decode_rd_output_general_1_3 WHEN decode_sel_output_general_1_4 = '0' ELSE
      data_slice_output_general_1_3;

  
  decode_sel_output_currents_dq_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C0#, 14) ELSE
      '0';

  data_slice_output_general_1_4 <= data_slice_output_general_1(4);

  
  decode_rd_output_general_1_5 <= decode_rd_output_general_1_4 WHEN decode_sel_output_general_1_5 = '0' ELSE
      data_slice_output_general_1_4;

  
  decode_sel_output_currents_dq <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00D0#, 14) ELSE
      '0';

  strobe_sel_output_currents_dq <= decode_sel_output_currents_dq AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_output_currents_dq <= data_write_unsigned(0);

  
  strobe_sw_output_currents_dq <= const_zero_1 WHEN strobe_sel_output_currents_dq = '0' ELSE
      strobe_in_output_currents_dq;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_output_currents_dq <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_output_currents_dq <= strobe_sw_output_currents_dq;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  outputgen4: FOR k IN 0 TO 8 GENERATE
    read_output_currents_dq_unsigned(k) <= unsigned(read_output_currents_dq(k));
  END GENERATE;

  reg_output_currents_dq_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_output_currents_dq(0) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(1) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(2) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(3) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(4) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(5) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(6) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(7) <= to_unsigned(0, 32);
        sync_reg_output_currents_dq(8) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_output_currents_dq = '1' THEN
        sync_reg_output_currents_dq(0) <= read_output_currents_dq_unsigned(0);
        sync_reg_output_currents_dq(1) <= read_output_currents_dq_unsigned(1);
        sync_reg_output_currents_dq(2) <= read_output_currents_dq_unsigned(2);
        sync_reg_output_currents_dq(3) <= read_output_currents_dq_unsigned(3);
        sync_reg_output_currents_dq(4) <= read_output_currents_dq_unsigned(4);
        sync_reg_output_currents_dq(5) <= read_output_currents_dq_unsigned(5);
        sync_reg_output_currents_dq(6) <= read_output_currents_dq_unsigned(6);
        sync_reg_output_currents_dq(7) <= read_output_currents_dq_unsigned(7);
        sync_reg_output_currents_dq(8) <= read_output_currents_dq_unsigned(8);
      END IF;
    END IF;
  END PROCESS reg_output_currents_dq_process;


  data_slice_output_currents_dq_1(0) <= sync_reg_output_currents_dq(0);
  data_slice_output_currents_dq_1(1) <= sync_reg_output_currents_dq(1);
  data_slice_output_currents_dq_1(2) <= sync_reg_output_currents_dq(2);
  data_slice_output_currents_dq_1(3) <= sync_reg_output_currents_dq(3);
  data_slice_output_currents_dq_1(4) <= sync_reg_output_currents_dq(4);
  data_slice_output_currents_dq_1(5) <= sync_reg_output_currents_dq(5);
  data_slice_output_currents_dq_1(6) <= sync_reg_output_currents_dq(6);
  data_slice_output_currents_dq_1(7) <= sync_reg_output_currents_dq(7);
  data_slice_output_currents_dq_1(8) <= sync_reg_output_currents_dq(8);

  
  decode_sel_output_currents_dq_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C1#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_0 <= data_slice_output_currents_dq_1(0);

  
  decode_rd_output_currents_dq_1_1 <= decode_rd_output_general_1_5 WHEN decode_sel_output_currents_dq_1_1 = '0' ELSE
      data_slice_output_currents_dq_1_0;

  
  decode_sel_output_currents_dq_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C2#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_1 <= data_slice_output_currents_dq_1(1);

  
  decode_rd_output_currents_dq_1_2 <= decode_rd_output_currents_dq_1_1 WHEN decode_sel_output_currents_dq_1_2 = '0' ELSE
      data_slice_output_currents_dq_1_1;

  
  decode_sel_output_currents_dq_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C3#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_2 <= data_slice_output_currents_dq_1(2);

  
  decode_rd_output_currents_dq_1_3 <= decode_rd_output_currents_dq_1_2 WHEN decode_sel_output_currents_dq_1_3 = '0' ELSE
      data_slice_output_currents_dq_1_2;

  
  decode_sel_output_currents_dq_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C4#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_3 <= data_slice_output_currents_dq_1(3);

  
  decode_rd_output_currents_dq_1_4 <= decode_rd_output_currents_dq_1_3 WHEN decode_sel_output_currents_dq_1_4 = '0' ELSE
      data_slice_output_currents_dq_1_3;

  
  decode_sel_output_currents_dq_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C5#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_4 <= data_slice_output_currents_dq_1(4);

  
  decode_rd_output_currents_dq_1_5 <= decode_rd_output_currents_dq_1_4 WHEN decode_sel_output_currents_dq_1_5 = '0' ELSE
      data_slice_output_currents_dq_1_4;

  
  decode_sel_output_currents_dq_1_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C6#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_5 <= data_slice_output_currents_dq_1(5);

  
  decode_rd_output_currents_dq_1_6 <= decode_rd_output_currents_dq_1_5 WHEN decode_sel_output_currents_dq_1_6 = '0' ELSE
      data_slice_output_currents_dq_1_5;

  
  decode_sel_output_currents_dq_1_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C7#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_6 <= data_slice_output_currents_dq_1(6);

  
  decode_rd_output_currents_dq_1_7 <= decode_rd_output_currents_dq_1_6 WHEN decode_sel_output_currents_dq_1_7 = '0' ELSE
      data_slice_output_currents_dq_1_6;

  
  decode_sel_output_currents_dq_1_9 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00C8#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_7 <= data_slice_output_currents_dq_1(7);

  
  decode_rd_output_currents_dq_1_8 <= decode_rd_output_currents_dq_1_7 WHEN decode_sel_output_currents_dq_1_8 = '0' ELSE
      data_slice_output_currents_dq_1_7;

  
  decode_sel_output_currents_abc_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E0#, 14) ELSE
      '0';

  data_slice_output_currents_dq_1_8 <= data_slice_output_currents_dq_1(8);

  
  decode_rd_output_currents_dq_1_9 <= decode_rd_output_currents_dq_1_8 WHEN decode_sel_output_currents_dq_1_9 = '0' ELSE
      data_slice_output_currents_dq_1_8;

  
  decode_sel_output_currents_abc <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00F0#, 14) ELSE
      '0';

  strobe_sel_output_currents_abc <= decode_sel_output_currents_abc AND wr_enb;

  const_zero_2 <= '0';

  strobe_in_output_currents_abc <= data_write_unsigned(0);

  
  strobe_sw_output_currents_abc <= const_zero_2 WHEN strobe_sel_output_currents_abc = '0' ELSE
      strobe_in_output_currents_abc;

  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_output_currents_abc <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_output_currents_abc <= strobe_sw_output_currents_abc;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  outputgen3: FOR k IN 0 TO 8 GENERATE
    read_output_currents_abc_unsigned(k) <= unsigned(read_output_currents_abc(k));
  END GENERATE;

  reg_output_currents_abc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_output_currents_abc(0) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(1) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(2) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(3) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(4) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(5) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(6) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(7) <= to_unsigned(0, 32);
        sync_reg_output_currents_abc(8) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_output_currents_abc = '1' THEN
        sync_reg_output_currents_abc(0) <= read_output_currents_abc_unsigned(0);
        sync_reg_output_currents_abc(1) <= read_output_currents_abc_unsigned(1);
        sync_reg_output_currents_abc(2) <= read_output_currents_abc_unsigned(2);
        sync_reg_output_currents_abc(3) <= read_output_currents_abc_unsigned(3);
        sync_reg_output_currents_abc(4) <= read_output_currents_abc_unsigned(4);
        sync_reg_output_currents_abc(5) <= read_output_currents_abc_unsigned(5);
        sync_reg_output_currents_abc(6) <= read_output_currents_abc_unsigned(6);
        sync_reg_output_currents_abc(7) <= read_output_currents_abc_unsigned(7);
        sync_reg_output_currents_abc(8) <= read_output_currents_abc_unsigned(8);
      END IF;
    END IF;
  END PROCESS reg_output_currents_abc_process;


  data_slice_output_currents_abc_1(0) <= sync_reg_output_currents_abc(0);
  data_slice_output_currents_abc_1(1) <= sync_reg_output_currents_abc(1);
  data_slice_output_currents_abc_1(2) <= sync_reg_output_currents_abc(2);
  data_slice_output_currents_abc_1(3) <= sync_reg_output_currents_abc(3);
  data_slice_output_currents_abc_1(4) <= sync_reg_output_currents_abc(4);
  data_slice_output_currents_abc_1(5) <= sync_reg_output_currents_abc(5);
  data_slice_output_currents_abc_1(6) <= sync_reg_output_currents_abc(6);
  data_slice_output_currents_abc_1(7) <= sync_reg_output_currents_abc(7);
  data_slice_output_currents_abc_1(8) <= sync_reg_output_currents_abc(8);

  
  decode_sel_output_currents_abc_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E1#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_0 <= data_slice_output_currents_abc_1(0);

  
  decode_rd_output_currents_abc_1_1 <= decode_rd_output_currents_dq_1_9 WHEN decode_sel_output_currents_abc_1_1 = '0' ELSE
      data_slice_output_currents_abc_1_0;

  
  decode_sel_output_currents_abc_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E2#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_1 <= data_slice_output_currents_abc_1(1);

  
  decode_rd_output_currents_abc_1_2 <= decode_rd_output_currents_abc_1_1 WHEN decode_sel_output_currents_abc_1_2 = '0' ELSE
      data_slice_output_currents_abc_1_1;

  
  decode_sel_output_currents_abc_1_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E3#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_2 <= data_slice_output_currents_abc_1(2);

  
  decode_rd_output_currents_abc_1_3 <= decode_rd_output_currents_abc_1_2 WHEN decode_sel_output_currents_abc_1_3 = '0' ELSE
      data_slice_output_currents_abc_1_2;

  
  decode_sel_output_currents_abc_1_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E4#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_3 <= data_slice_output_currents_abc_1(3);

  
  decode_rd_output_currents_abc_1_4 <= decode_rd_output_currents_abc_1_3 WHEN decode_sel_output_currents_abc_1_4 = '0' ELSE
      data_slice_output_currents_abc_1_3;

  
  decode_sel_output_currents_abc_1_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E5#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_4 <= data_slice_output_currents_abc_1(4);

  
  decode_rd_output_currents_abc_1_5 <= decode_rd_output_currents_abc_1_4 WHEN decode_sel_output_currents_abc_1_5 = '0' ELSE
      data_slice_output_currents_abc_1_4;

  
  decode_sel_output_currents_abc_1_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E6#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_5 <= data_slice_output_currents_abc_1(5);

  
  decode_rd_output_currents_abc_1_6 <= decode_rd_output_currents_abc_1_5 WHEN decode_sel_output_currents_abc_1_6 = '0' ELSE
      data_slice_output_currents_abc_1_5;

  
  decode_sel_output_currents_abc_1_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E7#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_6 <= data_slice_output_currents_abc_1(6);

  
  decode_rd_output_currents_abc_1_7 <= decode_rd_output_currents_abc_1_6 WHEN decode_sel_output_currents_abc_1_7 = '0' ELSE
      data_slice_output_currents_abc_1_6;

  
  decode_sel_output_currents_abc_1_9 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00E8#, 14) ELSE
      '0';

  data_slice_output_currents_abc_1_7 <= data_slice_output_currents_abc_1(7);

  
  decode_rd_output_currents_abc_1_8 <= decode_rd_output_currents_abc_1_7 WHEN decode_sel_output_currents_abc_1_8 = '0' ELSE
      data_slice_output_currents_abc_1_7;

  data_slice_output_currents_abc_1_8 <= data_slice_output_currents_abc_1(8);

  
  decode_rd_output_currents_abc_1_9 <= decode_rd_output_currents_abc_1_8 WHEN decode_sel_output_currents_abc_1_9 = '0' ELSE
      data_slice_output_currents_abc_1_8;

  data_read <= std_logic_vector(decode_rd_output_currents_abc_1_9);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_inputs_general <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0062#, 14) ELSE
      '0';

  strobe_sel_inputs_general <= decode_sel_inputs_general AND wr_enb;

  const_zero_3 <= '0';

  strobe_in_inputs_general <= data_write_unsigned(0);

  
  strobe_sw_inputs_general <= const_zero_3 WHEN strobe_sel_inputs_general = '0' ELSE
      strobe_in_inputs_general;

  
  decode_sel_inputs_general_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  reg_enb_inputs_general_1_1 <= decode_sel_inputs_general_1_1 AND wr_enb;

  
  decode_sel_inputs_general_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0061#, 14) ELSE
      '0';

  reg_enb_inputs_general_2_1 <= decode_sel_inputs_general_2_1 AND wr_enb;

  reg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_inputs_general <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_inputs_general <= strobe_sw_inputs_general;
      END IF;
    END IF;
  END PROCESS reg_3_process;


  reg_inputs_general_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_inputs_general_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_inputs_general_1_1 = '1' THEN
        data_reg_inputs_general_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_inputs_general_1_1_process;


  reg_inputs_general_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_inputs_general_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_inputs_general_2_1 = '1' THEN
        data_reg_inputs_general_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_inputs_general_2_1_process;


  write_reg_inputs_general(0) <= data_reg_inputs_general_1_1;
  write_reg_inputs_general(1) <= data_reg_inputs_general_2_1;

  sync_reg_inputs_general_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_inputs_general_1(0) <= to_unsigned(0, 32);
        sync_reg_inputs_general_1(1) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_inputs_general = '1' THEN
        sync_reg_inputs_general_1(0) <= write_reg_inputs_general(0);
        sync_reg_inputs_general_1(1) <= write_reg_inputs_general(1);
      END IF;
    END IF;
  END PROCESS sync_reg_inputs_general_process;


  outputgen2: FOR k IN 0 TO 1 GENERATE
    write_inputs_general(k) <= std_logic_vector(sync_reg_inputs_general_1(k));
  END GENERATE;

  
  decode_sel_input_voltages_dq <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  strobe_sel_input_voltages_dq <= decode_sel_input_voltages_dq AND wr_enb;

  const_zero_4 <= '0';

  strobe_in_input_voltages_dq <= data_write_unsigned(0);

  
  strobe_sw_input_voltages_dq <= const_zero_4 WHEN strobe_sel_input_voltages_dq = '0' ELSE
      strobe_in_input_voltages_dq;

  
  decode_sel_input_voltages_dq_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0070#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_1_1 <= decode_sel_input_voltages_dq_1_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0071#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_2_1 <= decode_sel_input_voltages_dq_2_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0072#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_3_1 <= decode_sel_input_voltages_dq_3_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0073#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_4_1 <= decode_sel_input_voltages_dq_4_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_5_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0074#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_5_1 <= decode_sel_input_voltages_dq_5_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_6_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0075#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_6_1 <= decode_sel_input_voltages_dq_6_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_7_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0076#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_7_1 <= decode_sel_input_voltages_dq_7_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_8_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0077#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_8_1 <= decode_sel_input_voltages_dq_8_1 AND wr_enb;

  
  decode_sel_input_voltages_dq_9_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0078#, 14) ELSE
      '0';

  reg_enb_input_voltages_dq_9_1 <= decode_sel_input_voltages_dq_9_1 AND wr_enb;

  reg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_input_voltages_dq <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_input_voltages_dq <= strobe_sw_input_voltages_dq;
      END IF;
    END IF;
  END PROCESS reg_4_process;


  reg_input_voltages_dq_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_1_1 = '1' THEN
        data_reg_input_voltages_dq_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_1_1_process;


  reg_input_voltages_dq_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_2_1 = '1' THEN
        data_reg_input_voltages_dq_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_2_1_process;


  reg_input_voltages_dq_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_3_1 = '1' THEN
        data_reg_input_voltages_dq_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_3_1_process;


  reg_input_voltages_dq_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_4_1 = '1' THEN
        data_reg_input_voltages_dq_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_4_1_process;


  reg_input_voltages_dq_5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_5_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_5_1 = '1' THEN
        data_reg_input_voltages_dq_5_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_5_1_process;


  reg_input_voltages_dq_6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_6_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_6_1 = '1' THEN
        data_reg_input_voltages_dq_6_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_6_1_process;


  reg_input_voltages_dq_7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_7_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_7_1 = '1' THEN
        data_reg_input_voltages_dq_7_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_7_1_process;


  reg_input_voltages_dq_8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_8_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_8_1 = '1' THEN
        data_reg_input_voltages_dq_8_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_8_1_process;


  reg_input_voltages_dq_9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_dq_9_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_dq_9_1 = '1' THEN
        data_reg_input_voltages_dq_9_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_dq_9_1_process;


  write_reg_input_voltages_dq(0) <= data_reg_input_voltages_dq_1_1;
  write_reg_input_voltages_dq(1) <= data_reg_input_voltages_dq_2_1;
  write_reg_input_voltages_dq(2) <= data_reg_input_voltages_dq_3_1;
  write_reg_input_voltages_dq(3) <= data_reg_input_voltages_dq_4_1;
  write_reg_input_voltages_dq(4) <= data_reg_input_voltages_dq_5_1;
  write_reg_input_voltages_dq(5) <= data_reg_input_voltages_dq_6_1;
  write_reg_input_voltages_dq(6) <= data_reg_input_voltages_dq_7_1;
  write_reg_input_voltages_dq(7) <= data_reg_input_voltages_dq_8_1;
  write_reg_input_voltages_dq(8) <= data_reg_input_voltages_dq_9_1;

  sync_reg_input_voltages_dq_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_input_voltages_dq_1(0) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(1) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(2) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(3) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(4) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(5) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(6) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(7) <= to_unsigned(0, 32);
        sync_reg_input_voltages_dq_1(8) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_input_voltages_dq = '1' THEN
        sync_reg_input_voltages_dq_1(0) <= write_reg_input_voltages_dq(0);
        sync_reg_input_voltages_dq_1(1) <= write_reg_input_voltages_dq(1);
        sync_reg_input_voltages_dq_1(2) <= write_reg_input_voltages_dq(2);
        sync_reg_input_voltages_dq_1(3) <= write_reg_input_voltages_dq(3);
        sync_reg_input_voltages_dq_1(4) <= write_reg_input_voltages_dq(4);
        sync_reg_input_voltages_dq_1(5) <= write_reg_input_voltages_dq(5);
        sync_reg_input_voltages_dq_1(6) <= write_reg_input_voltages_dq(6);
        sync_reg_input_voltages_dq_1(7) <= write_reg_input_voltages_dq(7);
        sync_reg_input_voltages_dq_1(8) <= write_reg_input_voltages_dq(8);
      END IF;
    END IF;
  END PROCESS sync_reg_input_voltages_dq_process;


  outputgen1: FOR k IN 0 TO 8 GENERATE
    write_input_voltages_dq(k) <= std_logic_vector(sync_reg_input_voltages_dq_1(k));
  END GENERATE;

  
  decode_sel_input_voltages_abc <= '1' WHEN addr_sel_unsigned = to_unsigned(16#00A0#, 14) ELSE
      '0';

  strobe_sel_input_voltages_abc <= decode_sel_input_voltages_abc AND wr_enb;

  const_zero_5 <= '0';

  strobe_in_input_voltages_abc <= data_write_unsigned(0);

  
  strobe_sw_input_voltages_abc <= const_zero_5 WHEN strobe_sel_input_voltages_abc = '0' ELSE
      strobe_in_input_voltages_abc;

  
  decode_sel_input_voltages_abc_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0090#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_1_1 <= decode_sel_input_voltages_abc_1_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0091#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_2_1 <= decode_sel_input_voltages_abc_2_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0092#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_3_1 <= decode_sel_input_voltages_abc_3_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0093#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_4_1 <= decode_sel_input_voltages_abc_4_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_5_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0094#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_5_1 <= decode_sel_input_voltages_abc_5_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_6_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0095#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_6_1 <= decode_sel_input_voltages_abc_6_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_7_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0096#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_7_1 <= decode_sel_input_voltages_abc_7_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_8_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0097#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_8_1 <= decode_sel_input_voltages_abc_8_1 AND wr_enb;

  
  decode_sel_input_voltages_abc_9_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0098#, 14) ELSE
      '0';

  reg_enb_input_voltages_abc_9_1 <= decode_sel_input_voltages_abc_9_1 AND wr_enb;

  reg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_input_voltages_abc <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_input_voltages_abc <= strobe_sw_input_voltages_abc;
      END IF;
    END IF;
  END PROCESS reg_5_process;


  reg_input_voltages_abc_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_1_1 = '1' THEN
        data_reg_input_voltages_abc_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_1_1_process;


  reg_input_voltages_abc_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_2_1 = '1' THEN
        data_reg_input_voltages_abc_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_2_1_process;


  reg_input_voltages_abc_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_3_1 = '1' THEN
        data_reg_input_voltages_abc_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_3_1_process;


  reg_input_voltages_abc_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_4_1 = '1' THEN
        data_reg_input_voltages_abc_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_4_1_process;


  reg_input_voltages_abc_5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_5_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_5_1 = '1' THEN
        data_reg_input_voltages_abc_5_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_5_1_process;


  reg_input_voltages_abc_6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_6_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_6_1 = '1' THEN
        data_reg_input_voltages_abc_6_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_6_1_process;


  reg_input_voltages_abc_7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_7_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_7_1 = '1' THEN
        data_reg_input_voltages_abc_7_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_7_1_process;


  reg_input_voltages_abc_8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_8_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_8_1 = '1' THEN
        data_reg_input_voltages_abc_8_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_8_1_process;


  reg_input_voltages_abc_9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_input_voltages_abc_9_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_input_voltages_abc_9_1 = '1' THEN
        data_reg_input_voltages_abc_9_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_input_voltages_abc_9_1_process;


  write_reg_input_voltages_abc(0) <= data_reg_input_voltages_abc_1_1;
  write_reg_input_voltages_abc(1) <= data_reg_input_voltages_abc_2_1;
  write_reg_input_voltages_abc(2) <= data_reg_input_voltages_abc_3_1;
  write_reg_input_voltages_abc(3) <= data_reg_input_voltages_abc_4_1;
  write_reg_input_voltages_abc(4) <= data_reg_input_voltages_abc_5_1;
  write_reg_input_voltages_abc(5) <= data_reg_input_voltages_abc_6_1;
  write_reg_input_voltages_abc(6) <= data_reg_input_voltages_abc_7_1;
  write_reg_input_voltages_abc(7) <= data_reg_input_voltages_abc_8_1;
  write_reg_input_voltages_abc(8) <= data_reg_input_voltages_abc_9_1;

  sync_reg_input_voltages_abc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_input_voltages_abc_1(0) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(1) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(2) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(3) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(4) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(5) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(6) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(7) <= to_unsigned(0, 32);
        sync_reg_input_voltages_abc_1(8) <= to_unsigned(0, 32);
      ELSIF enb = '1' AND strobe_reg_input_voltages_abc = '1' THEN
        sync_reg_input_voltages_abc_1(0) <= write_reg_input_voltages_abc(0);
        sync_reg_input_voltages_abc_1(1) <= write_reg_input_voltages_abc(1);
        sync_reg_input_voltages_abc_1(2) <= write_reg_input_voltages_abc(2);
        sync_reg_input_voltages_abc_1(3) <= write_reg_input_voltages_abc(3);
        sync_reg_input_voltages_abc_1(4) <= write_reg_input_voltages_abc(4);
        sync_reg_input_voltages_abc_1(5) <= write_reg_input_voltages_abc(5);
        sync_reg_input_voltages_abc_1(6) <= write_reg_input_voltages_abc(6);
        sync_reg_input_voltages_abc_1(7) <= write_reg_input_voltages_abc(7);
        sync_reg_input_voltages_abc_1(8) <= write_reg_input_voltages_abc(8);
      END IF;
    END IF;
  END PROCESS sync_reg_input_voltages_abc_process;


  outputgen: FOR k IN 0 TO 8 GENERATE
    write_input_voltages_abc(k) <= std_logic_vector(sync_reg_input_voltages_abc_1(k));
  END GENERATE;

  
  decode_sel_Model_Parameter_reset_integrators_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_reset_integrators_1_1 <= decode_sel_Model_Parameter_reset_integrators_1_1 AND wr_enb;

  data_in_Model_Parameter_reset_integrators <= data_write_unsigned(0);

  reg_Model_Parameter_reset_integrators_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_reset_integrators_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_reset_integrators_1_1 = '1' THEN
        data_reg_Model_Parameter_reset_integrators_1_1 <= data_in_Model_Parameter_reset_integrators;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_reset_integrators_1_1_process;


  write_concats_Model_Parameter_reset_integrators_1 <= data_reg_Model_Parameter_reset_integrators_1_1;

  write_Model_Parameter_reset_integrators <= write_concats_Model_Parameter_reset_integrators_1;

  
  decode_sel_Model_Parameter_simulate_mechanics_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_simulate_mechanics_1_1 <= decode_sel_Model_Parameter_simulate_mechanics_1_1 AND wr_enb;

  data_in_Model_Parameter_simulate_mechanics <= data_write_unsigned(0);

  reg_Model_Parameter_simulate_mechanics_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_simulate_mechanics_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_simulate_mechanics_1_1 = '1' THEN
        data_reg_Model_Parameter_simulate_mechanics_1_1 <= data_in_Model_Parameter_simulate_mechanics;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_simulate_mechanics_1_1_process;


  write_concats_Model_Parameter_simulate_mechanics_1 <= data_reg_Model_Parameter_simulate_mechanics_1_1;

  write_Model_Parameter_simulate_mechanics <= write_concats_Model_Parameter_simulate_mechanics_1;

  
  decode_sel_Model_Parameter_switch_pspl_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_switch_pspl_1_1 <= decode_sel_Model_Parameter_switch_pspl_1_1 AND wr_enb;

  data_in_Model_Parameter_switch_pspl <= data_write_unsigned(0);

  reg_Model_Parameter_switch_pspl_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_switch_pspl_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_switch_pspl_1_1 = '1' THEN
        data_reg_Model_Parameter_switch_pspl_1_1 <= data_in_Model_Parameter_switch_pspl;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_switch_pspl_1_1_process;


  write_concats_Model_Parameter_switch_pspl_1 <= data_reg_Model_Parameter_switch_pspl_1_1;

  write_Model_Parameter_switch_pspl <= write_concats_Model_Parameter_switch_pspl_1;

  
  decode_sel_Model_Parameter_control_dq_abc_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_Model_Parameter_control_dq_abc_1_1 <= decode_sel_Model_Parameter_control_dq_abc_1_1 AND wr_enb;

  data_in_Model_Parameter_control_dq_abc <= data_write_unsigned(0);

  reg_Model_Parameter_control_dq_abc_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Model_Parameter_control_dq_abc_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_Model_Parameter_control_dq_abc_1_1 = '1' THEN
        data_reg_Model_Parameter_control_dq_abc_1_1 <= data_in_Model_Parameter_control_dq_abc;
      END IF;
    END IF;
  END PROCESS reg_Model_Parameter_control_dq_abc_1_1_process;


  write_concats_Model_Parameter_control_dq_abc_1 <= data_reg_Model_Parameter_control_dq_abc_1_1;

  write_Model_Parameter_control_dq_abc <= write_concats_Model_Parameter_control_dq_abc_1;

  
  decode_sel_Physical_Parameter_1_J_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_1_J_1_1 <= decode_sel_Physical_Parameter_1_J_1_1 AND wr_enb;

  reg_Physical_Parameter_1_J_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_1_J_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_1_J_1_1 = '1' THEN
        data_reg_Physical_Parameter_1_J_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_1_J_1_1_process;


  write_Physical_Parameter_1_J <= std_logic_vector(data_reg_Physical_Parameter_1_J_1_1);

  
  decode_sel_Physical_Parameter_mu_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_mu_1_1 <= decode_sel_Physical_Parameter_mu_1_1 AND wr_enb;

  reg_Physical_Parameter_mu_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_mu_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_mu_1_1 = '1' THEN
        data_reg_Physical_Parameter_mu_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_mu_1_1_process;


  write_Physical_Parameter_mu <= std_logic_vector(data_reg_Physical_Parameter_mu_1_1);

  
  decode_sel_Physical_Parameter_M_R0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_M_R0_1_1 <= decode_sel_Physical_Parameter_M_R0_1_1 AND wr_enb;

  reg_Physical_Parameter_M_R0_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_M_R0_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_M_R0_1_1 = '1' THEN
        data_reg_Physical_Parameter_M_R0_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_M_R0_1_1_process;


  write_Physical_Parameter_M_R0 <= std_logic_vector(data_reg_Physical_Parameter_M_R0_1_1);

  
  decode_sel_Physical_Parameter_1_L_d_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_1_L_d_1_1 <= decode_sel_Physical_Parameter_1_L_d_1_1 AND wr_enb;

  reg_Physical_Parameter_1_L_d_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_1_L_d_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_1_L_d_1_1 = '1' THEN
        data_reg_Physical_Parameter_1_L_d_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_1_L_d_1_1_process;


  write_Physical_Parameter_1_L_d <= std_logic_vector(data_reg_Physical_Parameter_1_L_d_1_1);

  
  decode_sel_Physical_Parameter_1_L_q_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_1_L_q_1_1 <= decode_sel_Physical_Parameter_1_L_q_1_1 AND wr_enb;

  reg_Physical_Parameter_1_L_q_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_1_L_q_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_1_L_q_1_1 = '1' THEN
        data_reg_Physical_Parameter_1_L_q_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_1_L_q_1_1_process;


  write_Physical_Parameter_1_L_q <= std_logic_vector(data_reg_Physical_Parameter_1_L_q_1_1);

  
  decode_sel_Physical_Parameter_R_1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_R_1_1_1 <= decode_sel_Physical_Parameter_R_1_1_1 AND wr_enb;

  reg_Physical_Parameter_R_1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_R_1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_R_1_1_1 = '1' THEN
        data_reg_Physical_Parameter_R_1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_R_1_1_1_process;


  write_Physical_Parameter_R_1 <= std_logic_vector(data_reg_Physical_Parameter_R_1_1_1);

  
  decode_sel_Physical_Parameter_polepair_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_polepair_1_1 <= decode_sel_Physical_Parameter_polepair_1_1 AND wr_enb;

  reg_Physical_Parameter_polepair_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_polepair_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_polepair_1_1 = '1' THEN
        data_reg_Physical_Parameter_polepair_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_polepair_1_1_process;


  write_Physical_Parameter_polepair <= std_logic_vector(data_reg_Physical_Parameter_polepair_1_1);

  
  decode_sel_Physical_Parameter_psi_pm_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_psi_pm_1_1 <= decode_sel_Physical_Parameter_psi_pm_1_1 AND wr_enb;

  reg_Physical_Parameter_psi_pm_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_psi_pm_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_psi_pm_1_1 = '1' THEN
        data_reg_Physical_Parameter_psi_pm_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_psi_pm_1_1_process;


  write_Physical_Parameter_psi_pm <= std_logic_vector(data_reg_Physical_Parameter_psi_pm_1_1);

  
  decode_sel_Physical_Parameter_L_o1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_o1_1_1 <= decode_sel_Physical_Parameter_L_o1_1_1 AND wr_enb;

  reg_Physical_Parameter_L_o1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_o1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_o1_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_o1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_o1_1_1_process;


  write_Physical_Parameter_L_o1 <= std_logic_vector(data_reg_Physical_Parameter_L_o1_1_1);

  
  decode_sel_Physical_Parameter_L_o2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_o2_1_1 <= decode_sel_Physical_Parameter_L_o2_1_1 AND wr_enb;

  reg_Physical_Parameter_L_o2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_o2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_o2_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_o2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_o2_1_1_process;


  write_Physical_Parameter_L_o2 <= std_logic_vector(data_reg_Physical_Parameter_L_o2_1_1);

  
  decode_sel_Physical_Parameter_L_x1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_x1_1_1 <= decode_sel_Physical_Parameter_L_x1_1_1 AND wr_enb;

  reg_Physical_Parameter_L_x1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_x1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_x1_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_x1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_x1_1_1_process;


  write_Physical_Parameter_L_x1 <= std_logic_vector(data_reg_Physical_Parameter_L_x1_1_1);

  
  decode_sel_Physical_Parameter_L_y1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_y1_1_1 <= decode_sel_Physical_Parameter_L_y1_1_1 AND wr_enb;

  reg_Physical_Parameter_L_y1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_y1_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_y1_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_y1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_y1_1_1_process;


  write_Physical_Parameter_L_y1 <= std_logic_vector(data_reg_Physical_Parameter_L_y1_1_1);

  
  decode_sel_Physical_Parameter_L_x2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_x2_1_1 <= decode_sel_Physical_Parameter_L_x2_1_1 AND wr_enb;

  reg_Physical_Parameter_L_x2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_x2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_x2_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_x2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_x2_1_1_process;


  write_Physical_Parameter_L_x2 <= std_logic_vector(data_reg_Physical_Parameter_L_x2_1_1);

  
  decode_sel_Physical_Parameter_L_y2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_y2_1_1 <= decode_sel_Physical_Parameter_L_y2_1_1 AND wr_enb;

  reg_Physical_Parameter_L_y2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_y2_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_y2_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_y2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_y2_1_1_process;


  write_Physical_Parameter_L_y2 <= std_logic_vector(data_reg_Physical_Parameter_L_y2_1_1);

  
  decode_sel_Physical_Parameter_L_zero_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  reg_enb_Physical_Parameter_L_zero_1_1 <= decode_sel_Physical_Parameter_L_zero_1_1 AND wr_enb;

  reg_Physical_Parameter_L_zero_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Physical_Parameter_L_zero_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Physical_Parameter_L_zero_1_1 = '1' THEN
        data_reg_Physical_Parameter_L_zero_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Physical_Parameter_L_zero_1_1_process;


  write_Physical_Parameter_L_zero <= std_logic_vector(data_reg_Physical_Parameter_L_zero_1_1);

END rtl;

