// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="BGD_BGD,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvc900-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.561000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=0,HLS_SYN_FF=46239,HLS_SYN_LUT=43567,HLS_VERSION=2020_1}" *)

module BGD (
        ap_clk,
        ap_rst_n,
        m_axi_axi_read_AWVALID,
        m_axi_axi_read_AWREADY,
        m_axi_axi_read_AWADDR,
        m_axi_axi_read_AWID,
        m_axi_axi_read_AWLEN,
        m_axi_axi_read_AWSIZE,
        m_axi_axi_read_AWBURST,
        m_axi_axi_read_AWLOCK,
        m_axi_axi_read_AWCACHE,
        m_axi_axi_read_AWPROT,
        m_axi_axi_read_AWQOS,
        m_axi_axi_read_AWREGION,
        m_axi_axi_read_AWUSER,
        m_axi_axi_read_WVALID,
        m_axi_axi_read_WREADY,
        m_axi_axi_read_WDATA,
        m_axi_axi_read_WSTRB,
        m_axi_axi_read_WLAST,
        m_axi_axi_read_WID,
        m_axi_axi_read_WUSER,
        m_axi_axi_read_ARVALID,
        m_axi_axi_read_ARREADY,
        m_axi_axi_read_ARADDR,
        m_axi_axi_read_ARID,
        m_axi_axi_read_ARLEN,
        m_axi_axi_read_ARSIZE,
        m_axi_axi_read_ARBURST,
        m_axi_axi_read_ARLOCK,
        m_axi_axi_read_ARCACHE,
        m_axi_axi_read_ARPROT,
        m_axi_axi_read_ARQOS,
        m_axi_axi_read_ARREGION,
        m_axi_axi_read_ARUSER,
        m_axi_axi_read_RVALID,
        m_axi_axi_read_RREADY,
        m_axi_axi_read_RDATA,
        m_axi_axi_read_RLAST,
        m_axi_axi_read_RID,
        m_axi_axi_read_RUSER,
        m_axi_axi_read_RRESP,
        m_axi_axi_read_BVALID,
        m_axi_axi_read_BREADY,
        m_axi_axi_read_BRESP,
        m_axi_axi_read_BID,
        m_axi_axi_read_BUSER,
        m_axi_axi_write_AWVALID,
        m_axi_axi_write_AWREADY,
        m_axi_axi_write_AWADDR,
        m_axi_axi_write_AWID,
        m_axi_axi_write_AWLEN,
        m_axi_axi_write_AWSIZE,
        m_axi_axi_write_AWBURST,
        m_axi_axi_write_AWLOCK,
        m_axi_axi_write_AWCACHE,
        m_axi_axi_write_AWPROT,
        m_axi_axi_write_AWQOS,
        m_axi_axi_write_AWREGION,
        m_axi_axi_write_AWUSER,
        m_axi_axi_write_WVALID,
        m_axi_axi_write_WREADY,
        m_axi_axi_write_WDATA,
        m_axi_axi_write_WSTRB,
        m_axi_axi_write_WLAST,
        m_axi_axi_write_WID,
        m_axi_axi_write_WUSER,
        m_axi_axi_write_ARVALID,
        m_axi_axi_write_ARREADY,
        m_axi_axi_write_ARADDR,
        m_axi_axi_write_ARID,
        m_axi_axi_write_ARLEN,
        m_axi_axi_write_ARSIZE,
        m_axi_axi_write_ARBURST,
        m_axi_axi_write_ARLOCK,
        m_axi_axi_write_ARCACHE,
        m_axi_axi_write_ARPROT,
        m_axi_axi_write_ARQOS,
        m_axi_axi_write_ARREGION,
        m_axi_axi_write_ARUSER,
        m_axi_axi_write_RVALID,
        m_axi_axi_write_RREADY,
        m_axi_axi_write_RDATA,
        m_axi_axi_write_RLAST,
        m_axi_axi_write_RID,
        m_axi_axi_write_RUSER,
        m_axi_axi_write_RRESP,
        m_axi_axi_write_BVALID,
        m_axi_axi_write_BREADY,
        m_axi_axi_write_BRESP,
        m_axi_axi_write_BID,
        m_axi_axi_write_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 77'd1;
parameter    ap_ST_fsm_state2 = 77'd2;
parameter    ap_ST_fsm_state3 = 77'd4;
parameter    ap_ST_fsm_state4 = 77'd8;
parameter    ap_ST_fsm_state5 = 77'd16;
parameter    ap_ST_fsm_state6 = 77'd32;
parameter    ap_ST_fsm_state7 = 77'd64;
parameter    ap_ST_fsm_state8 = 77'd128;
parameter    ap_ST_fsm_state9 = 77'd256;
parameter    ap_ST_fsm_pp0_stage0 = 77'd512;
parameter    ap_ST_fsm_state13 = 77'd1024;
parameter    ap_ST_fsm_state14 = 77'd2048;
parameter    ap_ST_fsm_state15 = 77'd4096;
parameter    ap_ST_fsm_state16 = 77'd8192;
parameter    ap_ST_fsm_state17 = 77'd16384;
parameter    ap_ST_fsm_state18 = 77'd32768;
parameter    ap_ST_fsm_state19 = 77'd65536;
parameter    ap_ST_fsm_state20 = 77'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 77'd262144;
parameter    ap_ST_fsm_state24 = 77'd524288;
parameter    ap_ST_fsm_state25 = 77'd1048576;
parameter    ap_ST_fsm_state26 = 77'd2097152;
parameter    ap_ST_fsm_state27 = 77'd4194304;
parameter    ap_ST_fsm_state28 = 77'd8388608;
parameter    ap_ST_fsm_state29 = 77'd16777216;
parameter    ap_ST_fsm_state30 = 77'd33554432;
parameter    ap_ST_fsm_state31 = 77'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 77'd134217728;
parameter    ap_ST_fsm_state35 = 77'd268435456;
parameter    ap_ST_fsm_state36 = 77'd536870912;
parameter    ap_ST_fsm_state37 = 77'd1073741824;
parameter    ap_ST_fsm_state38 = 77'd2147483648;
parameter    ap_ST_fsm_state39 = 77'd4294967296;
parameter    ap_ST_fsm_state40 = 77'd8589934592;
parameter    ap_ST_fsm_state41 = 77'd17179869184;
parameter    ap_ST_fsm_state42 = 77'd34359738368;
parameter    ap_ST_fsm_state43 = 77'd68719476736;
parameter    ap_ST_fsm_pp3_stage0 = 77'd137438953472;
parameter    ap_ST_fsm_state47 = 77'd274877906944;
parameter    ap_ST_fsm_state48 = 77'd549755813888;
parameter    ap_ST_fsm_state49 = 77'd1099511627776;
parameter    ap_ST_fsm_state50 = 77'd2199023255552;
parameter    ap_ST_fsm_state51 = 77'd4398046511104;
parameter    ap_ST_fsm_state52 = 77'd8796093022208;
parameter    ap_ST_fsm_state53 = 77'd17592186044416;
parameter    ap_ST_fsm_state54 = 77'd35184372088832;
parameter    ap_ST_fsm_state55 = 77'd70368744177664;
parameter    ap_ST_fsm_state56 = 77'd140737488355328;
parameter    ap_ST_fsm_state57 = 77'd281474976710656;
parameter    ap_ST_fsm_state58 = 77'd562949953421312;
parameter    ap_ST_fsm_state59 = 77'd1125899906842624;
parameter    ap_ST_fsm_state60 = 77'd2251799813685248;
parameter    ap_ST_fsm_state61 = 77'd4503599627370496;
parameter    ap_ST_fsm_state62 = 77'd9007199254740992;
parameter    ap_ST_fsm_state63 = 77'd18014398509481984;
parameter    ap_ST_fsm_state64 = 77'd36028797018963968;
parameter    ap_ST_fsm_state65 = 77'd72057594037927936;
parameter    ap_ST_fsm_state66 = 77'd144115188075855872;
parameter    ap_ST_fsm_state67 = 77'd288230376151711744;
parameter    ap_ST_fsm_state68 = 77'd576460752303423488;
parameter    ap_ST_fsm_state69 = 77'd1152921504606846976;
parameter    ap_ST_fsm_state70 = 77'd2305843009213693952;
parameter    ap_ST_fsm_state71 = 77'd4611686018427387904;
parameter    ap_ST_fsm_state72 = 77'd9223372036854775808;
parameter    ap_ST_fsm_pp4_stage0 = 77'd18446744073709551616;
parameter    ap_ST_fsm_state76 = 77'd36893488147419103232;
parameter    ap_ST_fsm_state77 = 77'd73786976294838206464;
parameter    ap_ST_fsm_state78 = 77'd147573952589676412928;
parameter    ap_ST_fsm_state79 = 77'd295147905179352825856;
parameter    ap_ST_fsm_state80 = 77'd590295810358705651712;
parameter    ap_ST_fsm_state81 = 77'd1180591620717411303424;
parameter    ap_ST_fsm_pp5_stage0 = 77'd2361183241434822606848;
parameter    ap_ST_fsm_state85 = 77'd4722366482869645213696;
parameter    ap_ST_fsm_state86 = 77'd9444732965739290427392;
parameter    ap_ST_fsm_state87 = 77'd18889465931478580854784;
parameter    ap_ST_fsm_state88 = 77'd37778931862957161709568;
parameter    ap_ST_fsm_state89 = 77'd75557863725914323419136;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_READ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_READ_USER_VALUE = 0;
parameter    C_M_AXI_AXI_READ_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_READ_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_WRITE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_WRITE_USER_VALUE = 0;
parameter    C_M_AXI_AXI_WRITE_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_WRITE_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_READ_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_WRITE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_axi_read_AWVALID;
input   m_axi_axi_read_AWREADY;
output  [C_M_AXI_AXI_READ_ADDR_WIDTH - 1:0] m_axi_axi_read_AWADDR;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_AWID;
output  [7:0] m_axi_axi_read_AWLEN;
output  [2:0] m_axi_axi_read_AWSIZE;
output  [1:0] m_axi_axi_read_AWBURST;
output  [1:0] m_axi_axi_read_AWLOCK;
output  [3:0] m_axi_axi_read_AWCACHE;
output  [2:0] m_axi_axi_read_AWPROT;
output  [3:0] m_axi_axi_read_AWQOS;
output  [3:0] m_axi_axi_read_AWREGION;
output  [C_M_AXI_AXI_READ_AWUSER_WIDTH - 1:0] m_axi_axi_read_AWUSER;
output   m_axi_axi_read_WVALID;
input   m_axi_axi_read_WREADY;
output  [C_M_AXI_AXI_READ_DATA_WIDTH - 1:0] m_axi_axi_read_WDATA;
output  [C_M_AXI_AXI_READ_WSTRB_WIDTH - 1:0] m_axi_axi_read_WSTRB;
output   m_axi_axi_read_WLAST;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_WID;
output  [C_M_AXI_AXI_READ_WUSER_WIDTH - 1:0] m_axi_axi_read_WUSER;
output   m_axi_axi_read_ARVALID;
input   m_axi_axi_read_ARREADY;
output  [C_M_AXI_AXI_READ_ADDR_WIDTH - 1:0] m_axi_axi_read_ARADDR;
output  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_ARID;
output  [7:0] m_axi_axi_read_ARLEN;
output  [2:0] m_axi_axi_read_ARSIZE;
output  [1:0] m_axi_axi_read_ARBURST;
output  [1:0] m_axi_axi_read_ARLOCK;
output  [3:0] m_axi_axi_read_ARCACHE;
output  [2:0] m_axi_axi_read_ARPROT;
output  [3:0] m_axi_axi_read_ARQOS;
output  [3:0] m_axi_axi_read_ARREGION;
output  [C_M_AXI_AXI_READ_ARUSER_WIDTH - 1:0] m_axi_axi_read_ARUSER;
input   m_axi_axi_read_RVALID;
output   m_axi_axi_read_RREADY;
input  [C_M_AXI_AXI_READ_DATA_WIDTH - 1:0] m_axi_axi_read_RDATA;
input   m_axi_axi_read_RLAST;
input  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_RID;
input  [C_M_AXI_AXI_READ_RUSER_WIDTH - 1:0] m_axi_axi_read_RUSER;
input  [1:0] m_axi_axi_read_RRESP;
input   m_axi_axi_read_BVALID;
output   m_axi_axi_read_BREADY;
input  [1:0] m_axi_axi_read_BRESP;
input  [C_M_AXI_AXI_READ_ID_WIDTH - 1:0] m_axi_axi_read_BID;
input  [C_M_AXI_AXI_READ_BUSER_WIDTH - 1:0] m_axi_axi_read_BUSER;
output   m_axi_axi_write_AWVALID;
input   m_axi_axi_write_AWREADY;
output  [C_M_AXI_AXI_WRITE_ADDR_WIDTH - 1:0] m_axi_axi_write_AWADDR;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_AWID;
output  [7:0] m_axi_axi_write_AWLEN;
output  [2:0] m_axi_axi_write_AWSIZE;
output  [1:0] m_axi_axi_write_AWBURST;
output  [1:0] m_axi_axi_write_AWLOCK;
output  [3:0] m_axi_axi_write_AWCACHE;
output  [2:0] m_axi_axi_write_AWPROT;
output  [3:0] m_axi_axi_write_AWQOS;
output  [3:0] m_axi_axi_write_AWREGION;
output  [C_M_AXI_AXI_WRITE_AWUSER_WIDTH - 1:0] m_axi_axi_write_AWUSER;
output   m_axi_axi_write_WVALID;
input   m_axi_axi_write_WREADY;
output  [C_M_AXI_AXI_WRITE_DATA_WIDTH - 1:0] m_axi_axi_write_WDATA;
output  [C_M_AXI_AXI_WRITE_WSTRB_WIDTH - 1:0] m_axi_axi_write_WSTRB;
output   m_axi_axi_write_WLAST;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_WID;
output  [C_M_AXI_AXI_WRITE_WUSER_WIDTH - 1:0] m_axi_axi_write_WUSER;
output   m_axi_axi_write_ARVALID;
input   m_axi_axi_write_ARREADY;
output  [C_M_AXI_AXI_WRITE_ADDR_WIDTH - 1:0] m_axi_axi_write_ARADDR;
output  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_ARID;
output  [7:0] m_axi_axi_write_ARLEN;
output  [2:0] m_axi_axi_write_ARSIZE;
output  [1:0] m_axi_axi_write_ARBURST;
output  [1:0] m_axi_axi_write_ARLOCK;
output  [3:0] m_axi_axi_write_ARCACHE;
output  [2:0] m_axi_axi_write_ARPROT;
output  [3:0] m_axi_axi_write_ARQOS;
output  [3:0] m_axi_axi_write_ARREGION;
output  [C_M_AXI_AXI_WRITE_ARUSER_WIDTH - 1:0] m_axi_axi_write_ARUSER;
input   m_axi_axi_write_RVALID;
output   m_axi_axi_write_RREADY;
input  [C_M_AXI_AXI_WRITE_DATA_WIDTH - 1:0] m_axi_axi_write_RDATA;
input   m_axi_axi_write_RLAST;
input  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_RID;
input  [C_M_AXI_AXI_WRITE_RUSER_WIDTH - 1:0] m_axi_axi_write_RUSER;
input  [1:0] m_axi_axi_write_RRESP;
input   m_axi_axi_write_BVALID;
output   m_axi_axi_write_BREADY;
input  [1:0] m_axi_axi_write_BRESP;
input  [C_M_AXI_AXI_WRITE_ID_WIDTH - 1:0] m_axi_axi_write_BID;
input  [C_M_AXI_AXI_WRITE_BUSER_WIDTH - 1:0] m_axi_axi_write_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] axiMlpResultsInput;
wire   [63:0] axiClassesInput;
wire   [63:0] axiWeightInput;
wire   [63:0] axiBiasInput;
wire   [63:0] axiWeightOutput;
wire   [63:0] axiBiasOutput;
wire   [31:0] numberInputs;
wire   [31:0] numberOutputs;
wire   [31:0] numberLayers;
wire  signed [31:0] numberNeurons;
wire   [31:0] loadParameters;
wire  signed [31:0] batchSize;
wire   [31:0] learningRate;
reg   [13:0] bramWeight_address0;
reg    bramWeight_ce0;
reg    bramWeight_we0;
reg   [31:0] bramWeight_d0;
wire   [31:0] bramWeight_q0;
reg   [13:0] bramWeight_address1;
reg    bramWeight_ce1;
reg    bramWeight_we1;
wire   [31:0] bramWeight_q1;
reg   [6:0] bramBias_address0;
reg    bramBias_ce0;
reg    bramBias_we0;
reg   [31:0] bramBias_d0;
wire   [31:0] bramBias_q0;
reg    bramBias_ce1;
reg    bramBias_we1;
wire   [31:0] bramBias_q1;
reg   [13:0] bramWeightGradientAvg_address0;
reg    bramWeightGradientAvg_ce0;
reg    bramWeightGradientAvg_we0;
reg   [31:0] bramWeightGradientAvg_d0;
wire   [31:0] bramWeightGradientAvg_q0;
reg   [13:0] bramWeightGradientAvg_address1;
reg    bramWeightGradientAvg_ce1;
reg    bramWeightGradientAvg_we1;
reg   [31:0] bramWeightGradientAvg_d1;
wire   [31:0] bramWeightGradientAvg_q1;
reg   [6:0] bramBiasGradientAvg_address0;
reg    bramBiasGradientAvg_ce0;
reg    bramBiasGradientAvg_we0;
reg   [31:0] bramBiasGradientAvg_d0;
wire   [31:0] bramBiasGradientAvg_q0;
reg    bramBiasGradientAvg_ce1;
wire   [31:0] bramBiasGradientAvg_q1;
reg    axi_read_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    axi_read_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond549_reg_1267;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond527_reg_1334;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond516_reg_1407;
wire    ap_CS_fsm_state37;
reg   [0:0] icmp_ln68_reg_1371;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond538_reg_1297;
wire    ap_CS_fsm_state14;
reg    axi_write_blk_n_AW;
wire    ap_CS_fsm_state72;
reg   [0:0] icmp_ln152_reg_1623;
reg    axi_write_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond492_reg_1633;
reg   [0:0] exitcond492_reg_1633_pp4_iter1_reg;
reg    axi_write_blk_n_B;
wire    ap_CS_fsm_state80;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp5_stage0;
reg   [0:0] exitcond1_reg_1662;
reg   [0:0] exitcond1_reg_1662_pp5_iter1_reg;
wire    ap_CS_fsm_state89;
reg   [0:0] icmp_ln157_reg_1652;
wire    ap_CS_fsm_state81;
wire    axi_read_AWREADY;
wire    axi_read_WREADY;
reg    axi_read_ARVALID;
wire    axi_read_ARREADY;
reg   [31:0] axi_read_ARADDR;
reg   [31:0] axi_read_ARLEN;
wire    axi_read_RVALID;
reg    axi_read_RREADY;
wire   [31:0] axi_read_RDATA;
wire    axi_read_RLAST;
wire   [0:0] axi_read_RID;
wire   [0:0] axi_read_RUSER;
wire   [1:0] axi_read_RRESP;
wire    axi_read_BVALID;
wire   [1:0] axi_read_BRESP;
wire   [0:0] axi_read_BID;
wire   [0:0] axi_read_BUSER;
reg    axi_write_AWVALID;
wire    axi_write_AWREADY;
reg   [31:0] axi_write_AWADDR;
reg   [31:0] axi_write_AWLEN;
reg    axi_write_WVALID;
wire    axi_write_WREADY;
reg   [31:0] axi_write_WDATA;
wire    axi_write_ARREADY;
wire    axi_write_RVALID;
wire   [31:0] axi_write_RDATA;
wire    axi_write_RLAST;
wire   [0:0] axi_write_RID;
wire   [0:0] axi_write_RUSER;
wire   [1:0] axi_write_RRESP;
wire    axi_write_BVALID;
reg    axi_write_BREADY;
wire   [1:0] axi_write_BRESP;
wire   [0:0] axi_write_BID;
wire   [0:0] axi_write_BUSER;
reg   [31:0] loop_index45_reg_390;
reg   [31:0] loop_index45_reg_390_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] loop_index39_reg_402;
reg   [31:0] loop_index39_reg_402_pp1_iter1_reg;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] loop_index33_reg_414;
reg   [31:0] loop_index33_reg_414_pp2_iter1_reg;
wire    ap_block_state32_pp2_stage0_iter0;
reg    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state34_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [31:0] loop_index27_reg_426;
reg   [31:0] loop_index27_reg_426_pp3_iter1_reg;
wire    ap_block_state44_pp3_stage0_iter0;
reg    ap_block_state45_pp3_stage0_iter1;
wire    ap_block_state46_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] loop_index21_reg_468;
reg   [31:0] loop_index_reg_479;
reg   [63:0] axiBiasOutput_read_reg_1161;
reg   [63:0] axiWeightOutput_read_reg_1166;
reg   [63:0] axiBiasInput_read_reg_1171;
reg   [63:0] axiWeightInput_read_reg_1176;
reg   [63:0] axiClassesInput_read_reg_1181;
reg   [63:0] axiMlpResultsInput_read_reg_1186;
wire   [0:0] icmp_ln50_fu_562_p2;
reg  signed [31:0] numberOutputs_read_reg_1195;
reg   [31:0] numberInputs_read_reg_1209;
reg   [31:0] numberNeurons_read_reg_1220;
reg  signed [31:0] numberLayers_read_reg_1238;
wire   [31:0] mul_ln55_fu_574_p2;
reg   [31:0] mul_ln55_reg_1246;
wire   [31:0] valuesToLoad_fu_589_p2;
reg   [31:0] valuesToLoad_reg_1251;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln58_fu_594_p2;
reg   [31:0] axi_read_addr_reg_1261;
wire   [0:0] exitcond549_fu_619_p2;
reg   [0:0] exitcond549_reg_1267_pp0_iter1_reg;
wire   [31:0] empty_223_fu_624_p2;
reg   [31:0] empty_223_reg_1271;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] axi_read_addr_read_reg_1276;
wire   [31:0] valuesToLoad_2_fu_643_p2;
reg   [31:0] valuesToLoad_2_reg_1281;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln63_fu_648_p2;
reg   [31:0] axi_read_addr_1_reg_1291;
wire   [0:0] exitcond538_fu_673_p2;
reg   [0:0] exitcond538_reg_1297_pp1_iter1_reg;
wire   [31:0] empty_225_fu_678_p2;
reg   [31:0] empty_225_reg_1301;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] axi_read_addr_1_read_reg_1306;
reg  signed [31:0] batchSize_read_reg_1311;
wire    ap_CS_fsm_state24;
wire   [31:0] mul_ln67_fu_693_p2;
reg   [31:0] mul_ln67_reg_1318;
wire   [0:0] icmp_ln67_fu_698_p2;
reg   [31:0] axi_read_addr_2_reg_1328;
wire   [0:0] exitcond527_fu_723_p2;
reg   [0:0] exitcond527_reg_1334_pp2_iter1_reg;
wire   [31:0] empty_228_fu_728_p2;
reg   [31:0] empty_228_reg_1338;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] axi_read_addr_2_read_reg_1343;
wire   [31:0] valuesToStore_2_fu_743_p2;
reg   [31:0] valuesToStore_2_reg_1348;
wire    ap_CS_fsm_state35;
wire   [31:0] add_ln71_fu_747_p2;
reg   [31:0] add_ln71_reg_1354;
wire   [14:0] trunc_ln71_4_fu_752_p1;
reg   [14:0] trunc_ln71_4_reg_1359;
wire   [31:0] mul_ln71_1_fu_760_p2;
reg   [31:0] mul_ln71_1_reg_1365;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln68_fu_765_p2;
wire   [14:0] trunc_ln71_fu_771_p1;
reg   [14:0] trunc_ln71_reg_1375;
reg    ap_block_state37_io;
wire  signed [13:0] trunc_ln71_1_fu_774_p1;
reg  signed [13:0] trunc_ln71_1_reg_1382;
wire  signed [14:0] trunc_ln71_2_fu_777_p1;
reg  signed [14:0] trunc_ln71_2_reg_1387;
wire  signed [13:0] trunc_ln71_3_fu_780_p1;
reg  signed [13:0] trunc_ln71_3_reg_1393;
wire   [0:0] exitcond516_fu_803_p2;
reg   [0:0] exitcond516_reg_1407_pp3_iter1_reg;
wire   [31:0] empty_230_fu_808_p2;
reg   [31:0] empty_230_reg_1411;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] axi_read_addr_3_read_reg_1416;
wire  signed [31:0] layer_fu_823_p2;
reg  signed [31:0] layer_reg_1421;
wire    ap_CS_fsm_state47;
wire   [31:0] mul34_fu_828_p2;
reg   [31:0] mul34_reg_1426;
wire   [31:0] add35_fu_833_p2;
reg   [31:0] add35_reg_1431;
wire   [14:0] empty_242_fu_842_p1;
reg   [14:0] empty_242_reg_1441;
wire   [0:0] icmp_fu_855_p2;
reg   [0:0] icmp_reg_1446;
wire  signed [13:0] grp_fu_1115_p2;
reg   [13:0] mul41_reg_1452;
wire    ap_CS_fsm_state50;
wire   [6:0] empty_243_fu_861_p1;
reg   [6:0] empty_243_reg_1457;
wire   [31:0] l_n_fu_864_p3;
reg   [31:0] l_n_reg_1462;
wire  signed [13:0] grp_fu_1120_p2;
reg  signed [13:0] valuesToStore_reg_1467;
wire   [63:0] zext_ln75_fu_869_p1;
reg   [63:0] zext_ln75_reg_1472;
wire  signed [8:0] trunc_ln75_fu_872_p1;
reg  signed [8:0] trunc_ln75_reg_1478;
wire    ap_CS_fsm_state51;
wire   [31:0] i_9_fu_885_p2;
reg   [31:0] i_9_reg_1491;
wire   [0:0] icmp_ln75_fu_880_p2;
wire   [0:0] initZero_fu_900_p2;
reg   [0:0] initZero_reg_1501;
wire   [31:0] valuesToStore_1_fu_915_p2;
reg   [31:0] valuesToStore_1_reg_1507;
wire  signed [14:0] grp_fu_1124_p2;
reg  signed [14:0] mul_ln78_reg_1514;
wire    ap_CS_fsm_state54;
wire   [8:0] mul_ln79_fu_924_p2;
reg   [8:0] mul_ln79_reg_1522;
(* use_dsp48 = "no" *) wire   [14:0] add_ln85_fu_930_p2;
reg   [14:0] add_ln85_reg_1527;
(* use_dsp48 = "no" *) wire   [14:0] add_ln87_fu_935_p2;
reg   [14:0] add_ln87_reg_1532;
wire  signed [14:0] trunc_ln98_1_fu_944_p1;
wire    ap_CS_fsm_state58;
wire   [31:0] p_n_fu_959_p3;
reg   [31:0] p_n_reg_1545;
wire   [0:0] icmp_ln98_fu_948_p2;
wire   [63:0] add_ln98_fu_966_p2;
reg   [63:0] add_ln98_reg_1550;
wire   [31:0] select_ln121_fu_972_p3;
reg   [31:0] select_ln121_reg_1555;
(* use_dsp48 = "no" *) wire   [14:0] add_ln128_fu_978_p2;
reg   [14:0] add_ln128_reg_1560;
wire    ap_CS_fsm_state61;
(* use_dsp48 = "no" *) wire   [14:0] add_ln108_fu_991_p2;
reg   [14:0] add_ln108_reg_1570;
(* use_dsp48 = "no" *) wire   [14:0] add_ln109_2_fu_999_p2;
reg   [14:0] add_ln109_2_reg_1580;
wire   [6:0] trunc_ln102_fu_1003_p1;
reg   [6:0] trunc_ln102_reg_1585;
wire  signed [13:0] grp_fu_1149_p2;
reg  signed [13:0] mul_ln106_1_reg_1590;
wire    ap_CS_fsm_state64;
wire  signed [13:0] grp_fu_1155_p2;
reg  signed [13:0] mul_ln110_reg_1595;
wire   [31:0] bitcast_ln141_fu_1006_p1;
reg   [31:0] bitcast_ln141_reg_1600;
wire    ap_CS_fsm_state71;
wire   [31:0] grp_fu_558_p1;
reg   [31:0] conv_reg_1605;
wire   [31:0] mul_ln143_fu_1015_p2;
reg   [31:0] mul_ln143_reg_1610;
wire   [31:0] valuesToStore_3_fu_1021_p2;
reg   [31:0] valuesToStore_3_reg_1615;
wire   [0:0] icmp_ln152_fu_1026_p2;
reg    ap_block_state72_io;
wire    grp_updateParameter_float_16u_s_fu_514_ap_ready;
wire    grp_updateParameter_float_16u_s_fu_514_ap_done;
wire    ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready;
wire    ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done;
reg    ap_block_state72_on_subcall_done;
wire   [0:0] exitcond492_fu_1051_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state73_pp4_stage0_iter0;
wire    ap_block_state74_pp4_stage0_iter1;
wire    ap_block_state75_pp4_stage0_iter2;
reg    ap_block_state75_io;
reg    ap_block_pp4_stage0_11001;
wire   [31:0] empty_234_fu_1056_p2;
reg    ap_enable_reg_pp4_iter0;
reg   [31:0] bramWeight_load_reg_1647;
reg    ap_enable_reg_pp4_iter1;
wire   [0:0] icmp_ln157_fu_1071_p2;
reg    ap_block_state80;
reg   [31:0] axi_write_addr_1_reg_1656;
wire   [0:0] exitcond1_fu_1095_p2;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state82_pp5_stage0_iter0;
wire    ap_block_state83_pp5_stage0_iter1;
wire    ap_block_state84_pp5_stage0_iter2;
reg    ap_block_state84_io;
reg    ap_block_pp5_stage0_11001;
wire   [31:0] empty_236_fu_1100_p2;
reg    ap_enable_reg_pp5_iter0;
reg   [31:0] bramBias_load_reg_1676;
reg    ap_enable_reg_pp5_iter1;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state31;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state43;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state44;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state73;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state82;
reg   [8:0] bramClasses_address0;
reg    bramClasses_ce0;
reg    bramClasses_we0;
wire   [31:0] bramClasses_d0;
wire   [31:0] bramClasses_q0;
reg   [14:0] bramMlpResults_address0;
reg    bramMlpResults_ce0;
reg    bramMlpResults_we0;
wire   [31:0] bramMlpResults_d0;
wire   [31:0] bramMlpResults_q0;
reg   [14:0] bramMlpResults_address1;
reg    bramMlpResults_ce1;
wire   [31:0] bramMlpResults_q1;
reg   [3:0] bramError0_address0;
reg    bramError0_ce0;
reg    bramError0_we0;
reg   [31:0] bramError0_d0;
wire   [31:0] bramError0_q0;
reg    bramError0_ce1;
wire   [31:0] bramError0_q1;
reg   [3:0] bramError1_address0;
reg    bramError1_ce0;
reg    bramError1_we0;
wire   [31:0] bramError1_q0;
reg   [3:0] bramError1_address1;
reg    bramError1_ce1;
reg    bramError1_we1;
wire   [31:0] bramError1_q1;
reg   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n;
reg   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev;
wire   [13:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we0;
wire   [13:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we1;
reg   [13:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset;
wire   [3:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we0;
wire   [3:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we1;
wire   [14:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we0;
wire   [14:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we1;
reg   [14:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset;
reg   [14:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset;
wire   [13:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0;
wire   [13:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1;
reg   [13:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset;
wire   [6:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0;
wire   [6:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce1;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we1;
reg   [6:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset;
wire   [3:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0;
wire   [3:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce1;
wire   [31:0] grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we1;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_initZero;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready;
wire    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_idle;
reg    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue;
wire   [13:0] grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d0;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we0;
wire   [13:0] grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d1;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we1;
wire   [6:0] grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0;
wire    grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d0;
wire    grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we0;
wire   [6:0] grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address1;
wire    grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d1;
wire    grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we1;
wire   [13:0] grp_updateParameter_float_16u_s_fu_514_bramWeight_address0;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramWeight_d0;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeight_we0;
wire   [13:0] grp_updateParameter_float_16u_s_fu_514_bramWeight_address1;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramWeight_d1;
wire    grp_updateParameter_float_16u_s_fu_514_bramWeight_we1;
wire   [6:0] grp_updateParameter_float_16u_s_fu_514_bramBias_address0;
wire    grp_updateParameter_float_16u_s_fu_514_bramBias_ce0;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramBias_d0;
wire    grp_updateParameter_float_16u_s_fu_514_bramBias_we0;
wire   [6:0] grp_updateParameter_float_16u_s_fu_514_bramBias_address1;
wire    grp_updateParameter_float_16u_s_fu_514_bramBias_ce1;
wire   [31:0] grp_updateParameter_float_16u_s_fu_514_bramBias_d1;
wire    grp_updateParameter_float_16u_s_fu_514_bramBias_we1;
wire    grp_updateParameter_float_16u_s_fu_514_ap_start;
wire    grp_updateParameter_float_16u_s_fu_514_ap_idle;
reg    grp_updateParameter_float_16u_s_fu_514_ap_continue;
wire   [14:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we0;
wire   [14:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we1;
wire   [8:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we0;
wire   [8:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce1;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we1;
wire   [13:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0;
wire   [13:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1;
wire   [6:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0;
wire   [6:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce1;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we1;
wire   [3:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0;
wire   [3:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce1;
wire   [31:0] grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we1;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_p_initZero;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready;
wire    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_idle;
reg    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue;
wire    grp_copyArray_float_16u_s_fu_550_ap_start;
wire    grp_copyArray_float_16u_s_fu_550_ap_done;
wire    grp_copyArray_float_16u_s_fu_550_ap_idle;
wire    grp_copyArray_float_16u_s_fu_550_ap_ready;
wire   [3:0] grp_copyArray_float_16u_s_fu_550_p_input_address0;
wire    grp_copyArray_float_16u_s_fu_550_p_input_ce0;
wire   [3:0] grp_copyArray_float_16u_s_fu_550_p_input_address1;
wire    grp_copyArray_float_16u_s_fu_550_p_input_ce1;
wire   [3:0] grp_copyArray_float_16u_s_fu_550_p_output_address0;
wire    grp_copyArray_float_16u_s_fu_550_p_output_ce0;
wire    grp_copyArray_float_16u_s_fu_550_p_output_we0;
wire   [31:0] grp_copyArray_float_16u_s_fu_550_p_output_d0;
wire   [3:0] grp_copyArray_float_16u_s_fu_550_p_output_address1;
wire    grp_copyArray_float_16u_s_fu_550_p_output_ce1;
wire    grp_copyArray_float_16u_s_fu_550_p_output_we1;
wire   [31:0] grp_copyArray_float_16u_s_fu_550_p_output_d1;
reg   [31:0] grp_copyArray_float_16u_s_fu_550_size;
reg   [31:0] ap_phi_mux_loop_index45_phi_fu_394_p4;
reg   [31:0] ap_phi_mux_loop_index39_phi_fu_406_p4;
reg   [31:0] ap_phi_mux_loop_index33_phi_fu_418_p4;
reg   [31:0] ap_phi_mux_loop_index27_phi_fu_430_p4;
reg   [31:0] empty_232_reg_438;
wire    ap_CS_fsm_state68;
wire    ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready;
wire    ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done;
reg    ap_block_state68_on_subcall_done;
reg   [31:0] i_reg_448;
reg   [63:0] layer_1_reg_459;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state67;
reg    grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg;
reg    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready;
reg    ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done;
wire    ap_CS_fsm_state65;
reg    ap_block_state65_on_subcall_done;
reg    grp_updateParameter_float_16u_s_fu_514_ap_start_reg;
reg    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready;
reg    ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done;
reg    grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg;
wire    ap_CS_fsm_state55;
wire    ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready;
wire    ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done;
reg    ap_block_state55_on_subcall_done;
reg    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready;
reg    ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done;
reg    grp_copyArray_float_16u_s_fu_550_ap_start_reg;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state66;
wire   [63:0] loop_index45_cast_fu_630_p1;
wire   [63:0] loop_index39_cast_fu_684_p1;
wire   [63:0] loop_index33_cast_fu_734_p1;
wire   [63:0] loop_index27_cast_fu_814_p1;
wire   [63:0] loop_index21_cast_fu_1062_p1;
wire   [63:0] loop_index_cast_fu_1106_p1;
wire  signed [63:0] p_cast1_cast_fu_609_p1;
wire  signed [63:0] p_cast3_cast_fu_663_p1;
wire  signed [63:0] p_cast_cast_fu_713_p1;
wire  signed [63:0] p_cast2_cast_fu_792_p1;
wire  signed [63:0] p_cast9_cast_fu_1040_p1;
wire  signed [63:0] p_cast10_cast_fu_1085_p1;
wire   [31:0] empty_235_fu_1067_p1;
wire    ap_block_pp4_stage0_01001;
reg    ap_block_state89;
wire   [31:0] empty_237_fu_1111_p1;
wire    ap_block_pp5_stage0_01001;
wire   [31:0] empty_224_fu_635_p1;
wire   [31:0] empty_226_fu_689_p1;
wire  signed [31:0] add_ln55_fu_568_p0;
wire  signed [31:0] mul_ln55_fu_574_p1;
wire   [31:0] add_ln56_1_fu_580_p2;
wire  signed [31:0] valuesToLoad_fu_589_p1;
wire   [61:0] p_cast1_fu_600_p4;
wire   [31:0] valuesToLoad_1_fu_639_p2;
wire   [61:0] p_cast3_fu_654_p4;
wire   [61:0] p_cast_fu_704_p4;
wire  signed [31:0] mul_ln71_1_fu_760_p1;
wire   [61:0] p_cast2_fu_783_p4;
wire  signed [31:0] mul34_fu_828_p1;
wire   [30:0] tmp_fu_846_p4;
wire   [14:0] trunc_ln75_2_fu_891_p1;
wire   [31:0] add_ln150_1_fu_906_p2;
wire  signed [31:0] valuesToStore_1_fu_915_p1;
wire  signed [8:0] mul_ln79_fu_924_p0;
wire   [31:0] trunc_ln98_fu_940_p1;
wire   [0:0] icmp_ln100_fu_954_p2;
wire  signed [14:0] grp_fu_1132_p2;
(* use_dsp48 = "no" *) wire   [14:0] add_ln106_fu_983_p2;
wire  signed [14:0] grp_fu_1139_p4;
wire  signed [31:0] mul_ln143_fu_1015_p1;
wire   [61:0] p_cast9_fu_1031_p4;
wire   [61:0] p_cast4_fu_1076_p4;
wire  signed [13:0] grp_fu_1115_p0;
wire  signed [14:0] grp_fu_1124_p0;
wire  signed [14:0] grp_fu_1124_p1;
wire  signed [0:0] grp_fu_1139_p0;
wire    ap_CS_fsm_state60;
wire  signed [13:0] grp_fu_1149_p0;
wire  signed [13:0] grp_fu_1155_p0;
reg   [76:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;

// power-on initialization
initial begin
#0 ap_CS_fsm = 77'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready = 1'b0;
#0 ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done = 1'b0;
#0 grp_updateParameter_float_16u_s_fu_514_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready = 1'b0;
#0 ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done = 1'b0;
#0 grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready = 1'b0;
#0 ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done = 1'b0;
#0 grp_copyArray_float_16u_s_fu_550_ap_start_reg = 1'b0;
end

BGD_bramWeight #(
    .DataWidth( 32 ),
    .AddressRange( 13568 ),
    .AddressWidth( 14 ))
bramWeight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeight_address0),
    .ce0(bramWeight_ce0),
    .we0(bramWeight_we0),
    .d0(bramWeight_d0),
    .q0(bramWeight_q0),
    .address1(bramWeight_address1),
    .ce1(bramWeight_ce1),
    .we1(bramWeight_we1),
    .d1(grp_updateParameter_float_16u_s_fu_514_bramWeight_d1),
    .q1(bramWeight_q1)
);

BGD_bramBias #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
bramBias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramBias_address0),
    .ce0(bramBias_ce0),
    .we0(bramBias_we0),
    .d0(bramBias_d0),
    .q0(bramBias_q0),
    .address1(grp_updateParameter_float_16u_s_fu_514_bramBias_address1),
    .ce1(bramBias_ce1),
    .we1(bramBias_we1),
    .d1(grp_updateParameter_float_16u_s_fu_514_bramBias_d1),
    .q1(bramBias_q1)
);

BGD_bramWeight #(
    .DataWidth( 32 ),
    .AddressRange( 13568 ),
    .AddressWidth( 14 ))
bramWeightGradientAvg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramWeightGradientAvg_address0),
    .ce0(bramWeightGradientAvg_ce0),
    .we0(bramWeightGradientAvg_we0),
    .d0(bramWeightGradientAvg_d0),
    .q0(bramWeightGradientAvg_q0),
    .address1(bramWeightGradientAvg_address1),
    .ce1(bramWeightGradientAvg_ce1),
    .we1(bramWeightGradientAvg_we1),
    .d1(bramWeightGradientAvg_d1),
    .q1(bramWeightGradientAvg_q1)
);

BGD_bramBiasGradientAvg #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
bramBiasGradientAvg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramBiasGradientAvg_address0),
    .ce0(bramBiasGradientAvg_ce0),
    .we0(bramBiasGradientAvg_we0),
    .d0(bramBiasGradientAvg_d0),
    .q0(bramBiasGradientAvg_q0),
    .address1(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address1),
    .ce1(bramBiasGradientAvg_ce1),
    .q1(bramBiasGradientAvg_q1)
);

BGD_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axiMlpResultsInput(axiMlpResultsInput),
    .axiClassesInput(axiClassesInput),
    .axiWeightInput(axiWeightInput),
    .axiBiasInput(axiBiasInput),
    .axiWeightOutput(axiWeightOutput),
    .axiBiasOutput(axiBiasOutput),
    .numberInputs(numberInputs),
    .numberOutputs(numberOutputs),
    .numberLayers(numberLayers),
    .numberNeurons(numberNeurons),
    .loadParameters(loadParameters),
    .batchSize(batchSize),
    .learningRate(learningRate),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

BGD_axi_read_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 128 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_READ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_READ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_READ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_READ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_READ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_READ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_READ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_READ_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_READ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_READ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_READ_CACHE_VALUE ))
axi_read_m_axi_U(
    .AWVALID(m_axi_axi_read_AWVALID),
    .AWREADY(m_axi_axi_read_AWREADY),
    .AWADDR(m_axi_axi_read_AWADDR),
    .AWID(m_axi_axi_read_AWID),
    .AWLEN(m_axi_axi_read_AWLEN),
    .AWSIZE(m_axi_axi_read_AWSIZE),
    .AWBURST(m_axi_axi_read_AWBURST),
    .AWLOCK(m_axi_axi_read_AWLOCK),
    .AWCACHE(m_axi_axi_read_AWCACHE),
    .AWPROT(m_axi_axi_read_AWPROT),
    .AWQOS(m_axi_axi_read_AWQOS),
    .AWREGION(m_axi_axi_read_AWREGION),
    .AWUSER(m_axi_axi_read_AWUSER),
    .WVALID(m_axi_axi_read_WVALID),
    .WREADY(m_axi_axi_read_WREADY),
    .WDATA(m_axi_axi_read_WDATA),
    .WSTRB(m_axi_axi_read_WSTRB),
    .WLAST(m_axi_axi_read_WLAST),
    .WID(m_axi_axi_read_WID),
    .WUSER(m_axi_axi_read_WUSER),
    .ARVALID(m_axi_axi_read_ARVALID),
    .ARREADY(m_axi_axi_read_ARREADY),
    .ARADDR(m_axi_axi_read_ARADDR),
    .ARID(m_axi_axi_read_ARID),
    .ARLEN(m_axi_axi_read_ARLEN),
    .ARSIZE(m_axi_axi_read_ARSIZE),
    .ARBURST(m_axi_axi_read_ARBURST),
    .ARLOCK(m_axi_axi_read_ARLOCK),
    .ARCACHE(m_axi_axi_read_ARCACHE),
    .ARPROT(m_axi_axi_read_ARPROT),
    .ARQOS(m_axi_axi_read_ARQOS),
    .ARREGION(m_axi_axi_read_ARREGION),
    .ARUSER(m_axi_axi_read_ARUSER),
    .RVALID(m_axi_axi_read_RVALID),
    .RREADY(m_axi_axi_read_RREADY),
    .RDATA(m_axi_axi_read_RDATA),
    .RLAST(m_axi_axi_read_RLAST),
    .RID(m_axi_axi_read_RID),
    .RUSER(m_axi_axi_read_RUSER),
    .RRESP(m_axi_axi_read_RRESP),
    .BVALID(m_axi_axi_read_BVALID),
    .BREADY(m_axi_axi_read_BREADY),
    .BRESP(m_axi_axi_read_BRESP),
    .BID(m_axi_axi_read_BID),
    .BUSER(m_axi_axi_read_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(axi_read_ARVALID),
    .I_ARREADY(axi_read_ARREADY),
    .I_ARADDR(axi_read_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(axi_read_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(axi_read_RVALID),
    .I_RREADY(axi_read_RREADY),
    .I_RDATA(axi_read_RDATA),
    .I_RID(axi_read_RID),
    .I_RUSER(axi_read_RUSER),
    .I_RRESP(axi_read_RRESP),
    .I_RLAST(axi_read_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(axi_read_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(axi_read_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(axi_read_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(axi_read_BRESP),
    .I_BID(axi_read_BID),
    .I_BUSER(axi_read_BUSER)
);

BGD_axi_write_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 128 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_WRITE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_WRITE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_WRITE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_WRITE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_WRITE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_WRITE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_WRITE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_WRITE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_WRITE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_WRITE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_WRITE_CACHE_VALUE ))
axi_write_m_axi_U(
    .AWVALID(m_axi_axi_write_AWVALID),
    .AWREADY(m_axi_axi_write_AWREADY),
    .AWADDR(m_axi_axi_write_AWADDR),
    .AWID(m_axi_axi_write_AWID),
    .AWLEN(m_axi_axi_write_AWLEN),
    .AWSIZE(m_axi_axi_write_AWSIZE),
    .AWBURST(m_axi_axi_write_AWBURST),
    .AWLOCK(m_axi_axi_write_AWLOCK),
    .AWCACHE(m_axi_axi_write_AWCACHE),
    .AWPROT(m_axi_axi_write_AWPROT),
    .AWQOS(m_axi_axi_write_AWQOS),
    .AWREGION(m_axi_axi_write_AWREGION),
    .AWUSER(m_axi_axi_write_AWUSER),
    .WVALID(m_axi_axi_write_WVALID),
    .WREADY(m_axi_axi_write_WREADY),
    .WDATA(m_axi_axi_write_WDATA),
    .WSTRB(m_axi_axi_write_WSTRB),
    .WLAST(m_axi_axi_write_WLAST),
    .WID(m_axi_axi_write_WID),
    .WUSER(m_axi_axi_write_WUSER),
    .ARVALID(m_axi_axi_write_ARVALID),
    .ARREADY(m_axi_axi_write_ARREADY),
    .ARADDR(m_axi_axi_write_ARADDR),
    .ARID(m_axi_axi_write_ARID),
    .ARLEN(m_axi_axi_write_ARLEN),
    .ARSIZE(m_axi_axi_write_ARSIZE),
    .ARBURST(m_axi_axi_write_ARBURST),
    .ARLOCK(m_axi_axi_write_ARLOCK),
    .ARCACHE(m_axi_axi_write_ARCACHE),
    .ARPROT(m_axi_axi_write_ARPROT),
    .ARQOS(m_axi_axi_write_ARQOS),
    .ARREGION(m_axi_axi_write_ARREGION),
    .ARUSER(m_axi_axi_write_ARUSER),
    .RVALID(m_axi_axi_write_RVALID),
    .RREADY(m_axi_axi_write_RREADY),
    .RDATA(m_axi_axi_write_RDATA),
    .RLAST(m_axi_axi_write_RLAST),
    .RID(m_axi_axi_write_RID),
    .RUSER(m_axi_axi_write_RUSER),
    .RRESP(m_axi_axi_write_RRESP),
    .BVALID(m_axi_axi_write_BVALID),
    .BREADY(m_axi_axi_write_BREADY),
    .BRESP(m_axi_axi_write_BRESP),
    .BID(m_axi_axi_write_BID),
    .BUSER(m_axi_axi_write_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(axi_write_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(axi_write_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(axi_write_RDATA),
    .I_RID(axi_write_RID),
    .I_RUSER(axi_write_RUSER),
    .I_RRESP(axi_write_RRESP),
    .I_RLAST(axi_write_RLAST),
    .I_AWVALID(axi_write_AWVALID),
    .I_AWREADY(axi_write_AWREADY),
    .I_AWADDR(axi_write_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(axi_write_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(axi_write_WVALID),
    .I_WREADY(axi_write_WREADY),
    .I_WDATA(axi_write_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(axi_write_BVALID),
    .I_BREADY(axi_write_BREADY),
    .I_BRESP(axi_write_BRESP),
    .I_BID(axi_write_BID),
    .I_BUSER(axi_write_BUSER)
);

BGD_bramClasses #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
bramClasses_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramClasses_address0),
    .ce0(bramClasses_ce0),
    .we0(bramClasses_we0),
    .d0(bramClasses_d0),
    .q0(bramClasses_q0)
);

BGD_bramMlpResults #(
    .DataWidth( 32 ),
    .AddressRange( 17280 ),
    .AddressWidth( 15 ))
bramMlpResults_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramMlpResults_address0),
    .ce0(bramMlpResults_ce0),
    .we0(bramMlpResults_we0),
    .d0(bramMlpResults_d0),
    .q0(bramMlpResults_q0),
    .address1(bramMlpResults_address1),
    .ce1(bramMlpResults_ce1),
    .q1(bramMlpResults_q1)
);

BGD_bramError0 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bramError0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramError0_address0),
    .ce0(bramError0_ce0),
    .we0(bramError0_we0),
    .d0(bramError0_d0),
    .q0(bramError0_q0),
    .address1(grp_copyArray_float_16u_s_fu_550_p_input_address1),
    .ce1(bramError0_ce1),
    .q1(bramError0_q1)
);

BGD_bramError1 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bramError1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bramError1_address0),
    .ce0(bramError1_ce0),
    .we0(bramError1_we0),
    .d0(grp_copyArray_float_16u_s_fu_550_p_output_d0),
    .q0(bramError1_q0),
    .address1(bramError1_address1),
    .ce1(bramError1_ce1),
    .we1(bramError1_we1),
    .d1(grp_copyArray_float_16u_s_fu_550_p_output_d1),
    .q1(bramError1_q1)
);

BGD_computeHiddenGradient_float_16u_4u_16u_s grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490(
    .p_n(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n),
    .p_k(numberNeurons_read_reg_1220),
    .p_numberOutputsPrev(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev),
    .p_weights_address0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0),
    .p_weights_ce0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0),
    .p_weights_d0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d0),
    .p_weights_q0(bramWeight_q0),
    .p_weights_we0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we0),
    .p_weights_address1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1),
    .p_weights_ce1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1),
    .p_weights_d1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_d1),
    .p_weights_q1(bramWeight_q1),
    .p_weights_we1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_we1),
    .p_weights_offset(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset),
    .p_latterError_address0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0),
    .p_latterError_ce0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0),
    .p_latterError_d0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d0),
    .p_latterError_q0(bramError1_q0),
    .p_latterError_we0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we0),
    .p_latterError_address1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1),
    .p_latterError_ce1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1),
    .p_latterError_d1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_d1),
    .p_latterError_q1(bramError1_q1),
    .p_latterError_we1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_we1),
    .p_outputCurrentLayer_address0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0),
    .p_outputCurrentLayer_ce0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0),
    .p_outputCurrentLayer_d0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d0),
    .p_outputCurrentLayer_q0(bramMlpResults_q0),
    .p_outputCurrentLayer_we0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we0),
    .p_outputCurrentLayer_address1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1),
    .p_outputCurrentLayer_ce1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1),
    .p_outputCurrentLayer_d1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_d1),
    .p_outputCurrentLayer_q1(bramMlpResults_q1),
    .p_outputCurrentLayer_we1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_we1),
    .p_outputCurrentLayer_offset(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset),
    .p_outputPrevLayer_offset(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset),
    .p_weightGradientAvg_address0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0),
    .p_weightGradientAvg_ce0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0),
    .p_weightGradientAvg_d0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0),
    .p_weightGradientAvg_q0(bramWeightGradientAvg_q0),
    .p_weightGradientAvg_we0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0),
    .p_weightGradientAvg_address1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1),
    .p_weightGradientAvg_ce1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1),
    .p_weightGradientAvg_d1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1),
    .p_weightGradientAvg_q1(bramWeightGradientAvg_q1),
    .p_weightGradientAvg_we1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1),
    .p_weightGradientAvg_offset(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset),
    .p_biasGradientAvg_address0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0),
    .p_biasGradientAvg_ce0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0),
    .p_biasGradientAvg_d0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0),
    .p_biasGradientAvg_q0(bramBiasGradientAvg_q0),
    .p_biasGradientAvg_we0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0),
    .p_biasGradientAvg_address1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address1),
    .p_biasGradientAvg_ce1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce1),
    .p_biasGradientAvg_d1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d1),
    .p_biasGradientAvg_q1(32'd0),
    .p_biasGradientAvg_we1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we1),
    .p_biasGradientAvg_offset(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset),
    .p_error_address0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0),
    .p_error_ce0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0),
    .p_error_d0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0),
    .p_error_q0(32'd0),
    .p_error_we0(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0),
    .p_error_address1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address1),
    .p_error_ce1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce1),
    .p_error_d1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d1),
    .p_error_q1(32'd0),
    .p_error_we1(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we1),
    .p_initZero(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_initZero),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .p_numberOutputsPrev_ap_vld(1'b1),
    .p_weights_offset_ap_vld(1'b1),
    .p_outputCurrentLayer_offset_ap_vld(1'b1),
    .p_outputPrevLayer_offset_ap_vld(1'b1),
    .p_weightGradientAvg_offset_ap_vld(1'b1),
    .p_biasGradientAvg_offset_ap_vld(1'b1),
    .p_initZero_ap_vld(1'b1),
    .ap_start(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start),
    .ap_done(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done),
    .ap_ready(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready),
    .ap_idle(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_idle),
    .ap_continue(grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue)
);

BGD_updateParameter_float_16u_s grp_updateParameter_float_16u_s_fu_514(
    .p_learningRate(bitcast_ln141_reg_1600),
    .p_batchSize(conv_reg_1605),
    .p_weightSize(mul_ln143_reg_1610),
    .p_biasSize(valuesToStore_3_reg_1615),
    .bramWeightGradientAvg_address0(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0),
    .bramWeightGradientAvg_ce0(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0),
    .bramWeightGradientAvg_d0(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d0),
    .bramWeightGradientAvg_q0(bramWeightGradientAvg_q0),
    .bramWeightGradientAvg_we0(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we0),
    .bramWeightGradientAvg_address1(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1),
    .bramWeightGradientAvg_ce1(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1),
    .bramWeightGradientAvg_d1(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_d1),
    .bramWeightGradientAvg_q1(bramWeightGradientAvg_q1),
    .bramWeightGradientAvg_we1(grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_we1),
    .bramBiasGradientAvg_address0(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0),
    .bramBiasGradientAvg_ce0(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0),
    .bramBiasGradientAvg_d0(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d0),
    .bramBiasGradientAvg_q0(bramBiasGradientAvg_q0),
    .bramBiasGradientAvg_we0(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we0),
    .bramBiasGradientAvg_address1(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address1),
    .bramBiasGradientAvg_ce1(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1),
    .bramBiasGradientAvg_d1(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_d1),
    .bramBiasGradientAvg_q1(bramBiasGradientAvg_q1),
    .bramBiasGradientAvg_we1(grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_we1),
    .bramWeight_address0(grp_updateParameter_float_16u_s_fu_514_bramWeight_address0),
    .bramWeight_ce0(grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0),
    .bramWeight_d0(grp_updateParameter_float_16u_s_fu_514_bramWeight_d0),
    .bramWeight_q0(bramWeight_q0),
    .bramWeight_we0(grp_updateParameter_float_16u_s_fu_514_bramWeight_we0),
    .bramWeight_address1(grp_updateParameter_float_16u_s_fu_514_bramWeight_address1),
    .bramWeight_ce1(grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1),
    .bramWeight_d1(grp_updateParameter_float_16u_s_fu_514_bramWeight_d1),
    .bramWeight_q1(bramWeight_q1),
    .bramWeight_we1(grp_updateParameter_float_16u_s_fu_514_bramWeight_we1),
    .bramBias_address0(grp_updateParameter_float_16u_s_fu_514_bramBias_address0),
    .bramBias_ce0(grp_updateParameter_float_16u_s_fu_514_bramBias_ce0),
    .bramBias_d0(grp_updateParameter_float_16u_s_fu_514_bramBias_d0),
    .bramBias_q0(bramBias_q0),
    .bramBias_we0(grp_updateParameter_float_16u_s_fu_514_bramBias_we0),
    .bramBias_address1(grp_updateParameter_float_16u_s_fu_514_bramBias_address1),
    .bramBias_ce1(grp_updateParameter_float_16u_s_fu_514_bramBias_ce1),
    .bramBias_d1(grp_updateParameter_float_16u_s_fu_514_bramBias_d1),
    .bramBias_q1(bramBias_q1),
    .bramBias_we1(grp_updateParameter_float_16u_s_fu_514_bramBias_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_learningRate_ap_vld(1'b1),
    .p_batchSize_ap_vld(1'b1),
    .p_weightSize_ap_vld(1'b1),
    .p_biasSize_ap_vld(1'b1),
    .ap_start(grp_updateParameter_float_16u_s_fu_514_ap_start),
    .ap_done(grp_updateParameter_float_16u_s_fu_514_ap_done),
    .ap_ready(grp_updateParameter_float_16u_s_fu_514_ap_ready),
    .ap_idle(grp_updateParameter_float_16u_s_fu_514_ap_idle),
    .ap_continue(grp_updateParameter_float_16u_s_fu_514_ap_continue)
);

BGD_computeOutputGradient_float_16u_16u_s grp_computeOutputGradient_float_16u_16u_s_fu_530(
    .p_n(empty_232_reg_438),
    .p_k(numberNeurons_read_reg_1220),
    .p_results_address0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0),
    .p_results_ce0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0),
    .p_results_d0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d0),
    .p_results_q0(bramMlpResults_q0),
    .p_results_we0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we0),
    .p_results_address1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1),
    .p_results_ce1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1),
    .p_results_d1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_d1),
    .p_results_q1(bramMlpResults_q1),
    .p_results_we1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_we1),
    .p_results_offset(add_ln85_reg_1527),
    .p_classes_address0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0),
    .p_classes_ce0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0),
    .p_classes_d0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d0),
    .p_classes_q0(bramClasses_q0),
    .p_classes_we0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we0),
    .p_classes_address1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address1),
    .p_classes_ce1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce1),
    .p_classes_d1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_d1),
    .p_classes_q1(32'd0),
    .p_classes_we1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_we1),
    .p_classes_offset(mul_ln79_reg_1522),
    .p_outputPrevLayer_offset(add_ln87_reg_1532),
    .p_weightGradientAvg_address0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0),
    .p_weightGradientAvg_ce0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0),
    .p_weightGradientAvg_d0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0),
    .p_weightGradientAvg_q0(bramWeightGradientAvg_q0),
    .p_weightGradientAvg_we0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0),
    .p_weightGradientAvg_address1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1),
    .p_weightGradientAvg_ce1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1),
    .p_weightGradientAvg_d1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1),
    .p_weightGradientAvg_q1(bramWeightGradientAvg_q1),
    .p_weightGradientAvg_we1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1),
    .p_weightGradientAvg_offset(mul41_reg_1452),
    .p_biasGradientAvg_address0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0),
    .p_biasGradientAvg_ce0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0),
    .p_biasGradientAvg_d0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0),
    .p_biasGradientAvg_q0(bramBiasGradientAvg_q0),
    .p_biasGradientAvg_we0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0),
    .p_biasGradientAvg_address1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address1),
    .p_biasGradientAvg_ce1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce1),
    .p_biasGradientAvg_d1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d1),
    .p_biasGradientAvg_q1(32'd0),
    .p_biasGradientAvg_we1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we1),
    .p_biasGradientAvg_offset(empty_243_reg_1457),
    .p_error_address0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0),
    .p_error_ce0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0),
    .p_error_d0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0),
    .p_error_q0(32'd0),
    .p_error_we0(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0),
    .p_error_address1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address1),
    .p_error_ce1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce1),
    .p_error_d1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d1),
    .p_error_q1(32'd0),
    .p_error_we1(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we1),
    .p_initZero(grp_computeOutputGradient_float_16u_16u_s_fu_530_p_initZero),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_n_ap_vld(1'b1),
    .p_k_ap_vld(1'b1),
    .p_results_offset_ap_vld(1'b1),
    .p_classes_offset_ap_vld(1'b1),
    .p_outputPrevLayer_offset_ap_vld(1'b1),
    .p_weightGradientAvg_offset_ap_vld(1'b1),
    .p_biasGradientAvg_offset_ap_vld(1'b1),
    .p_initZero_ap_vld(1'b1),
    .ap_start(grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start),
    .ap_done(grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done),
    .ap_ready(grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready),
    .ap_idle(grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_idle),
    .ap_continue(grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue)
);

BGD_copyArray_float_16u_s grp_copyArray_float_16u_s_fu_550(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copyArray_float_16u_s_fu_550_ap_start),
    .ap_done(grp_copyArray_float_16u_s_fu_550_ap_done),
    .ap_idle(grp_copyArray_float_16u_s_fu_550_ap_idle),
    .ap_ready(grp_copyArray_float_16u_s_fu_550_ap_ready),
    .p_input_address0(grp_copyArray_float_16u_s_fu_550_p_input_address0),
    .p_input_ce0(grp_copyArray_float_16u_s_fu_550_p_input_ce0),
    .p_input_q0(bramError0_q0),
    .p_input_address1(grp_copyArray_float_16u_s_fu_550_p_input_address1),
    .p_input_ce1(grp_copyArray_float_16u_s_fu_550_p_input_ce1),
    .p_input_q1(bramError0_q1),
    .p_output_address0(grp_copyArray_float_16u_s_fu_550_p_output_address0),
    .p_output_ce0(grp_copyArray_float_16u_s_fu_550_p_output_ce0),
    .p_output_we0(grp_copyArray_float_16u_s_fu_550_p_output_we0),
    .p_output_d0(grp_copyArray_float_16u_s_fu_550_p_output_d0),
    .p_output_address1(grp_copyArray_float_16u_s_fu_550_p_output_address1),
    .p_output_ce1(grp_copyArray_float_16u_s_fu_550_p_output_ce1),
    .p_output_we1(grp_copyArray_float_16u_s_fu_550_p_output_we1),
    .p_output_d1(grp_copyArray_float_16u_s_fu_550_p_output_d1),
    .size(grp_copyArray_float_16u_s_fu_550_size)
);

BGD_uitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32s_32_4_no_dsp_1_U553(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(batchSize_read_reg_1311),
    .ce(1'b1),
    .dout(grp_fu_558_p1)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U554(
    .din0(numberNeurons),
    .din1(mul_ln55_fu_574_p1),
    .dout(mul_ln55_fu_574_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U555(
    .din0(numberNeurons_read_reg_1220),
    .din1(valuesToLoad_fu_589_p1),
    .dout(valuesToLoad_fu_589_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U556(
    .din0(numberLayers_read_reg_1238),
    .din1(numberNeurons_read_reg_1220),
    .dout(valuesToLoad_1_fu_639_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U557(
    .din0(batchSize),
    .din1(numberOutputs_read_reg_1195),
    .dout(mul_ln67_fu_693_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U558(
    .din0(numberNeurons_read_reg_1220),
    .din1(numberLayers_read_reg_1238),
    .dout(valuesToStore_2_fu_743_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U559(
    .din0(batchSize_read_reg_1311),
    .din1(mul_ln71_1_fu_760_p1),
    .dout(mul_ln71_1_fu_760_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U560(
    .din0(numberNeurons_read_reg_1220),
    .din1(mul34_fu_828_p1),
    .dout(mul34_fu_828_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U561(
    .din0(numberNeurons_read_reg_1220),
    .din1(valuesToStore_1_fu_915_p1),
    .dout(valuesToStore_1_fu_915_p2)
);

BGD_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U562(
    .din0(mul_ln79_fu_924_p0),
    .din1(trunc_ln75_reg_1478),
    .dout(mul_ln79_fu_924_p2)
);

BGD_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U563(
    .din0(numberNeurons_read_reg_1220),
    .din1(mul_ln143_fu_1015_p1),
    .dout(mul_ln143_fu_1015_p2)
);

BGD_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U564(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1115_p0),
    .din1(trunc_ln71_3_reg_1393),
    .ce(1'b1),
    .dout(grp_fu_1115_p2)
);

BGD_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U565(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln71_3_reg_1393),
    .din1(trunc_ln71_1_reg_1382),
    .ce(1'b1),
    .dout(grp_fu_1120_p2)
);

BGD_mul_mul_15s_15s_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
mul_mul_15s_15s_15_4_1_U566(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1124_p0),
    .din1(grp_fu_1124_p1),
    .ce(1'b1),
    .dout(grp_fu_1124_p2)
);

BGD_mul_mul_15s_15s_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
mul_mul_15s_15s_15_4_1_U567(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln98_1_fu_944_p1),
    .din1(trunc_ln71_2_reg_1387),
    .ce(1'b1),
    .dout(grp_fu_1132_p2)
);

BGD_ama_addmuladd_1s_15s_15s_15ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 15 ),
    .din3_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
ama_addmuladd_1s_15s_15s_15ns_15_4_1_U568(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1139_p0),
    .din1(trunc_ln98_1_fu_944_p1),
    .din2(trunc_ln71_2_reg_1387),
    .din3(trunc_ln71_reg_1375),
    .ce(1'b1),
    .dout(grp_fu_1139_p4)
);

BGD_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U569(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1149_p0),
    .din1(trunc_ln71_3_reg_1393),
    .ce(1'b1),
    .dout(grp_fu_1149_p2)
);

BGD_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U570(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1155_p0),
    .din1(trunc_ln71_3_reg_1393),
    .ce(1'b1),
    .dout(grp_fu_1155_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state21))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state32))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state32)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state44))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state44)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state44);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state73))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state73)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state73);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state82))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state82)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state82);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state65_on_subcall_done) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68)))) begin
            ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= 1'b0;
        end else if ((grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done == 1'b1)) begin
            ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state65_on_subcall_done) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68)))) begin
            ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= 1'b0;
        end else if ((grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state55_on_subcall_done) & (1'b1 == ap_CS_fsm_state55))) begin
            ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= 1'b0;
        end else if ((grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done == 1'b1)) begin
            ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state55_on_subcall_done) & (1'b1 == ap_CS_fsm_state55))) begin
            ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= 1'b0;
        end else if ((grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (1'b1 == ap_CS_fsm_state72))) begin
            ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done <= 1'b0;
        end else if ((grp_updateParameter_float_16u_s_fu_514_ap_done == 1'b1)) begin
            ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (1'b1 == ap_CS_fsm_state72))) begin
            ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready <= 1'b0;
        end else if ((grp_updateParameter_float_16u_s_fu_514_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state64) | ((icmp_ln98_fu_948_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58)) | ((1'b1 == ap_CS_fsm_state65) & (ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state68) & (ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready == 1'b0)))) begin
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg <= 1'b1;
        end else if ((grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready == 1'b1)) begin
            grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state54) | ((1'b1 == ap_CS_fsm_state55) & (ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready == 1'b0)))) begin
            grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg <= 1'b1;
        end else if ((grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready == 1'b1)) begin
            grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_copyArray_float_16u_s_fu_550_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state56))) begin
            grp_copyArray_float_16u_s_fu_550_ap_start_reg <= 1'b1;
        end else if ((grp_copyArray_float_16u_s_fu_550_ap_ready == 1'b1)) begin
            grp_copyArray_float_16u_s_fu_550_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updateParameter_float_16u_s_fu_514_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state71) | ((ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state72)))) begin
            grp_updateParameter_float_16u_s_fu_514_ap_start_reg <= 1'b1;
        end else if ((grp_updateParameter_float_16u_s_fu_514_ap_ready == 1'b1)) begin
            grp_updateParameter_float_16u_s_fu_514_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68))) begin
        empty_232_reg_438 <= select_ln121_reg_1555;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        empty_232_reg_438 <= numberOutputs_read_reg_1195;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68))) begin
        i_reg_448 <= i_9_reg_1491;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        i_reg_448 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_copyArray_float_16u_s_fu_550_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state67)) begin
            layer_1_reg_459 <= add_ln98_reg_1550;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            layer_1_reg_459 <= zext_ln75_reg_1472;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
        loop_index21_reg_468 <= 32'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond492_fu_1051_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        loop_index21_reg_468 <= empty_234_fu_1056_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        loop_index27_reg_426 <= 32'd0;
    end else if (((exitcond516_reg_1407 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        loop_index27_reg_426 <= empty_230_reg_1411;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        loop_index33_reg_414 <= 32'd0;
    end else if (((exitcond527_reg_1334 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_index33_reg_414 <= empty_228_reg_1338;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_index39_reg_402 <= 32'd0;
    end else if (((exitcond538_reg_1297 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index39_reg_402 <= empty_225_reg_1301;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_index45_reg_390 <= 32'd0;
    end else if (((exitcond549_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index45_reg_390 <= empty_223_reg_1271;
    end
end

always @ (posedge ap_clk) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        loop_index_reg_479 <= 32'd0;
    end else if (((exitcond1_fu_1095_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        loop_index_reg_479 <= empty_236_fu_1100_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        add35_reg_1431 <= add35_fu_833_p2;
        empty_242_reg_1441 <= empty_242_fu_842_p1;
        icmp_reg_1446 <= icmp_fu_855_p2;
        layer_reg_1421 <= layer_fu_823_p2;
        mul34_reg_1426 <= mul34_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        add_ln108_reg_1570 <= add_ln108_fu_991_p2;
        add_ln109_2_reg_1580 <= add_ln109_2_fu_999_p2;
        trunc_ln102_reg_1585 <= trunc_ln102_fu_1003_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_948_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        add_ln128_reg_1560 <= add_ln128_fu_978_p2;
        select_ln121_reg_1555 <= select_ln121_fu_972_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        add_ln71_reg_1354 <= add_ln71_fu_747_p2;
        trunc_ln71_4_reg_1359 <= trunc_ln71_4_fu_752_p1;
        valuesToStore_2_reg_1348 <= valuesToStore_2_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        add_ln85_reg_1527 <= add_ln85_fu_930_p2;
        add_ln87_reg_1532 <= add_ln87_fu_935_p2;
        mul_ln78_reg_1514 <= grp_fu_1124_p2;
        mul_ln79_reg_1522 <= mul_ln79_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_948_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        add_ln98_reg_1550 <= add_ln98_fu_966_p2;
        p_n_reg_1545 <= p_n_fu_959_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        axiBiasInput_read_reg_1171 <= axiBiasInput;
        axiBiasOutput_read_reg_1161 <= axiBiasOutput;
        axiClassesInput_read_reg_1181 <= axiClassesInput;
        axiMlpResultsInput_read_reg_1186 <= axiMlpResultsInput;
        axiWeightInput_read_reg_1176 <= axiWeightInput;
        axiWeightOutput_read_reg_1166 <= axiWeightOutput;
        numberInputs_read_reg_1209 <= numberInputs;
        numberLayers_read_reg_1238 <= numberLayers;
        numberNeurons_read_reg_1220 <= numberNeurons;
        numberOutputs_read_reg_1195 <= numberOutputs;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond538_reg_1297 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_read_addr_1_read_reg_1306 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        axi_read_addr_1_reg_1291 <= p_cast3_cast_fu_663_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond527_reg_1334 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_read_addr_2_read_reg_1343 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_698_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        axi_read_addr_2_reg_1328 <= p_cast_cast_fu_713_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond516_reg_1407 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        axi_read_addr_3_read_reg_1416 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond549_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_read_addr_read_reg_1276 <= axi_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_594_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_read_addr_reg_1261 <= p_cast1_cast_fu_609_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln152_reg_1623 == 1'd0)) & (icmp_ln157_fu_1071_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
        axi_write_addr_1_reg_1656 <= p_cast10_cast_fu_1085_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        batchSize_read_reg_1311 <= batchSize;
        mul_ln67_reg_1318 <= mul_ln67_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        bitcast_ln141_reg_1600 <= bitcast_ln141_fu_1006_p1;
        conv_reg_1605 <= grp_fu_558_p1;
        icmp_ln152_reg_1623 <= icmp_ln152_fu_1026_p2;
        mul_ln143_reg_1610 <= mul_ln143_fu_1015_p2;
        valuesToStore_3_reg_1615 <= valuesToStore_3_fu_1021_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1662 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        bramBias_load_reg_1676 <= bramBias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (exitcond492_reg_1633 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bramWeight_load_reg_1647 <= bramWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_223_reg_1271 <= empty_223_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_225_reg_1301 <= empty_225_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_228_reg_1338 <= empty_228_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        empty_230_reg_1411 <= empty_230_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        empty_243_reg_1457 <= empty_243_fu_861_p1;
        l_n_reg_1462 <= l_n_fu_864_p3;
        mul41_reg_1452 <= grp_fu_1115_p2;
        valuesToStore_reg_1467 <= grp_fu_1120_p2;
        zext_ln75_reg_1472[31 : 0] <= zext_ln75_fu_869_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        exitcond1_reg_1662 <= exitcond1_fu_1095_p2;
        exitcond1_reg_1662_pp5_iter1_reg <= exitcond1_reg_1662;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        exitcond492_reg_1633 <= exitcond492_fu_1051_p2;
        exitcond492_reg_1633_pp4_iter1_reg <= exitcond492_reg_1633;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond516_reg_1407 <= exitcond516_fu_803_p2;
        exitcond516_reg_1407_pp3_iter1_reg <= exitcond516_reg_1407;
        loop_index27_reg_426_pp3_iter1_reg <= loop_index27_reg_426;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond527_reg_1334 <= exitcond527_fu_723_p2;
        exitcond527_reg_1334_pp2_iter1_reg <= exitcond527_reg_1334;
        loop_index33_reg_414_pp2_iter1_reg <= loop_index33_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond538_reg_1297 <= exitcond538_fu_673_p2;
        exitcond538_reg_1297_pp1_iter1_reg <= exitcond538_reg_1297;
        loop_index39_reg_402_pp1_iter1_reg <= loop_index39_reg_402;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond549_reg_1267 <= exitcond549_fu_619_p2;
        exitcond549_reg_1267_pp0_iter1_reg <= exitcond549_reg_1267;
        loop_index45_reg_390_pp0_iter1_reg <= loop_index45_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_9_reg_1491 <= i_9_fu_885_p2;
        trunc_ln75_reg_1478 <= trunc_ln75_fu_872_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln152_reg_1623 == 1'd0)) & (1'b1 == ap_CS_fsm_state80))) begin
        icmp_ln157_reg_1652 <= icmp_ln157_fu_1071_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        icmp_ln68_reg_1371 <= icmp_ln68_fu_765_p2;
        mul_ln71_1_reg_1365 <= mul_ln71_1_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_880_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        initZero_reg_1501 <= initZero_fu_900_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        mul_ln106_1_reg_1590 <= grp_fu_1149_p2;
        mul_ln110_reg_1595 <= grp_fu_1155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln50_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln55_reg_1246 <= mul_ln55_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        trunc_ln71_1_reg_1382 <= trunc_ln71_1_fu_774_p1;
        trunc_ln71_2_reg_1387 <= trunc_ln71_2_fu_777_p1;
        trunc_ln71_3_reg_1393 <= trunc_ln71_3_fu_780_p1;
        trunc_ln71_reg_1375 <= trunc_ln71_fu_771_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        valuesToLoad_2_reg_1281 <= valuesToLoad_2_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valuesToLoad_reg_1251 <= valuesToLoad_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_880_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        valuesToStore_1_reg_1507 <= valuesToStore_1_fu_915_p2;
    end
end

always @ (*) begin
    if ((exitcond549_fu_619_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond538_fu_673_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond527_fu_723_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond516_fu_803_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state44 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state44 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond492_fu_1051_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_1095_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state82 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state82 = 1'b0;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln157_reg_1652 == 1'd0)) & (1'b1 == ap_CS_fsm_state89))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond516_reg_1407 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_loop_index27_phi_fu_430_p4 = empty_230_reg_1411;
    end else begin
        ap_phi_mux_loop_index27_phi_fu_430_p4 = loop_index27_reg_426;
    end
end

always @ (*) begin
    if (((exitcond527_reg_1334 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_loop_index33_phi_fu_418_p4 = empty_228_reg_1338;
    end else begin
        ap_phi_mux_loop_index33_phi_fu_418_p4 = loop_index33_reg_414;
    end
end

always @ (*) begin
    if (((exitcond538_reg_1297 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_loop_index39_phi_fu_406_p4 = empty_225_reg_1301;
    end else begin
        ap_phi_mux_loop_index39_phi_fu_406_p4 = loop_index39_reg_402;
    end
end

always @ (*) begin
    if (((exitcond549_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_loop_index45_phi_fu_394_p4 = empty_223_reg_1271;
    end else begin
        ap_phi_mux_loop_index45_phi_fu_394_p4 = loop_index45_reg_390;
    end
end

always @ (*) begin
    if ((~((axi_write_BVALID == 1'b0) & (icmp_ln157_reg_1652 == 1'd0)) & (1'b1 == ap_CS_fsm_state89))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_1371 == 1'd0) & (1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        axi_read_ARADDR = p_cast2_cast_fu_792_p1;
    end else if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        axi_read_ARADDR = axi_read_addr_2_reg_1328;
    end else if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        axi_read_ARADDR = axi_read_addr_1_reg_1291;
    end else if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        axi_read_ARADDR = axi_read_addr_reg_1261;
    end else begin
        axi_read_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_1371 == 1'd0) & (1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        axi_read_ARLEN = mul_ln71_1_reg_1365;
    end else if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        axi_read_ARLEN = mul_ln67_reg_1318;
    end else if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        axi_read_ARLEN = valuesToLoad_2_reg_1281;
    end else if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        axi_read_ARLEN = valuesToLoad_reg_1251;
    end else begin
        axi_read_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln68_reg_1371 == 1'd0) & (1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        axi_read_ARVALID = 1'b1;
    end else begin
        axi_read_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond538_reg_1297 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond516_reg_1407 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((exitcond527_reg_1334 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond549_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        axi_read_RREADY = 1'b1;
    end else begin
        axi_read_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln68_reg_1371 == 1'd0) & (1'b1 == ap_CS_fsm_state37)))) begin
        axi_read_blk_n_AR = m_axi_axi_read_ARREADY;
    end else begin
        axi_read_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond538_reg_1297 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond516_reg_1407 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((exitcond527_reg_1334 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond549_reg_1267 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        axi_read_blk_n_R = m_axi_axi_read_RVALID;
    end else begin
        axi_read_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        axi_write_AWADDR = axi_write_addr_1_reg_1656;
    end else if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
        axi_write_AWADDR = p_cast9_cast_fu_1040_p1;
    end else begin
        axi_write_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        axi_write_AWLEN = valuesToStore_3_reg_1615;
    end else if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
        axi_write_AWLEN = valuesToStore_1_reg_1507;
    end else begin
        axi_write_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72)) | ((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81)))) begin
        axi_write_AWVALID = 1'b1;
    end else begin
        axi_write_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((axi_write_BVALID == 1'b0) & (icmp_ln152_reg_1623 == 1'd0)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state80)) | (~((axi_write_BVALID == 1'b0) & (icmp_ln157_reg_1652 == 1'd0)) & (icmp_ln157_reg_1652 == 1'd0) & (1'b1 == ap_CS_fsm_state89)))) begin
        axi_write_BREADY = 1'b1;
    end else begin
        axi_write_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1662_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_01001))) begin
        axi_write_WDATA = empty_237_fu_1111_p1;
    end else if (((exitcond492_reg_1633_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001))) begin
        axi_write_WDATA = empty_235_fu_1067_p1;
    end else begin
        axi_write_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1662_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)) | ((exitcond492_reg_1633_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        axi_write_WVALID = 1'b1;
    end else begin
        axi_write_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | ((icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72)))) begin
        axi_write_blk_n_AW = m_axi_axi_write_AWREADY;
    end else begin
        axi_write_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln157_reg_1652 == 1'd0) & (1'b1 == ap_CS_fsm_state89)) | ((icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state80)))) begin
        axi_write_blk_n_B = m_axi_axi_write_BVALID;
    end else begin
        axi_write_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1662_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0)) | ((exitcond492_reg_1633_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0)))) begin
        axi_write_blk_n_W = m_axi_axi_write_WREADY;
    end else begin
        axi_write_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramBiasGradientAvg_address0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBiasGradientAvg_address0 = grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_address0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramBiasGradientAvg_address0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_address0;
    end else begin
        bramBiasGradientAvg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramBiasGradientAvg_ce0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBiasGradientAvg_ce0 = grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramBiasGradientAvg_ce0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_ce0;
    end else begin
        bramBiasGradientAvg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBiasGradientAvg_ce1 = grp_updateParameter_float_16u_s_fu_514_bramBiasGradientAvg_ce1;
    end else begin
        bramBiasGradientAvg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramBiasGradientAvg_d0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_d0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramBiasGradientAvg_d0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_d0;
    end else begin
        bramBiasGradientAvg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramBiasGradientAvg_we0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_biasGradientAvg_we0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramBiasGradientAvg_we0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_we0;
    end else begin
        bramBiasGradientAvg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        bramBias_address0 = loop_index_cast_fu_1106_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bramBias_address0 = loop_index39_cast_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBias_address0 = grp_updateParameter_float_16u_s_fu_514_bramBias_address0;
    end else begin
        bramBias_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
        bramBias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBias_ce0 = grp_updateParameter_float_16u_s_fu_514_bramBias_ce0;
    end else begin
        bramBias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBias_ce1 = grp_updateParameter_float_16u_s_fu_514_bramBias_ce1;
    end else begin
        bramBias_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bramBias_d0 = empty_226_fu_689_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBias_d0 = grp_updateParameter_float_16u_s_fu_514_bramBias_d0;
    end else begin
        bramBias_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond538_reg_1297_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bramBias_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBias_we0 = grp_updateParameter_float_16u_s_fu_514_bramBias_we0;
    end else begin
        bramBias_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        bramBias_we1 = grp_updateParameter_float_16u_s_fu_514_bramBias_we1;
    end else begin
        bramBias_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bramClasses_address0 = loop_index33_cast_fu_734_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        bramClasses_address0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_address0;
    end else begin
        bramClasses_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bramClasses_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        bramClasses_ce0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_classes_ce0;
    end else begin
        bramClasses_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond527_reg_1334_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bramClasses_we0 = 1'b1;
    end else begin
        bramClasses_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError0_address0 = grp_copyArray_float_16u_s_fu_550_p_input_address0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        bramError0_address0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_address0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError0_address0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_address0;
    end else begin
        bramError0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError0_ce0 = grp_copyArray_float_16u_s_fu_550_p_input_ce0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        bramError0_ce0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_ce0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError0_ce0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_ce0;
    end else begin
        bramError0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError0_ce1 = grp_copyArray_float_16u_s_fu_550_p_input_ce1;
    end else begin
        bramError0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramError0_d0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_d0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError0_d0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_d0;
    end else begin
        bramError0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramError0_we0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_error_we0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError0_we0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_error_we0;
    end else begin
        bramError0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError1_address0 = grp_copyArray_float_16u_s_fu_550_p_output_address0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError1_address0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address0;
    end else begin
        bramError1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError1_address1 = grp_copyArray_float_16u_s_fu_550_p_output_address1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError1_address1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_address1;
    end else begin
        bramError1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError1_ce0 = grp_copyArray_float_16u_s_fu_550_p_output_ce0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError1_ce0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce0;
    end else begin
        bramError1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError1_ce1 = grp_copyArray_float_16u_s_fu_550_p_output_ce1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramError1_ce1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_latterError_ce1;
    end else begin
        bramError1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError1_we0 = grp_copyArray_float_16u_s_fu_550_p_output_we0;
    end else begin
        bramError1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57))) begin
        bramError1_we1 = grp_copyArray_float_16u_s_fu_550_p_output_we1;
    end else begin
        bramError1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bramMlpResults_address0 = loop_index27_cast_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        bramMlpResults_address0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramMlpResults_address0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address0;
    end else begin
        bramMlpResults_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramMlpResults_address1 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_address1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramMlpResults_address1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_address1;
    end else begin
        bramMlpResults_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bramMlpResults_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        bramMlpResults_ce0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramMlpResults_ce0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce0;
    end else begin
        bramMlpResults_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramMlpResults_ce1 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_results_ce1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramMlpResults_ce1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_ce1;
    end else begin
        bramMlpResults_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond516_reg_1407_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        bramMlpResults_we0 = 1'b1;
    end else begin
        bramMlpResults_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_address0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeightGradientAvg_address0 = grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_address0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address0;
    end else begin
        bramWeightGradientAvg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_address1 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_address1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeightGradientAvg_address1 = grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_address1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_address1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_address1;
    end else begin
        bramWeightGradientAvg_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_ce0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeightGradientAvg_ce0 = grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_ce0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce0;
    end else begin
        bramWeightGradientAvg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_ce1 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_ce1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeightGradientAvg_ce1 = grp_updateParameter_float_16u_s_fu_514_bramWeightGradientAvg_ce1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_ce1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_ce1;
    end else begin
        bramWeightGradientAvg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_d0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_d0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d0;
    end else begin
        bramWeightGradientAvg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_d1 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_d1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_d1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_d1;
    end else begin
        bramWeightGradientAvg_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_we0 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_we0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we0;
    end else begin
        bramWeightGradientAvg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        bramWeightGradientAvg_we1 = grp_computeOutputGradient_float_16u_16u_s_fu_530_p_weightGradientAvg_we1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeightGradientAvg_we1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_we1;
    end else begin
        bramWeightGradientAvg_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        bramWeight_address0 = loop_index21_cast_fu_1062_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_address0 = loop_index45_cast_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_address0 = grp_updateParameter_float_16u_s_fu_514_bramWeight_address0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeight_address0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address0;
    end else begin
        bramWeight_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_address1 = grp_updateParameter_float_16u_s_fu_514_bramWeight_address1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeight_address1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_address1;
    end else begin
        bramWeight_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        bramWeight_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_ce0 = grp_updateParameter_float_16u_s_fu_514_bramWeight_ce0;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeight_ce0 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce0;
    end else begin
        bramWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_ce1 = grp_updateParameter_float_16u_s_fu_514_bramWeight_ce1;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state68))) begin
        bramWeight_ce1 = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_ce1;
    end else begin
        bramWeight_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_d0 = empty_224_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_d0 = grp_updateParameter_float_16u_s_fu_514_bramWeight_d0;
    end else begin
        bramWeight_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond549_reg_1267_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bramWeight_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_we0 = grp_updateParameter_float_16u_s_fu_514_bramWeight_we0;
    end else begin
        bramWeight_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        bramWeight_we1 = grp_updateParameter_float_16u_s_fu_514_bramWeight_we1;
    end else begin
        bramWeight_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state65_on_subcall_done) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68)))) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue = 1'b1;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset = trunc_ln102_reg_1585;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset = 7'd0;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_biasGradientAvg_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n = p_n_reg_1545;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n = l_n_reg_1462;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev = numberNeurons_read_reg_1220;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev = numberInputs_read_reg_1209;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_numberOutputsPrev = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset = add_ln108_reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset = add_ln128_reg_1560;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputCurrentLayer_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset = add_ln109_2_reg_1580;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset = mul_ln78_reg_1514;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_outputPrevLayer_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset = mul_ln110_reg_1595;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset = 14'd0;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weightGradientAvg_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset = mul_ln106_1_reg_1590;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset = valuesToStore_reg_1467;
    end else begin
        grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_weights_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state55_on_subcall_done) & (1'b1 == ap_CS_fsm_state55))) begin
        grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue = 1'b1;
    end else begin
        grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_copyArray_float_16u_s_fu_550_size = numberNeurons_read_reg_1220;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_copyArray_float_16u_s_fu_550_size = empty_232_reg_438;
    end else begin
        grp_copyArray_float_16u_s_fu_550_size = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (1'b1 == ap_CS_fsm_state72))) begin
        grp_updateParameter_float_16u_s_fu_514_ap_continue = 1'b1;
    end else begin
        grp_updateParameter_float_16u_s_fu_514_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln50_fu_562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((ap_start == 1'b1) & (icmp_ln50_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln58_fu_594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond549_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond549_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln63_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond538_fu_673_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond538_fu_673_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln67_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((axi_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond527_fu_723_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond527_fu_723_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln68_reg_1371 == 1'd1) & (1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else if (((icmp_ln68_reg_1371 == 1'd0) & (1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond516_fu_803_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond516_fu_803_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln75_fu_880_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((1'b0 == ap_block_state55_on_subcall_done) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (grp_copyArray_float_16u_s_fu_550_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln98_fu_948_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b0 == ap_block_state65_on_subcall_done) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (grp_copyArray_float_16u_s_fu_550_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b0 == ap_block_state68_on_subcall_done) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((~((1'b1 == ap_block_state72_on_subcall_done) | (1'b1 == ap_block_state72_io)) & (icmp_ln152_reg_1623 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond492_fu_1051_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (exitcond492_fu_1051_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if ((~((axi_write_BVALID == 1'b0) & (icmp_ln152_reg_1623 == 1'd0)) & (icmp_ln157_fu_1071_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else if ((~((axi_write_BVALID == 1'b0) & (icmp_ln152_reg_1623 == 1'd0)) & (icmp_ln157_fu_1071_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((axi_write_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((exitcond1_fu_1095_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((exitcond1_fu_1095_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if ((~((axi_write_BVALID == 1'b0) & (icmp_ln157_reg_1652 == 1'd0)) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add35_fu_833_p2 = (numberInputs_read_reg_1209 + mul34_fu_828_p2);

assign add_ln106_fu_983_p2 = ($signed(grp_fu_1132_p2) + $signed(trunc_ln71_reg_1375));

assign add_ln108_fu_991_p2 = ($signed(add_ln106_fu_983_p2) + $signed(mul_ln78_reg_1514));

assign add_ln109_2_fu_999_p2 = ($signed(grp_fu_1139_p4) + $signed(mul_ln78_reg_1514));

assign add_ln128_fu_978_p2 = ($signed(mul_ln78_reg_1514) + $signed(trunc_ln71_reg_1375));

assign add_ln150_1_fu_906_p2 = ($signed(numberOutputs_read_reg_1195) + $signed(mul34_reg_1426));

assign add_ln55_fu_568_p0 = numberLayers;

assign add_ln56_1_fu_580_p2 = ($signed(numberOutputs_read_reg_1195) + $signed(mul_ln55_reg_1246));

assign add_ln71_fu_747_p2 = (numberInputs_read_reg_1209 + valuesToStore_2_fu_743_p2);

assign add_ln85_fu_930_p2 = ($signed(trunc_ln71_4_reg_1359) + $signed(grp_fu_1124_p2));

assign add_ln87_fu_935_p2 = ($signed(empty_242_reg_1441) + $signed(grp_fu_1124_p2));

assign add_ln98_fu_966_p2 = ($signed(64'd18446744073709551615) + $signed(layer_1_reg_459));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond549_reg_1267 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond549_reg_1267 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond538_reg_1297 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond538_reg_1297 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond527_reg_1334 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond527_reg_1334 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((axi_read_RVALID == 1'b0) & (exitcond516_reg_1407 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((axi_read_RVALID == 1'b0) & (exitcond516_reg_1407 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state75_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state75_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b1 == ap_block_state84_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b1 == ap_block_state84_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond549_reg_1267 == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond538_reg_1297 == 1'd0));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp2_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond527_reg_1334 == 1'd0));
end

assign ap_block_state34_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((axi_read_ARREADY == 1'b0) & (icmp_ln68_reg_1371 == 1'd0));
end

assign ap_block_state44_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45_pp3_stage0_iter1 = ((axi_read_RVALID == 1'b0) & (exitcond516_reg_1407 == 1'd0));
end

assign ap_block_state46_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_on_subcall_done = ((ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready & ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state65_on_subcall_done = ((ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready & ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state68_on_subcall_done = ((ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready & ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state72_io = ((axi_write_AWREADY == 1'b0) & (icmp_ln152_reg_1623 == 1'd0));
end

always @ (*) begin
    ap_block_state72_on_subcall_done = ((ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready & ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done) == 1'b0);
end

assign ap_block_state73_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_io = ((axi_write_WREADY == 1'b0) & (exitcond492_reg_1633_pp4_iter1_reg == 1'd0));
end

assign ap_block_state75_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80 = ((axi_write_BVALID == 1'b0) & (icmp_ln152_reg_1623 == 1'd0));
end

assign ap_block_state82_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state84_io = ((axi_write_WREADY == 1'b0) & (exitcond1_reg_1662_pp5_iter1_reg == 1'd0));
end

assign ap_block_state84_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state89 = ((axi_write_BVALID == 1'b0) & (icmp_ln157_reg_1652 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done = (grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done | ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_done);

assign ap_sync_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready = (grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready | ap_sync_reg_grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_ready);

assign ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done = (grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done | ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_done);

assign ap_sync_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready = (grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready | ap_sync_reg_grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_ready);

assign ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_done = (grp_updateParameter_float_16u_s_fu_514_ap_done | ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_done);

assign ap_sync_grp_updateParameter_float_16u_s_fu_514_ap_ready = (grp_updateParameter_float_16u_s_fu_514_ap_ready | ap_sync_reg_grp_updateParameter_float_16u_s_fu_514_ap_ready);

assign bitcast_ln141_fu_1006_p1 = learningRate;

assign bramClasses_d0 = axi_read_addr_2_read_reg_1343;

assign bramMlpResults_d0 = axi_read_addr_3_read_reg_1416;

assign empty_223_fu_624_p2 = (ap_phi_mux_loop_index45_phi_fu_394_p4 + 32'd1);

assign empty_224_fu_635_p1 = axi_read_addr_read_reg_1276;

assign empty_225_fu_678_p2 = (ap_phi_mux_loop_index39_phi_fu_406_p4 + 32'd1);

assign empty_226_fu_689_p1 = axi_read_addr_1_read_reg_1306;

assign empty_228_fu_728_p2 = (ap_phi_mux_loop_index33_phi_fu_418_p4 + 32'd1);

assign empty_230_fu_808_p2 = (ap_phi_mux_loop_index27_phi_fu_430_p4 + 32'd1);

assign empty_234_fu_1056_p2 = (loop_index21_reg_468 + 32'd1);

assign empty_235_fu_1067_p1 = bramWeight_load_reg_1647;

assign empty_236_fu_1100_p2 = (loop_index_reg_479 + 32'd1);

assign empty_237_fu_1111_p1 = bramBias_load_reg_1676;

assign empty_242_fu_842_p1 = add35_fu_833_p2[14:0];

assign empty_243_fu_861_p1 = valuesToStore_2_reg_1348[6:0];

assign exitcond1_fu_1095_p2 = ((loop_index_reg_479 == valuesToStore_3_reg_1615) ? 1'b1 : 1'b0);

assign exitcond492_fu_1051_p2 = ((loop_index21_reg_468 == valuesToStore_1_reg_1507) ? 1'b1 : 1'b0);

assign exitcond516_fu_803_p2 = ((ap_phi_mux_loop_index27_phi_fu_430_p4 == mul_ln71_1_reg_1365) ? 1'b1 : 1'b0);

assign exitcond527_fu_723_p2 = ((ap_phi_mux_loop_index33_phi_fu_418_p4 == mul_ln67_reg_1318) ? 1'b1 : 1'b0);

assign exitcond538_fu_673_p2 = ((ap_phi_mux_loop_index39_phi_fu_406_p4 == valuesToLoad_2_reg_1281) ? 1'b1 : 1'b0);

assign exitcond549_fu_619_p2 = ((ap_phi_mux_loop_index45_phi_fu_394_p4 == valuesToLoad_reg_1251) ? 1'b1 : 1'b0);

assign grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start = grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_ap_start_reg;

assign grp_computeHiddenGradient_float_16u_4u_16u_s_fu_490_p_initZero = initZero_reg_1501;

assign grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start = grp_computeOutputGradient_float_16u_16u_s_fu_530_ap_start_reg;

assign grp_computeOutputGradient_float_16u_16u_s_fu_530_p_initZero = initZero_reg_1501;

assign grp_copyArray_float_16u_s_fu_550_ap_start = grp_copyArray_float_16u_s_fu_550_ap_start_reg;

assign grp_fu_1115_p0 = add35_fu_833_p2[13:0];

assign grp_fu_1124_p0 = (trunc_ln71_4_reg_1359 + trunc_ln75_2_fu_891_p1);

assign grp_fu_1124_p1 = i_reg_448[14:0];

assign grp_fu_1139_p0 = 15'd32767;

assign grp_fu_1149_p0 = add_ln106_fu_983_p2[13:0];

assign grp_fu_1155_p0 = grp_fu_1139_p4[13:0];

assign grp_updateParameter_float_16u_s_fu_514_ap_start = grp_updateParameter_float_16u_s_fu_514_ap_start_reg;

assign i_9_fu_885_p2 = (32'd1 + i_reg_448);

assign icmp_fu_855_p2 = ((tmp_fu_846_p4 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_fu_954_p2 = ((layer_1_reg_459 < zext_ln75_reg_1472) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_1026_p2 = ((valuesToStore_1_reg_1507 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_1071_p2 = ((valuesToStore_3_reg_1615 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_562_p2 = ((loadParameters == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_594_p2 = ((valuesToLoad_fu_589_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_648_p2 = ((valuesToLoad_2_fu_643_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_698_p2 = ((mul_ln67_fu_693_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_765_p2 = ((mul_ln71_1_fu_760_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_880_p2 = ((i_reg_448 == batchSize_read_reg_1311) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_948_p2 = (($signed(trunc_ln98_fu_940_p1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign initZero_fu_900_p2 = ((i_reg_448 == 32'd0) ? 1'b1 : 1'b0);

assign l_n_fu_864_p3 = ((icmp_reg_1446[0:0] === 1'b1) ? numberNeurons_read_reg_1220 : numberOutputs_read_reg_1195);

assign layer_fu_823_p2 = ($signed(32'd4294967295) + $signed(numberLayers_read_reg_1238));

assign loop_index21_cast_fu_1062_p1 = loop_index21_reg_468;

assign loop_index27_cast_fu_814_p1 = loop_index27_reg_426_pp3_iter1_reg;

assign loop_index33_cast_fu_734_p1 = loop_index33_reg_414_pp2_iter1_reg;

assign loop_index39_cast_fu_684_p1 = loop_index39_reg_402_pp1_iter1_reg;

assign loop_index45_cast_fu_630_p1 = loop_index45_reg_390_pp0_iter1_reg;

assign loop_index_cast_fu_1106_p1 = loop_index_reg_479;

assign mul34_fu_828_p1 = ($signed(32'd4294967295) + $signed(numberLayers_read_reg_1238));

assign mul_ln143_fu_1015_p1 = ($signed(numberOutputs_read_reg_1195) + $signed(add35_reg_1431));

assign mul_ln55_fu_574_p1 = ($signed(add_ln55_fu_568_p0) + $signed(32'd4294967295));

assign mul_ln71_1_fu_760_p1 = ($signed(numberOutputs_read_reg_1195) + $signed(add_ln71_reg_1354));

assign mul_ln79_fu_924_p0 = empty_232_reg_438[8:0];

assign p_cast10_cast_fu_1085_p1 = $signed(p_cast4_fu_1076_p4);

assign p_cast1_cast_fu_609_p1 = $signed(p_cast1_fu_600_p4);

assign p_cast1_fu_600_p4 = {{axiWeightInput_read_reg_1176[63:2]}};

assign p_cast2_cast_fu_792_p1 = $signed(p_cast2_fu_783_p4);

assign p_cast2_fu_783_p4 = {{axiMlpResultsInput_read_reg_1186[63:2]}};

assign p_cast3_cast_fu_663_p1 = $signed(p_cast3_fu_654_p4);

assign p_cast3_fu_654_p4 = {{axiBiasInput_read_reg_1171[63:2]}};

assign p_cast4_fu_1076_p4 = {{axiBiasOutput_read_reg_1161[63:2]}};

assign p_cast9_cast_fu_1040_p1 = $signed(p_cast9_fu_1031_p4);

assign p_cast9_fu_1031_p4 = {{axiWeightOutput_read_reg_1166[63:2]}};

assign p_cast_cast_fu_713_p1 = $signed(p_cast_fu_704_p4);

assign p_cast_fu_704_p4 = {{axiClassesInput_read_reg_1181[63:2]}};

assign p_n_fu_959_p3 = ((icmp_ln100_fu_954_p2[0:0] === 1'b1) ? numberNeurons_read_reg_1220 : empty_232_reg_438);

assign select_ln121_fu_972_p3 = ((icmp_reg_1446[0:0] === 1'b1) ? empty_232_reg_438 : numberOutputs_read_reg_1195);

assign tmp_fu_846_p4 = {{numberLayers_read_reg_1238[31:1]}};

assign trunc_ln102_fu_1003_p1 = grp_fu_1132_p2[6:0];

assign trunc_ln71_1_fu_774_p1 = numberInputs_read_reg_1209[13:0];

assign trunc_ln71_2_fu_777_p1 = numberNeurons_read_reg_1220[14:0];

assign trunc_ln71_3_fu_780_p1 = numberNeurons_read_reg_1220[13:0];

assign trunc_ln71_4_fu_752_p1 = add_ln71_fu_747_p2[14:0];

assign trunc_ln71_fu_771_p1 = numberInputs_read_reg_1209[14:0];

assign trunc_ln75_2_fu_891_p1 = empty_232_reg_438[14:0];

assign trunc_ln75_fu_872_p1 = i_reg_448[8:0];

assign trunc_ln98_1_fu_944_p1 = layer_1_reg_459[14:0];

assign trunc_ln98_fu_940_p1 = layer_1_reg_459[31:0];

assign valuesToLoad_2_fu_643_p2 = ($signed(numberOutputs_read_reg_1195) + $signed(valuesToLoad_1_fu_639_p2));

assign valuesToLoad_fu_589_p1 = (add_ln56_1_fu_580_p2 + numberInputs_read_reg_1209);

assign valuesToStore_1_fu_915_p1 = (add_ln150_1_fu_906_p2 + numberInputs_read_reg_1209);

assign valuesToStore_3_fu_1021_p2 = ($signed(numberOutputs_read_reg_1195) + $signed(valuesToStore_2_reg_1348));

assign zext_ln75_fu_869_p1 = $unsigned(layer_reg_1421);

always @ (posedge ap_clk) begin
    zext_ln75_reg_1472[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //BGD
