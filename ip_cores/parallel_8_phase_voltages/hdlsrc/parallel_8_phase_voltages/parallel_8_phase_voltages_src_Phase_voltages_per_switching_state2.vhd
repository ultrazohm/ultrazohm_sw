-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_phase_voltages\hdlsrc\parallel_8_phase_voltages\parallel_8_phase_voltages_src_Phase_voltages_per_switching_state2.vhd
-- Created: 2022-10-17 14:58:55
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- done                          ce_out        1e-08
-- phase_voltages_per_switching_state_0ce_out        1e-08
-- phase_voltages_per_switching_state_1ce_out        1e-08
-- phase_voltages_per_switching_state_2ce_out        1e-08
-- phase_voltages_per_switching_state_3ce_out        1e-08
-- phase_voltages_per_switching_state_4ce_out        1e-08
-- phase_voltages_per_switching_state_5ce_out        1e-08
-- phase_voltages_per_switching_state_6ce_out        1e-08
-- phase_voltages_per_switching_state_7ce_out        1e-08
-- phase_voltages_per_switching_state_8ce_out        1e-08
-- phase_voltages_per_switching_state_9ce_out        1e-08
-- phase_voltages_per_switching_state_10ce_out        1e-08
-- phase_voltages_per_switching_state_11ce_out        1e-08
-- phase_voltages_per_switching_state_12ce_out        1e-08
-- phase_voltages_per_switching_state_13ce_out        1e-08
-- phase_voltages_per_switching_state_14ce_out        1e-08
-- phase_voltages_per_switching_state_15ce_out        1e-08
-- phase_voltages_per_switching_state_16ce_out        1e-08
-- phase_voltages_per_switching_state_17ce_out        1e-08
-- phase_voltages_per_switching_state_18ce_out        1e-08
-- phase_voltages_per_switching_state_19ce_out        1e-08
-- phase_voltages_per_switching_state_20ce_out        1e-08
-- phase_voltages_per_switching_state_21ce_out        1e-08
-- phase_voltages_per_switching_state_22ce_out        1e-08
-- phase_voltages_per_switching_state_23ce_out        1e-08
-- phase_voltages_per_switching_state_24ce_out        1e-08
-- phase_voltages_per_switching_state_25ce_out        1e-08
-- phase_voltages_per_switching_state_26ce_out        1e-08
-- phase_voltages_per_switching_state_27ce_out        1e-08
-- phase_voltages_per_switching_state_28ce_out        1e-08
-- phase_voltages_per_switching_state_29ce_out        1e-08
-- phase_voltages_per_switching_state_30ce_out        1e-08
-- phase_voltages_per_switching_state_31ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_phase_voltages_src_Phase_voltages_per_switching_state2
-- Source Path: parallel_8_phase_voltages/Phase_voltages_per_switching_state2
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY parallel_8_phase_voltages_src_Phase_voltages_per_switching_state2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        theta_el                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_el_offset_AXI               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        u_dc_link_voltage_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        valid_in_delay_compensation       :   IN    std_logic;
        valid_in_min_cost_function_and_vopt :   IN    std_logic;
        valid_in_ADC                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        done                              :   OUT   std_logic;
        phase_voltages_per_switching_state_0 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_1 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_2 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_3 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_4 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_5 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_6 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_7 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_8 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_9 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_10 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_11 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_12 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_13 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_14 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_15 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_16 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_17 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_18 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_19 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_20 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_21 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_22 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_23 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_24 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_25 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_26 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_27 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_28 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_29 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_30 :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        phase_voltages_per_switching_state_31 :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
        );
END parallel_8_phase_voltages_src_Phase_voltages_per_switching_state2;


ARCHITECTURE rtl OF parallel_8_phase_voltages_src_Phase_voltages_per_switching_state2 IS

  -- Component Declarations
  COMPONENT parallel_8_phase_voltages_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_phase_voltages_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_phase_voltages_src_MATLAB_Function1
    PORT( u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          y                               :   OUT   std_logic_vector(47 DOWNTO 0)  -- sfix48_En45
          );
  END COMPONENT;

  COMPONENT parallel_8_phase_voltages_src_Sine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(47 DOWNTO 0);  -- sfix48_En45
          x                               :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En20
          y                               :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En20
          );
  END COMPONENT;

  COMPONENT parallel_8_phase_voltages_src_nfp_convert_sfix_25_En20_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En20
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_phase_voltages_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u_dc_link_voltage15             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Index_15                        :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state1  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state2  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state3  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state4  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state5  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state6  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          d_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          q_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          x_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          y_voltage_per_switching_state7  :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_phase_voltages_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_8_phase_voltages_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_8_phase_voltages_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_phase_voltages_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_phase_voltages_src_MATLAB_Function1
    USE ENTITY work.parallel_8_phase_voltages_src_MATLAB_Function1(rtl);

  FOR ALL : parallel_8_phase_voltages_src_Sine_HDL_Optimized
    USE ENTITY work.parallel_8_phase_voltages_src_Sine_HDL_Optimized(rtl);

  FOR ALL : parallel_8_phase_voltages_src_nfp_convert_sfix_25_En20_to_single
    USE ENTITY work.parallel_8_phase_voltages_src_nfp_convert_sfix_25_En20_to_single(rtl);

  FOR ALL : parallel_8_phase_voltages_src_Subsystem
    USE ENTITY work.parallel_8_phase_voltages_src_Subsystem(rtl);

  FOR ALL : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    USE ENTITY work.parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 32);  -- ufix1 [33]
  SIGNAL delayMatch10_reg_next            : std_logic_vector(0 TO 32);  -- ufix1 [33]
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch_on1_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Index_signed                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Switch_on3_out1                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay14_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL End_Cycle_2                      : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 8);  -- ufix1 [9]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 8);  -- ufix1 [9]
  SIGNAL End_Cycle_3                      : std_logic;
  SIGNAL End_Cycle_4                      : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 8);  -- ufix1 [9]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 8);  -- ufix1 [9]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL theta_el_signed                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL theta_el_offset_AXI_signed       : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add4_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add4_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_Limit_Low1_out1          : std_logic;
  SIGNAL Compare_Limit_High1_out1         : std_logic;
  SIGNAL Compare_Limit_High1_out1_1       : std_logic;
  SIGNAL Add4_out1_2                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant2_out1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add5_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_Limit_Low1_out1_1        : std_logic;
  SIGNAL Add5_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_Limit_High1_out1          : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant3_out1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add6_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add6_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL End_Cycle_5                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL y                                : std_logic_vector(47 DOWNTO 0);  -- ufix48
  SIGNAL Sine                             : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Cosine                           : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion42_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 8);  -- ufix1 [9]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 8);  -- ufix1 [9]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_1  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_2  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_3  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_4  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_5  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_6  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_voltage_per_switching_state_7  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_2_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_3_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_4_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_5_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_6_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_7_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_8_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_9_1                      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_10_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_11_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_12_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_13_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_14_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_15_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_16_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_17_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_18_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_19_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_20_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_21_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_22_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_23_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_24_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_25_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_26_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_27_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_28_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_29_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_30_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_31_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL nfp_out_32_1                     : std_logic_vector(23 DOWNTO 0);  -- ufix24

BEGIN
  u_Detect_Rise_Positive1 : parallel_8_phase_voltages_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Logical_Operator_out1,
              Y => End_Cycle
              );

  u_Detect_Rise_Positive : parallel_8_phase_voltages_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => valid_in_ADC,
              Y => End_Cycle_2
              );

  u_MATLAB_Function1 : parallel_8_phase_voltages_src_MATLAB_Function1
    PORT MAP( u => std_logic_vector(End_Cycle_5),  -- sfix24_En20
              y => y  -- sfix48_En45
              );

  u_Sine_HDL_Optimized : parallel_8_phase_voltages_src_Sine_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              u => y,  -- sfix48_En45
              x => Sine,  -- sfix25_En20
              y => Cosine  -- sfix25_En20
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_sfix_25_En20_to_single : parallel_8_phase_voltages_src_nfp_convert_sfix_25_En20_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Sine,  -- sfix25_En20
              nfp_out => Data_Type_Conversion42_out1  -- single
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_sfix_25_En20_to_single_1 : parallel_8_phase_voltages_src_nfp_convert_sfix_25_En20_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Cosine,  -- sfix25_En20
              nfp_out => Data_Type_Conversion2_out1  -- single
              );

  u_Subsystem : parallel_8_phase_voltages_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              u_dc_link_voltage15 => Switch_on1_out1,  -- single
              Index_15 => std_logic_vector(Switch_on3_out1),  -- int32
              sin_theta_el => Switch_on2_out1,  -- single
              cos_theta_el => Switch_on13_out1,  -- single
              d_voltage_per_switching_state => d_voltage_per_switching_state,  -- single
              q_voltage_per_switching_state => q_voltage_per_switching_state,  -- single
              x_voltage_per_switching_state => x_voltage_per_switching_state,  -- single
              y_voltage_per_switching_state => y_voltage_per_switching_state,  -- single
              d_voltage_per_switching_state1 => d_voltage_per_switching_state_1,  -- single
              q_voltage_per_switching_state1 => q_voltage_per_switching_state_1,  -- single
              x_voltage_per_switching_state1 => x_voltage_per_switching_state_1,  -- single
              y_voltage_per_switching_state1 => y_voltage_per_switching_state_1,  -- single
              d_voltage_per_switching_state2 => d_voltage_per_switching_state_2,  -- single
              q_voltage_per_switching_state2 => q_voltage_per_switching_state_2,  -- single
              x_voltage_per_switching_state2 => x_voltage_per_switching_state_2,  -- single
              y_voltage_per_switching_state2 => y_voltage_per_switching_state_2,  -- single
              d_voltage_per_switching_state3 => d_voltage_per_switching_state_3,  -- single
              q_voltage_per_switching_state3 => q_voltage_per_switching_state_3,  -- single
              x_voltage_per_switching_state3 => x_voltage_per_switching_state_3,  -- single
              y_voltage_per_switching_state3 => y_voltage_per_switching_state_3,  -- single
              d_voltage_per_switching_state4 => d_voltage_per_switching_state_4,  -- single
              q_voltage_per_switching_state4 => q_voltage_per_switching_state_4,  -- single
              x_voltage_per_switching_state4 => x_voltage_per_switching_state_4,  -- single
              y_voltage_per_switching_state4 => y_voltage_per_switching_state_4,  -- single
              d_voltage_per_switching_state5 => d_voltage_per_switching_state_5,  -- single
              q_voltage_per_switching_state5 => q_voltage_per_switching_state_5,  -- single
              x_voltage_per_switching_state5 => x_voltage_per_switching_state_5,  -- single
              y_voltage_per_switching_state5 => y_voltage_per_switching_state_5,  -- single
              d_voltage_per_switching_state6 => d_voltage_per_switching_state_6,  -- single
              q_voltage_per_switching_state6 => q_voltage_per_switching_state_6,  -- single
              x_voltage_per_switching_state6 => x_voltage_per_switching_state_6,  -- single
              y_voltage_per_switching_state6 => y_voltage_per_switching_state_6,  -- single
              d_voltage_per_switching_state7 => d_voltage_per_switching_state_7,  -- single
              q_voltage_per_switching_state7 => q_voltage_per_switching_state_7,  -- single
              x_voltage_per_switching_state7 => x_voltage_per_switching_state_7,  -- single
              y_voltage_per_switching_state7 => y_voltage_per_switching_state_7  -- single
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_1_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_1 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_2_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_2 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_3_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_3 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state,  -- single
              nfp_out => nfp_out_4_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_4 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_5_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_5 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_6_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_6 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_7_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_7 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_1,  -- single
              nfp_out => nfp_out_8_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_8 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_9_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_9 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_10_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_10 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_11_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_11 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_2,  -- single
              nfp_out => nfp_out_12_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_12 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_13_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_13 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_14_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_14 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_15_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_15 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_3,  -- single
              nfp_out => nfp_out_16_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_16 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_17_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_17 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_18_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_18 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_19_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_19 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_4,  -- single
              nfp_out => nfp_out_20_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_20 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_21_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_21 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_22_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_22 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_23_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_23 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_5,  -- single
              nfp_out => nfp_out_24_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_24 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_25_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_25 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_26_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_26 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_27_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_27 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_6,  -- single
              nfp_out => nfp_out_28_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_28 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => d_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_29_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_29 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => q_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_30_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_30 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => x_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_31_1  -- sfix24_En11
              );

  u_parallel_8_phase_voltages_Phase_voltages_per_switching_state2_nfp_convert_single_to_sfix_24_En11_31 : parallel_8_phase_voltages_src_nfp_convert_single_to_sfix_24_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => y_voltage_per_switching_state_7,  -- single
              nfp_out => nfp_out_32_1  -- sfix24_En11
              );

  Logical_Operator_out1 <= valid_in_delay_compensation OR valid_in_min_cost_function_and_vopt;

  enb <= clk_enable;

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg(0) <= '0';
        delayMatch10_reg(1) <= '0';
        delayMatch10_reg(2) <= '0';
        delayMatch10_reg(3) <= '0';
        delayMatch10_reg(4) <= '0';
        delayMatch10_reg(5) <= '0';
        delayMatch10_reg(6) <= '0';
        delayMatch10_reg(7) <= '0';
        delayMatch10_reg(8) <= '0';
        delayMatch10_reg(9) <= '0';
        delayMatch10_reg(10) <= '0';
        delayMatch10_reg(11) <= '0';
        delayMatch10_reg(12) <= '0';
        delayMatch10_reg(13) <= '0';
        delayMatch10_reg(14) <= '0';
        delayMatch10_reg(15) <= '0';
        delayMatch10_reg(16) <= '0';
        delayMatch10_reg(17) <= '0';
        delayMatch10_reg(18) <= '0';
        delayMatch10_reg(19) <= '0';
        delayMatch10_reg(20) <= '0';
        delayMatch10_reg(21) <= '0';
        delayMatch10_reg(22) <= '0';
        delayMatch10_reg(23) <= '0';
        delayMatch10_reg(24) <= '0';
        delayMatch10_reg(25) <= '0';
        delayMatch10_reg(26) <= '0';
        delayMatch10_reg(27) <= '0';
        delayMatch10_reg(28) <= '0';
        delayMatch10_reg(29) <= '0';
        delayMatch10_reg(30) <= '0';
        delayMatch10_reg(31) <= '0';
        delayMatch10_reg(32) <= '0';
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
        delayMatch10_reg(5) <= delayMatch10_reg_next(5);
        delayMatch10_reg(6) <= delayMatch10_reg_next(6);
        delayMatch10_reg(7) <= delayMatch10_reg_next(7);
        delayMatch10_reg(8) <= delayMatch10_reg_next(8);
        delayMatch10_reg(9) <= delayMatch10_reg_next(9);
        delayMatch10_reg(10) <= delayMatch10_reg_next(10);
        delayMatch10_reg(11) <= delayMatch10_reg_next(11);
        delayMatch10_reg(12) <= delayMatch10_reg_next(12);
        delayMatch10_reg(13) <= delayMatch10_reg_next(13);
        delayMatch10_reg(14) <= delayMatch10_reg_next(14);
        delayMatch10_reg(15) <= delayMatch10_reg_next(15);
        delayMatch10_reg(16) <= delayMatch10_reg_next(16);
        delayMatch10_reg(17) <= delayMatch10_reg_next(17);
        delayMatch10_reg(18) <= delayMatch10_reg_next(18);
        delayMatch10_reg(19) <= delayMatch10_reg_next(19);
        delayMatch10_reg(20) <= delayMatch10_reg_next(20);
        delayMatch10_reg(21) <= delayMatch10_reg_next(21);
        delayMatch10_reg(22) <= delayMatch10_reg_next(22);
        delayMatch10_reg(23) <= delayMatch10_reg_next(23);
        delayMatch10_reg(24) <= delayMatch10_reg_next(24);
        delayMatch10_reg(25) <= delayMatch10_reg_next(25);
        delayMatch10_reg(26) <= delayMatch10_reg_next(26);
        delayMatch10_reg(27) <= delayMatch10_reg_next(27);
        delayMatch10_reg(28) <= delayMatch10_reg_next(28);
        delayMatch10_reg(29) <= delayMatch10_reg_next(29);
        delayMatch10_reg(30) <= delayMatch10_reg_next(30);
        delayMatch10_reg(31) <= delayMatch10_reg_next(31);
        delayMatch10_reg(32) <= delayMatch10_reg_next(32);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  End_Cycle_1 <= delayMatch10_reg(32);
  delayMatch10_reg_next(0) <= End_Cycle;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);
  delayMatch10_reg_next(2) <= delayMatch10_reg(1);
  delayMatch10_reg_next(3) <= delayMatch10_reg(2);
  delayMatch10_reg_next(4) <= delayMatch10_reg(3);
  delayMatch10_reg_next(5) <= delayMatch10_reg(4);
  delayMatch10_reg_next(6) <= delayMatch10_reg(5);
  delayMatch10_reg_next(7) <= delayMatch10_reg(6);
  delayMatch10_reg_next(8) <= delayMatch10_reg(7);
  delayMatch10_reg_next(9) <= delayMatch10_reg(8);
  delayMatch10_reg_next(10) <= delayMatch10_reg(9);
  delayMatch10_reg_next(11) <= delayMatch10_reg(10);
  delayMatch10_reg_next(12) <= delayMatch10_reg(11);
  delayMatch10_reg_next(13) <= delayMatch10_reg(12);
  delayMatch10_reg_next(14) <= delayMatch10_reg(13);
  delayMatch10_reg_next(15) <= delayMatch10_reg(14);
  delayMatch10_reg_next(16) <= delayMatch10_reg(15);
  delayMatch10_reg_next(17) <= delayMatch10_reg(16);
  delayMatch10_reg_next(18) <= delayMatch10_reg(17);
  delayMatch10_reg_next(19) <= delayMatch10_reg(18);
  delayMatch10_reg_next(20) <= delayMatch10_reg(19);
  delayMatch10_reg_next(21) <= delayMatch10_reg(20);
  delayMatch10_reg_next(22) <= delayMatch10_reg(21);
  delayMatch10_reg_next(23) <= delayMatch10_reg(22);
  delayMatch10_reg_next(24) <= delayMatch10_reg(23);
  delayMatch10_reg_next(25) <= delayMatch10_reg(24);
  delayMatch10_reg_next(26) <= delayMatch10_reg(25);
  delayMatch10_reg_next(27) <= delayMatch10_reg(26);
  delayMatch10_reg_next(28) <= delayMatch10_reg(27);
  delayMatch10_reg_next(29) <= delayMatch10_reg(28);
  delayMatch10_reg_next(30) <= delayMatch10_reg(29);
  delayMatch10_reg_next(31) <= delayMatch10_reg(30);
  delayMatch10_reg_next(32) <= delayMatch10_reg(31);

  done <= End_Cycle_1;

  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1 = '0' ELSE
      u_dc_link_voltage_AXI;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Index_signed <= signed(Index);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay14_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch_on3_out1 <= Delay14_out1 WHEN switch_compare_1_1 = '0' ELSE
      Index_signed;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= '0';
        reduced_reg(1) <= '0';
        reduced_reg(2) <= '0';
        reduced_reg(3) <= '0';
        reduced_reg(4) <= '0';
        reduced_reg(5) <= '0';
        reduced_reg(6) <= '0';
        reduced_reg(7) <= '0';
        reduced_reg(8) <= '0';
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
        reduced_reg(6) <= reduced_reg_next(6);
        reduced_reg(7) <= reduced_reg_next(7);
        reduced_reg(8) <= reduced_reg_next(8);
      END IF;
    END IF;
  END PROCESS reduced_process;

  End_Cycle_3 <= reduced_reg(8);
  reduced_reg_next(0) <= End_Cycle_2;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);
  reduced_reg_next(6) <= reduced_reg(5);
  reduced_reg_next(7) <= reduced_reg(6);
  reduced_reg_next(8) <= reduced_reg(7);

  End_Cycle_4 <= End_Cycle_3;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle_4 = '1' ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg(0) <= '0';
        delayMatch6_reg(1) <= '0';
        delayMatch6_reg(2) <= '0';
        delayMatch6_reg(3) <= '0';
        delayMatch6_reg(4) <= '0';
        delayMatch6_reg(5) <= '0';
        delayMatch6_reg(6) <= '0';
        delayMatch6_reg(7) <= '0';
        delayMatch6_reg(8) <= '0';
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
        delayMatch6_reg(6) <= delayMatch6_reg_next(6);
        delayMatch6_reg(7) <= delayMatch6_reg_next(7);
        delayMatch6_reg(8) <= delayMatch6_reg_next(8);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_2 <= delayMatch6_reg(8);
  delayMatch6_reg_next(0) <= stateControl_1;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);
  delayMatch6_reg_next(2) <= delayMatch6_reg(1);
  delayMatch6_reg_next(3) <= delayMatch6_reg(2);
  delayMatch6_reg_next(4) <= delayMatch6_reg(3);
  delayMatch6_reg_next(5) <= delayMatch6_reg(4);
  delayMatch6_reg_next(6) <= delayMatch6_reg(5);
  delayMatch6_reg_next(7) <= delayMatch6_reg(6);
  delayMatch6_reg_next(8) <= delayMatch6_reg(7);

  theta_el_signed <= signed(theta_el);

  theta_el_offset_AXI_signed <= signed(theta_el_offset_AXI);

  Add4_out1 <= theta_el_signed - theta_el_offset_AXI_signed;

  Add4_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add4_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add4_out1_1 <= Add4_out1;
      END IF;
    END IF;
  END PROCESS Add4_out_pipe_process;


  
  Compare_Limit_Low1_out1 <= '1' WHEN Add4_out1_1 < to_signed(16#000000#, 24) ELSE
      '0';

  
  Compare_Limit_High1_out1 <= '1' WHEN Add4_out1_1 >= to_signed(16#6487ED#, 24) ELSE
      '0';

  Compare_Limit_High1_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Compare_Limit_High1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_Limit_High1_out1_1 <= Compare_Limit_High1_out1;
      END IF;
    END IF;
  END PROCESS Compare_Limit_High1_out_pipe_process;


  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add4_out1_2 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add4_out1_2 <= Add4_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Constant2_out1 <= to_signed(16#6487ED#, 24);

  Add5_out1 <= Add4_out1_1 - Constant2_out1;

  Compare_Limit_Low1_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Compare_Limit_Low1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_Limit_Low1_out1_1 <= Compare_Limit_Low1_out1;
      END IF;
    END IF;
  END PROCESS Compare_Limit_Low1_out_pipe_process;


  Add5_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add5_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add5_out1_1 <= Add5_out1;
      END IF;
    END IF;
  END PROCESS Add5_out_pipe_process;


  
  Switch_Limit_High1_out1 <= Add4_out1_2 WHEN Compare_Limit_High1_out1_1 = '0' ELSE
      Add5_out1_1;

  Constant3_out1 <= to_signed(16#6487ED#, 24);

  Add6_out1 <= Add4_out1_1 + Constant3_out1;

  Add6_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add6_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add6_out1_1 <= Add6_out1;
      END IF;
    END IF;
  END PROCESS Add6_out_pipe_process;


  
  End_Cycle_5 <= Switch_Limit_High1_out1 WHEN Compare_Limit_Low1_out1_1 = '0' ELSE
      Add6_out1_1;

  
  Switch_on2_out1_1 <= Delay2_out1 WHEN stateControl_2 = '0' ELSE
      Switch_on2_out1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1_2 = '0' ELSE
      Data_Type_Conversion42_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle_3 = '1' ELSE
      '0';

  stateControl_3 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg(0) <= '0';
        delayMatch8_reg(1) <= '0';
        delayMatch8_reg(2) <= '0';
        delayMatch8_reg(3) <= '0';
        delayMatch8_reg(4) <= '0';
        delayMatch8_reg(5) <= '0';
        delayMatch8_reg(6) <= '0';
        delayMatch8_reg(7) <= '0';
        delayMatch8_reg(8) <= '0';
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
        delayMatch8_reg(2) <= delayMatch8_reg_next(2);
        delayMatch8_reg(3) <= delayMatch8_reg_next(3);
        delayMatch8_reg(4) <= delayMatch8_reg_next(4);
        delayMatch8_reg(5) <= delayMatch8_reg_next(5);
        delayMatch8_reg(6) <= delayMatch8_reg_next(6);
        delayMatch8_reg(7) <= delayMatch8_reg_next(7);
        delayMatch8_reg(8) <= delayMatch8_reg_next(8);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  stateControl_4 <= delayMatch8_reg(8);
  delayMatch8_reg_next(0) <= stateControl_3;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);
  delayMatch8_reg_next(2) <= delayMatch8_reg(1);
  delayMatch8_reg_next(3) <= delayMatch8_reg(2);
  delayMatch8_reg_next(4) <= delayMatch8_reg(3);
  delayMatch8_reg_next(5) <= delayMatch8_reg(4);
  delayMatch8_reg_next(6) <= delayMatch8_reg(5);
  delayMatch8_reg_next(7) <= delayMatch8_reg(6);
  delayMatch8_reg_next(8) <= delayMatch8_reg(7);

  
  Switch_on13_out1_1 <= Delay13_out1 WHEN stateControl_4 = '0' ELSE
      Switch_on13_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_out1 <= Switch_on13_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch_on13_out1 <= Delay13_out1 WHEN switch_compare_1_3 = '0' ELSE
      Data_Type_Conversion2_out1;

  phase_voltages_per_switching_state_0 <= nfp_out_1_1;

  phase_voltages_per_switching_state_1 <= nfp_out_2_1;

  phase_voltages_per_switching_state_2 <= nfp_out_3_1;

  phase_voltages_per_switching_state_3 <= nfp_out_4_1;

  phase_voltages_per_switching_state_4 <= nfp_out_5_1;

  phase_voltages_per_switching_state_5 <= nfp_out_6_1;

  phase_voltages_per_switching_state_6 <= nfp_out_7_1;

  phase_voltages_per_switching_state_7 <= nfp_out_8_1;

  phase_voltages_per_switching_state_8 <= nfp_out_9_1;

  phase_voltages_per_switching_state_9 <= nfp_out_10_1;

  phase_voltages_per_switching_state_10 <= nfp_out_11_1;

  phase_voltages_per_switching_state_11 <= nfp_out_12_1;

  phase_voltages_per_switching_state_12 <= nfp_out_13_1;

  phase_voltages_per_switching_state_13 <= nfp_out_14_1;

  phase_voltages_per_switching_state_14 <= nfp_out_15_1;

  phase_voltages_per_switching_state_15 <= nfp_out_16_1;

  phase_voltages_per_switching_state_16 <= nfp_out_17_1;

  phase_voltages_per_switching_state_17 <= nfp_out_18_1;

  phase_voltages_per_switching_state_18 <= nfp_out_19_1;

  phase_voltages_per_switching_state_19 <= nfp_out_20_1;

  phase_voltages_per_switching_state_20 <= nfp_out_21_1;

  phase_voltages_per_switching_state_21 <= nfp_out_22_1;

  phase_voltages_per_switching_state_22 <= nfp_out_23_1;

  phase_voltages_per_switching_state_23 <= nfp_out_24_1;

  phase_voltages_per_switching_state_24 <= nfp_out_25_1;

  phase_voltages_per_switching_state_25 <= nfp_out_26_1;

  phase_voltages_per_switching_state_26 <= nfp_out_27_1;

  phase_voltages_per_switching_state_27 <= nfp_out_28_1;

  phase_voltages_per_switching_state_28 <= nfp_out_29_1;

  phase_voltages_per_switching_state_29 <= nfp_out_30_1;

  phase_voltages_per_switching_state_30 <= nfp_out_31_1;

  phase_voltages_per_switching_state_31 <= nfp_out_32_1;

  ce_out <= clk_enable;

END rtl;

