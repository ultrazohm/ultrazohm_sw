-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\IP_Core_SS_Switch_and_PWM\IP_Core_S_ip_src_PWM_and_Switching_Signal_Control.vhd
-- Created: 2018-10-01 12:50:34
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 5e-07
-- Target subsystem base rate: 5e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- SS0_OUT                       ce_out        5e-07
-- SS1_OUT                       ce_out        5e-07
-- SS2_OUT                       ce_out        5e-07
-- SS3_OUT                       ce_out        5e-07
-- SS4_OUT                       ce_out        5e-07
-- SS5_OUT                       ce_out        5e-07
-- PWM_en_rd_AXI                 ce_out        5e-07
-- PWM_f_carrier_kHz_rd_AXI      ce_out        5e-07
-- PWM_min_pulse_width_rd_AXI    ce_out        5e-07
-- PWM_enb_out                   ce_out        5e-07
-- Mode_rd_AXI                   ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IP_Core_S_ip_src_PWM_and_Switching_Signal_Control
-- Source Path: IP_Core_SS_Switch_and_PWM/PWM_and_Switching_Signal_Control
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IP_Core_S_ip_src_PWM_and_Switching_Signal_Control IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        PWM_en_AXI                        :   IN    std_logic;
        Mode_AXI                          :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        PWM_f_carrier_kHz_AXI             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        PWM_min_pulse_wiidth_AXI          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        m_u1_norm                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        m_u2_norm                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        m_u3_norm                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        m_u1_norm_AXI                     :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        m_u2_norm_AXI                     :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        m_u3_norm_AXI                     :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        SS0_IN_External                   :   IN    std_logic;  -- ufix1
        SS1_IN_External                   :   IN    std_logic;  -- ufix1
        SS2_IN_External                   :   IN    std_logic;  -- ufix1
        SS3_IN_External                   :   IN    std_logic;  -- ufix1
        SS4_IN_External                   :   IN    std_logic;  -- ufix1
        SS5_IN_External                   :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        SS0_OUT                           :   OUT   std_logic;  -- ufix1
        SS1_OUT                           :   OUT   std_logic;  -- ufix1
        SS2_OUT                           :   OUT   std_logic;  -- ufix1
        SS3_OUT                           :   OUT   std_logic;  -- ufix1
        SS4_OUT                           :   OUT   std_logic;  -- ufix1
        SS5_OUT                           :   OUT   std_logic;  -- ufix1
        PWM_en_rd_AXI                     :   OUT   std_logic;
        PWM_f_carrier_kHz_rd_AXI          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        PWM_min_pulse_width_rd_AXI        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        PWM_enb_out                       :   OUT   std_logic;
        Mode_rd_AXI                       :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END IP_Core_S_ip_src_PWM_and_Switching_Signal_Control;


ARCHITECTURE rtl OF IP_Core_S_ip_src_PWM_and_Switching_Signal_Control IS

  -- Component Declarations
  COMPONENT IP_Core_S_ip_src_GenPWM
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          PWM_en_AXI                      :   IN    std_logic;
          f_carrier_kHz_AXI               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          min_pulse_width_AXI             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          U1_norm                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          U2_norm                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          U3_norm                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
          S1                              :   OUT   std_logic;  -- ufix1
          S2                              :   OUT   std_logic;  -- ufix1
          S3                              :   OUT   std_logic;  -- ufix1
          S4                              :   OUT   std_logic;  -- ufix1
          S5                              :   OUT   std_logic;  -- ufix1
          S6                              :   OUT   std_logic;  -- ufix1
          PWM_en_rd_AXI                   :   OUT   std_logic;
          f_carrier_kHz_rd_AXI            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          min_pulse_width_rd_AXI          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          enb_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IP_Core_S_ip_src_VSI_Control_Signal_Switch
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Switch_AXI                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          SS0_IN_PWM                      :   IN    std_logic;  -- ufix1
          SS1_IN_PWM                      :   IN    std_logic;  -- ufix1
          SS2_IN_PWM                      :   IN    std_logic;  -- ufix1
          SS3_IN_PWM                      :   IN    std_logic;  -- ufix1
          SS4_IN_PWM                      :   IN    std_logic;  -- ufix1
          SS5_IN_PWM                      :   IN    std_logic;  -- ufix1
          SS0_IN_External                 :   IN    std_logic;  -- ufix1
          SS1_IN_External                 :   IN    std_logic;  -- ufix1
          SS2_IN_External                 :   IN    std_logic;  -- ufix1
          SS3_IN_External                 :   IN    std_logic;  -- ufix1
          SS4_IN_External                 :   IN    std_logic;  -- ufix1
          SS5_IN_External                 :   IN    std_logic;  -- ufix1
          SS0_OUT                         :   OUT   std_logic;  -- ufix1
          SS1_OUT                         :   OUT   std_logic;  -- ufix1
          SS2_OUT                         :   OUT   std_logic;  -- ufix1
          SS3_OUT                         :   OUT   std_logic;  -- ufix1
          SS4_OUT                         :   OUT   std_logic;  -- ufix1
          SS5_OUT                         :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IP_Core_S_ip_src_GenPWM
    USE ENTITY work.IP_Core_S_ip_src_GenPWM(rtl);

  FOR ALL : IP_Core_S_ip_src_VSI_Control_Signal_Switch
    USE ENTITY work.IP_Core_S_ip_src_VSI_Control_Signal_Switch(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Mode_AXI_unsigned                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL m_u1_norm_AXI_signed             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m_u1_norm_signed                 : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch7_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m_u2_norm_AXI_signed             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m_u2_norm_signed                 : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch8_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m_u3_norm_AXI_signed             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL m_u3_norm_signed                 : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL Switch9_out1                     : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL GenPWM_out1                      : std_logic;  -- ufix1
  SIGNAL GenPWM_out2                      : std_logic;  -- ufix1
  SIGNAL GenPWM_out3                      : std_logic;  -- ufix1
  SIGNAL GenPWM_out4                      : std_logic;  -- ufix1
  SIGNAL GenPWM_out5                      : std_logic;  -- ufix1
  SIGNAL GenPWM_out6                      : std_logic;  -- ufix1
  SIGNAL GenPWM_out7                      : std_logic;
  SIGNAL GenPWM_out8                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL GenPWM_out9                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL GenPWM_out10                     : std_logic;
  SIGNAL VSI_Control_Signal_Switch_out1   : std_logic;  -- ufix1
  SIGNAL VSI_Control_Signal_Switch_out2   : std_logic;  -- ufix1
  SIGNAL VSI_Control_Signal_Switch_out3   : std_logic;  -- ufix1
  SIGNAL VSI_Control_Signal_Switch_out4   : std_logic;  -- ufix1
  SIGNAL VSI_Control_Signal_Switch_out5   : std_logic;  -- ufix1
  SIGNAL VSI_Control_Signal_Switch_out6   : std_logic;  -- ufix1
  SIGNAL Mode_AXI_1                       : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- Kopie von pwm_ip_v00, der bei einer neuen Version ausgetauscht werden kann

  u_GenPWM : IP_Core_S_ip_src_GenPWM
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              PWM_en_AXI => PWM_en_AXI,
              f_carrier_kHz_AXI => PWM_f_carrier_kHz_AXI,  -- uint8
              min_pulse_width_AXI => PWM_min_pulse_wiidth_AXI,  -- uint8
              U1_norm => std_logic_vector(Switch7_out1),  -- sfix14_En12
              U2_norm => std_logic_vector(Switch8_out1),  -- sfix14_En12
              U3_norm => std_logic_vector(Switch9_out1),  -- sfix14_En12
              S1 => GenPWM_out1,  -- ufix1
              S2 => GenPWM_out2,  -- ufix1
              S3 => GenPWM_out3,  -- ufix1
              S4 => GenPWM_out4,  -- ufix1
              S5 => GenPWM_out5,  -- ufix1
              S6 => GenPWM_out6,  -- ufix1
              PWM_en_rd_AXI => GenPWM_out7,
              f_carrier_kHz_rd_AXI => GenPWM_out8,  -- uint8
              min_pulse_width_rd_AXI => GenPWM_out9,  -- uint8
              enb_out => GenPWM_out10
              );

  u_VSI_Control_Signal_Switch : IP_Core_S_ip_src_VSI_Control_Signal_Switch
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Switch_AXI => Mode_AXI,  -- ufix2
              SS0_IN_PWM => GenPWM_out1,  -- ufix1
              SS1_IN_PWM => GenPWM_out2,  -- ufix1
              SS2_IN_PWM => GenPWM_out3,  -- ufix1
              SS3_IN_PWM => GenPWM_out4,  -- ufix1
              SS4_IN_PWM => GenPWM_out5,  -- ufix1
              SS5_IN_PWM => GenPWM_out6,  -- ufix1
              SS0_IN_External => SS0_IN_External,  -- ufix1
              SS1_IN_External => SS1_IN_External,  -- ufix1
              SS2_IN_External => SS2_IN_External,  -- ufix1
              SS3_IN_External => SS3_IN_External,  -- ufix1
              SS4_IN_External => SS4_IN_External,  -- ufix1
              SS5_IN_External => SS5_IN_External,  -- ufix1
              SS0_OUT => VSI_Control_Signal_Switch_out1,  -- ufix1
              SS1_OUT => VSI_Control_Signal_Switch_out2,  -- ufix1
              SS2_OUT => VSI_Control_Signal_Switch_out3,  -- ufix1
              SS3_OUT => VSI_Control_Signal_Switch_out4,  -- ufix1
              SS4_OUT => VSI_Control_Signal_Switch_out5,  -- ufix1
              SS5_OUT => VSI_Control_Signal_Switch_out6  -- ufix1
              );

  Mode_AXI_unsigned <= unsigned(Mode_AXI);

  m_u1_norm_AXI_signed <= signed(m_u1_norm_AXI);

  m_u1_norm_signed <= signed(m_u1_norm);

  
  Switch7_out1 <= m_u1_norm_AXI_signed WHEN Mode_AXI_unsigned = to_unsigned(16#0#, 2) ELSE
      m_u1_norm_signed;

  m_u2_norm_AXI_signed <= signed(m_u2_norm_AXI);

  m_u2_norm_signed <= signed(m_u2_norm);

  
  Switch8_out1 <= m_u2_norm_AXI_signed WHEN Mode_AXI_unsigned = to_unsigned(16#0#, 2) ELSE
      m_u2_norm_signed;

  m_u3_norm_AXI_signed <= signed(m_u3_norm_AXI);

  m_u3_norm_signed <= signed(m_u3_norm);

  
  Switch9_out1 <= m_u3_norm_AXI_signed WHEN Mode_AXI_unsigned = to_unsigned(16#0#, 2) ELSE
      m_u3_norm_signed;

  enb <= clk_enable;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mode_AXI_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Mode_AXI_1 <= Mode_AXI_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Mode_rd_AXI <= std_logic_vector(Mode_AXI_1);

  ce_out <= clk_enable;

  SS0_OUT <= VSI_Control_Signal_Switch_out1;

  SS1_OUT <= VSI_Control_Signal_Switch_out2;

  SS2_OUT <= VSI_Control_Signal_Switch_out3;

  SS3_OUT <= VSI_Control_Signal_Switch_out4;

  SS4_OUT <= VSI_Control_Signal_Switch_out5;

  SS5_OUT <= VSI_Control_Signal_Switch_out6;

  PWM_en_rd_AXI <= GenPWM_out7;

  PWM_f_carrier_kHz_rd_AXI <= GenPWM_out8;

  PWM_min_pulse_width_rd_AXI <= GenPWM_out9;

  PWM_enb_out <= GenPWM_out10;

END rtl;

