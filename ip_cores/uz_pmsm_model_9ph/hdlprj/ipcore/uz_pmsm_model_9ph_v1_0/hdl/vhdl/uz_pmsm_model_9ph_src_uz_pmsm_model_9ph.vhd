-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_pmsm_model_9ph\hdlprj\hdlsrc\uz_pmsm_model_9ph\uz_pmsm_model_9ph_src_uz_pmsm_model_9ph.vhd
-- Created: 2022-04-15 14:19:35
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- output_general_0              ce_out        1e-06
-- output_general_1              ce_out        1e-06
-- output_general_2              ce_out        1e-06
-- output_general_3              ce_out        1e-06
-- output_general_4              ce_out        1e-06
-- output_currents_dq_0          ce_out        1e-06
-- output_currents_dq_1          ce_out        1e-06
-- output_currents_dq_2          ce_out        1e-06
-- output_currents_dq_3          ce_out        1e-06
-- output_currents_dq_4          ce_out        1e-06
-- output_currents_dq_5          ce_out        1e-06
-- output_currents_dq_6          ce_out        1e-06
-- output_currents_dq_7          ce_out        1e-06
-- output_currents_dq_8          ce_out        1e-06
-- output_currents_abc_0         ce_out        1e-06
-- output_currents_abc_1         ce_out        1e-06
-- output_currents_abc_2         ce_out        1e-06
-- output_currents_abc_3         ce_out        1e-06
-- output_currents_abc_4         ce_out        1e-06
-- output_currents_abc_5         ce_out        1e-06
-- output_currents_abc_6         ce_out        1e-06
-- output_currents_abc_7         ce_out        1e-06
-- output_currents_abc_8         ce_out        1e-06
-- u_abc1_pl_out_0               ce_out        1e-06
-- u_abc1_pl_out_1               ce_out        1e-06
-- u_abc1_pl_out_2               ce_out        1e-06
-- u_abc2_pl_out_0               ce_out        1e-06
-- u_abc2_pl_out_1               ce_out        1e-06
-- u_abc2_pl_out_2               ce_out        1e-06
-- u_abc3_pl_out_0               ce_out        1e-06
-- u_abc3_pl_out_1               ce_out        1e-06
-- u_abc3_pl_out_2               ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph_src_uz_pmsm_model_9ph
-- Source Path: uz_pmsm_model_9ph/uz_pmsm_model_9ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph_src_uz_pmsm_model_9ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Model_Parameter_reset_integrators :   IN    std_logic;
        Model_Parameter_simulate_mechanics :   IN    std_logic;
        Model_Parameter_switch_pspl       :   IN    std_logic;
        Model_Parameter_control_dq_abc    :   IN    std_logic;
        Physical_Parameter_1_J            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_mu             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_M_R0           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_1_L_d          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_1_L_q          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_R_1            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_polepair       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_psi_pm         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_o1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_o2           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_x1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_y1           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_x2           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_y2           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Physical_Parameter_L_zero         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_general_0                  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_general_1                  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_0               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_1               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_2               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_3               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_4               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_5               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_6               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_7               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_dq_8               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_0              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_1              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_2              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_3              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_4              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_5              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_6              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_7              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        input_voltages_abc_8              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        u_dq_pl_0                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_1                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_2                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_3                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_4                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_5                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_6                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_7                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_dq_pl_8                         :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_0                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_1                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_2                       :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        ce_out                            :   OUT   std_logic;
        output_general_0                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_general_1                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_general_2                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_general_3                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_general_4                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_0              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_1              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_2              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_3              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_4              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_5              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_6              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_7              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_dq_8              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_0             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_1             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_2             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_3             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_4             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_5             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_6             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_7             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        output_currents_abc_8             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc1_pl_out_0                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_out_1                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc1_pl_out_2                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_out_0                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_out_1                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc2_pl_out_2                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_out_0                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_out_1                   :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc3_pl_out_2                   :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
        );
END uz_pmsm_model_9ph_src_uz_pmsm_model_9ph;


ARCHITECTURE rtl OF uz_pmsm_model_9ph_src_uz_pmsm_model_9ph IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT( nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_uz_pmsm_model_9ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_mul_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_signum_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_abs_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_add_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_sub_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_sincos_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out2                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_Transformation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector25(0 TO 8);  -- sfix25_En12 [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          enb_counter                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          out_rsvd                        :   OUT   vector_of_std_logic_vector32(0 TO 8)  -- single [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_div_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_Transformation1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    vector_of_std_logic_vector32(0 TO 8);  -- single [9]
          sin_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          cos_theta_el                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          enb_counter                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          out_rsvd                        :   OUT   vector_of_std_logic_vector43(0 TO 8)  -- sfix43_En28 [9]
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT( nfp_in                          :   IN    std_logic_vector(42 DOWNTO 0);  -- sfix43_En28
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_uz_pmsm_model_9ph_tc
    USE ENTITY work.uz_pmsm_model_9ph_src_uz_pmsm_model_9ph_tc(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_signum_double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_signum_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_abs_double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_abs_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_sub_double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_sub_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_sincos_single
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_sincos_single(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_Transformation
    USE ENTITY work.uz_pmsm_model_9ph_src_Transformation(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_div_double
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_div_double(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_Transformation1
    USE ENTITY work.uz_pmsm_model_9ph_src_Transformation1(rtl);

  FOR ALL : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    USE ENTITY work.uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL Model_Parameter_reset_integrators_1 : std_logic;
  SIGNAL reset_integrators                : std_logic;
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Model_Parameter_switch_pspl_1    : std_logic;
  SIGNAL u_dq_pl                          : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL u_dq_pl_9                        : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL u_dq_pl_10                       : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL control_dq_abc                   : std_logic;
  SIGNAL switch_pspl                      : std_logic;
  SIGNAL Data_Type_Conversion30_out1      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL input_voltages_dq                : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL input_voltages_dq_9              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Switch2_out1                     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL u_abc1_pl                        : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL u_abc1_pl_3                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc1_pl_4                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc2_pl                        : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL u_abc2_pl_3                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc2_pl_4                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc3_pl                        : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL u_abc3_pl_3                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL u_abc3_pl_4                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL input_voltages_abc               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL input_voltages_abc_9             : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL switch_pspl_1                    : std_logic;
  SIGNAL switch_pspl_2                    : std_logic;
  SIGNAL Mux2_out1                        : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Data_Type_Conversion31_out1      : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL Data_Type_Conversion31_out1_1    : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Switch4_out1                     : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Switch4_out1_1                   : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL simulate_mechanics               : std_logic;
  SIGNAL simulate_mechanics_1             : std_logic;
  SIGNAL inputs_general                   : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL inputs_general_2                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL omega_mech                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_mech_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_3              : std_logic;
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Physical_Parameter_polepair_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL polepair                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL R_1                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_q                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL polepair_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mu                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_J                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_4                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_R0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL load_torque                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL load_torque_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL ctr_99_sig                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_iv_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL alpha1_L_d                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_pm                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion9_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_el_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product8_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sign1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Abs_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product12_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum5_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product4_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_d_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product7_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch3_out1                     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL nfp_out_2_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_q                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product3_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_1                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_2                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_2                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_bypass_reg                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_3                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product11_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered10_bypass_reg      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_mech_2                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_3                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_6                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_7                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_8                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL theta_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL theta_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL theta_el_2                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sin_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Cos_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Transformation_out1              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL nfp_out_1_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_op_stage1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_4                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_9                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_11                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_12                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_3                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_d                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_q_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_3                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_4                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL theta_el_3                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mux_out1                         : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Mux_out1_2                       : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t7_bypass_reg                    : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL t7_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Mux_out1_3                       : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL kconst_5                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_3_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_o1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_4                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_13                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_14                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered4_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_15                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_4                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_6                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_4_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_o2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide3_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide2_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_5                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_16                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_17                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered3_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_18                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_5                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_7                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_5_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide5_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide4_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_6                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_6                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_19                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_20                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered6_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_21                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_6                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_8                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_6_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1_1     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide7_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide6_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_7                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_7                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_22                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_23                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered7_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_24                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_7                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_9                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_7_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_x2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide9_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide8_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add4_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_8                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_8                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_25                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_26                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered8_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_27                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_8                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_4                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_10                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_8_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_y2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide11_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide10_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add5_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_9                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_9                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_28                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_29                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered9_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_30                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_9                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_5                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_11                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL nfp_out_9_1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL L_zero                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide13_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide12_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Add6_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_10                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_10                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_11                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_31                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_32                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered5_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_33                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_10                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL psi_6                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion17_out1      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion17_out1_2    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t12_bypass_reg                   : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t12_bypass_reg_next              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion17_out1_3    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Transformation1_out1             : vector_of_std_logic_vector43(0 TO 8);  -- ufix43 [9]
  SIGNAL Data_Type_Conversion6_out1_1     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion6_out1_3     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t11_bypass_reg                   : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL t11_bypass_reg_next              : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Data_Type_Conversion6_out1_4     : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Transformation1_out1_signed      : vector_of_signed43(0 TO 8);  -- sfix43_En28 [9]
  SIGNAL Data_Type_Conversion7_out1_1     : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Demux1_out1                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL t8_bypass_reg                    : vector_of_signed25(0 TO 2);  -- sfix25 [3]
  SIGNAL t8_bypass_reg_next               : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out1_3                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL t9_bypass_reg                    : vector_of_signed25(0 TO 2);  -- sfix25 [3]
  SIGNAL t9_bypass_reg_next               : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out2_3                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3                      : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_2                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL t10_bypass_reg                   : vector_of_signed25(0 TO 2);  -- sfix25 [3]
  SIGNAL t10_bypass_reg_next              : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Demux1_out3_3                    : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]

BEGIN
  -- Input Processing
  -- 
  -- o1 equation
  -- 
  -- DQ equations
  -- 
  -- o2 equation
  -- 
  -- x1 equation
  -- 
  -- y1 equation
  -- 
  -- x2 equation
  -- 
  -- y2 equation
  -- 
  -- zero equation
  -- 
  -- Output Processing

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(0)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_1 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(1)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_2 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(2)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(2)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_3 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(3)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(3)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_4 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(4)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(4)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_5 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(5)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(5)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_6 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(6)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(6)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_7 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(7)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(7)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_25_En12_to_single_8 : uz_pmsm_model_9ph_src_nfp_convert_sfix_25_En12_to_single
    PORT MAP( nfp_in => std_logic_vector(u_dq_pl_10(8)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion30_out1(8)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(0),  -- single
              nfp_out => Data_Type_Conversion31_out1(0)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_1 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(1),  -- single
              nfp_out => Data_Type_Conversion31_out1(1)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_2 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(2),  -- single
              nfp_out => Data_Type_Conversion31_out1(2)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_3 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(3),  -- single
              nfp_out => Data_Type_Conversion31_out1(3)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_4 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(4),  -- single
              nfp_out => Data_Type_Conversion31_out1(4)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_5 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(5),  -- single
              nfp_out => Data_Type_Conversion31_out1(5)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_6 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(6),  -- single
              nfp_out => Data_Type_Conversion31_out1(6)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_7 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(7),  -- single
              nfp_out => Data_Type_Conversion31_out1(7)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single_to_sfix_25_En12_8 : uz_pmsm_model_9ph_src_nfp_convert_single_to_sfix_25_En12
    PORT MAP( nfp_in => input_voltages_abc_9(8),  -- single
              nfp_out => Data_Type_Conversion31_out1(8)  -- sfix25_En12
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => inputs_general_2(1),  -- single
              nfp_out => omega_mech  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_1 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => polepair,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_2 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => R_1,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_uz_pmsm_model_9ph_tc : uz_pmsm_model_9ph_src_uz_pmsm_model_9ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_1 => enb_1_100_1
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_3 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => alpha1_L_q,  -- single
              nfp_out => Data_Type_Conversion12_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_4 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => polepair_1,  -- single
              nfp_out => Data_Type_Conversion3_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_5 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => mu,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_6 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => alpha1_J,  -- single
              nfp_out => Data_Type_Conversion1_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_7 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => M_R0,  -- single
              nfp_out => Data_Type_Conversion2_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_8 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => inputs_general_2(0),  -- single
              nfp_out => load_torque  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_9 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => alpha1_L_d,  -- single
              nfp_out => Data_Type_Conversion11_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_10 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => psi_pm,  -- single
              nfp_out => Data_Type_Conversion9_out1_1  -- double
              );

  u_nfp_mul_comp : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => omega_el_1,  -- double
              nfp_in2 => Delay1_out1,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => I_d,  -- double
              nfp_in2 => Data_Type_Conversion7_out1,  -- double
              nfp_out => Product8_out1  -- double
              );

  u_nfp_signum_comp : uz_pmsm_model_9ph_src_nfp_signum_double
    PORT MAP( nfp_in => Delay1_out1_1,  -- double
              nfp_out => Sign1_out1  -- double
              );

  u_nfp_abs_comp : uz_pmsm_model_9ph_src_nfp_abs_double
    PORT MAP( nfp_in => Delay1_out1_1,  -- double
              nfp_out => Abs_out1  -- double
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion9_out1,  -- double
              nfp_in2 => Abs_out1,  -- double
              nfp_out => Product12_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Product12_out1,  -- double
              nfp_in2 => Data_Type_Conversion1_out1,  -- double
              nfp_out => Sum5_out1  -- double
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Sum5_out1,  -- double
              nfp_in2 => Sign1_out1,  -- double
              nfp_out => Product4_out1  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => i_d_2,  -- double
              nfp_in2 => Delay1_out1,  -- double
              nfp_out => Product2_out1  -- double
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => I_q,  -- double
              nfp_in2 => Data_Type_Conversion7_out1,  -- double
              nfp_out => Product7_out1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Switch_out1,  -- double
              nfp_in2 => Data_Type_Conversion8_out1,  -- double
              nfp_out => omega_el  -- double
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => omega_el,  -- double
              nfp_in2 => Delay1_out1_2,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_11 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(1),  -- single
              nfp_out => nfp_out_2_1_2  -- double
              );

  u_nfp_sub_comp : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_2_1_2,  -- double
              nfp_in2 => Product1_out1,  -- double
              nfp_out => Sum1_op_stage1  -- double
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => Sum1_op_stage1,  -- double
              nfp_in2 => Product7_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_3,  -- double
              nfp_in2 => Sum1_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp_1 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => psi_q,  -- double
              nfp_in2 => Data_Type_Conversion12_out1,  -- double
              nfp_out => I_q  -- double
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Delay1_out1_2,  -- double
              nfp_in2 => I_q,  -- double
              nfp_out => Product3_out1  -- double
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => Product3_out1,  -- double
              nfp_in2 => Product2_out1,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_2,  -- double
              nfp_in2 => Sum3_out1_1,  -- double
              nfp_out => M_Mi  -- double
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => M_Mi_1,  -- double
              nfp_in2 => Data_Type_Conversion3_out1,  -- double
              nfp_out => M_Mi_2  -- double
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => M_Mi_2,  -- double
              nfp_in2 => Product4_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => Sum_out1_3,  -- double
              nfp_in2 => load_torque_1,  -- double
              nfp_out => Sum1_out1_1  -- double
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion2_out1,  -- double
              nfp_in2 => Sum1_out1_1,  -- double
              nfp_out => Product11_out1  -- double
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_4,  -- double
              nfp_in2 => Product11_out1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => omega_mech_2,  -- double
              nfp_in2 => Data_Type_Conversion3_out1,  -- double
              nfp_out => Divide_out1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_1,  -- double
              nfp_in2 => Divide_out1,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_3 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_3,  -- double
              nfp_out => Sum3_out1_3  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Delay1_out1_3,  -- double
              nfp_out => theta_el  -- single
              );

  u_nfp_sincos_comp : uz_pmsm_model_9ph_src_nfp_sincos_single
    PORT MAP( nfp_in => theta_el_2,  -- single
              nfp_out1 => Sin_out1,  -- single
              nfp_out2 => Cos_out1  -- single
              );

  u_Transformation : uz_pmsm_model_9ph_src_Transformation
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_rsvd => Switch4_out1_1,  -- sfix25_En12 [9]
              sin_theta_el => Sin_out1,  -- single
              cos_theta_el => Cos_out1,  -- single
              enb_counter => std_logic_vector(ctr_99_sig),  -- ufix8
              out_rsvd => Transformation_out1  -- single [9]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_12 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(0),  -- single
              nfp_out => nfp_out_1_1_2  -- double
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_1_1_2,  -- double
              nfp_in2 => Product8_out1,  -- double
              nfp_out => Sum_op_stage1  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Sum_op_stage1,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => Sum_out1_4  -- double
              );

  u_nfp_mul_comp_17 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst,  -- double
              nfp_in2 => Sum_out1_4,  -- double
              nfp_out => Gain_out1_3  -- double
              );

  u_nfp_add_comp_5 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_3,  -- double
              nfp_in2 => Delay1_out1_2,  -- double
              nfp_out => Sum3_out1_4  -- double
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => psi_d,  -- double
              nfp_in2 => Data_Type_Conversion9_out1_1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_18 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion11_out1,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => I_d  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_1 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => I_d,  -- double
              nfp_out => Mux_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_2 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => i_q_2,  -- double
              nfp_out => Mux_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_3 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => M_Mi_4,  -- double
              nfp_out => Mux_out1(2)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_4 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => omega_mech_2,  -- double
              nfp_out => Mux_out1(3)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_5 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => I_d,  -- double
              nfp_out => Data_Type_Conversion17_out1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_6 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => I_q,  -- double
              nfp_out => Data_Type_Conversion17_out1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_13 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(2),  -- single
              nfp_out => nfp_out_3_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_14 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_o1,  -- single
              nfp_out => Data_Type_Conversion10_out1  -- double
              );

  u_nfp_mul_comp_19 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide1_out1,  -- double
              nfp_out => Divide_out1_1  -- double
              );

  u_nfp_sub_comp_7 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_3_1_2,  -- double
              nfp_in2 => Divide_out1_1,  -- double
              nfp_out => Add_out1  -- double
              );

  u_nfp_mul_comp_20 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_5,  -- double
              nfp_in2 => Add_out1,  -- double
              nfp_out => Gain_out1_4  -- double
              );

  u_nfp_add_comp_6 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_4,  -- double
              nfp_in2 => Delay1_out1_4,  -- double
              nfp_out => Sum3_out1_5  -- double
              );

  u_nfp_div_comp : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi,  -- double
              nfp_in2 => Data_Type_Conversion10_out1,  -- double
              nfp_out => Divide1_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_7 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide1_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(2)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_15 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(3),  -- single
              nfp_out => nfp_out_4_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_16 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_o2,  -- single
              nfp_out => Data_Type_Conversion1_out1_1  -- double
              );

  u_nfp_mul_comp_21 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide3_out1,  -- double
              nfp_out => Divide2_out1  -- double
              );

  u_nfp_sub_comp_8 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_4_1_2,  -- double
              nfp_in2 => Divide2_out1,  -- double
              nfp_out => Add1_out1  -- double
              );

  u_nfp_mul_comp_22 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_6,  -- double
              nfp_in2 => Add1_out1,  -- double
              nfp_out => Gain_out1_5  -- double
              );

  u_nfp_add_comp_7 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_5,  -- double
              nfp_in2 => Delay1_out1_5,  -- double
              nfp_out => Sum3_out1_6  -- double
              );

  u_nfp_div_comp_1 : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi_1,  -- double
              nfp_in2 => Data_Type_Conversion1_out1_1,  -- double
              nfp_out => Divide3_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_8 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide3_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(3)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_17 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(4),  -- single
              nfp_out => nfp_out_5_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_18 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_x1,  -- single
              nfp_out => Data_Type_Conversion2_out1_1  -- double
              );

  u_nfp_mul_comp_23 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide5_out1,  -- double
              nfp_out => Divide4_out1  -- double
              );

  u_nfp_sub_comp_9 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_5_1_2,  -- double
              nfp_in2 => Divide4_out1,  -- double
              nfp_out => Add2_out1  -- double
              );

  u_nfp_mul_comp_24 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_7,  -- double
              nfp_in2 => Add2_out1,  -- double
              nfp_out => Gain_out1_6  -- double
              );

  u_nfp_add_comp_8 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_6,  -- double
              nfp_in2 => Delay1_out1_6,  -- double
              nfp_out => Sum3_out1_7  -- double
              );

  u_nfp_div_comp_2 : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi_2,  -- double
              nfp_in2 => Data_Type_Conversion2_out1_1,  -- double
              nfp_out => Divide5_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_9 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide5_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(4)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_19 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(5),  -- single
              nfp_out => nfp_out_6_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_20 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_y1,  -- single
              nfp_out => Data_Type_Conversion3_out1_1  -- double
              );

  u_nfp_mul_comp_25 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide7_out1,  -- double
              nfp_out => Divide6_out1  -- double
              );

  u_nfp_sub_comp_10 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_6_1_2,  -- double
              nfp_in2 => Divide6_out1,  -- double
              nfp_out => Add3_out1  -- double
              );

  u_nfp_mul_comp_26 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_8,  -- double
              nfp_in2 => Add3_out1,  -- double
              nfp_out => Gain_out1_7  -- double
              );

  u_nfp_add_comp_9 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_7,  -- double
              nfp_in2 => Delay1_out1_7,  -- double
              nfp_out => Sum3_out1_8  -- double
              );

  u_nfp_div_comp_3 : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi_3,  -- double
              nfp_in2 => Data_Type_Conversion3_out1_1,  -- double
              nfp_out => Divide7_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_10 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide7_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(5)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_21 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(6),  -- single
              nfp_out => nfp_out_7_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_22 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_x2,  -- single
              nfp_out => Data_Type_Conversion4_out1  -- double
              );

  u_nfp_mul_comp_27 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide9_out1,  -- double
              nfp_out => Divide8_out1  -- double
              );

  u_nfp_sub_comp_11 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_7_1_2,  -- double
              nfp_in2 => Divide8_out1,  -- double
              nfp_out => Add4_out1  -- double
              );

  u_nfp_mul_comp_28 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_9,  -- double
              nfp_in2 => Add4_out1,  -- double
              nfp_out => Gain_out1_8  -- double
              );

  u_nfp_add_comp_10 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_8,  -- double
              nfp_in2 => Delay1_out1_8,  -- double
              nfp_out => Sum3_out1_9  -- double
              );

  u_nfp_div_comp_4 : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi_4,  -- double
              nfp_in2 => Data_Type_Conversion4_out1,  -- double
              nfp_out => Divide9_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_11 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide9_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(6)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_23 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(7),  -- single
              nfp_out => nfp_out_8_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_24 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_y2,  -- single
              nfp_out => Data_Type_Conversion5_out1  -- double
              );

  u_nfp_mul_comp_29 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide11_out1,  -- double
              nfp_out => Divide10_out1  -- double
              );

  u_nfp_sub_comp_12 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_8_1_2,  -- double
              nfp_in2 => Divide10_out1,  -- double
              nfp_out => Add5_out1  -- double
              );

  u_nfp_mul_comp_30 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_10,  -- double
              nfp_in2 => Add5_out1,  -- double
              nfp_out => Gain_out1_9  -- double
              );

  u_nfp_add_comp_11 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_9,  -- double
              nfp_in2 => Delay1_out1_9,  -- double
              nfp_out => Sum3_out1_10  -- double
              );

  u_nfp_div_comp_5 : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi_5,  -- double
              nfp_in2 => Data_Type_Conversion5_out1,  -- double
              nfp_out => Divide11_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_12 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide11_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(7)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_25 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => Switch3_out1(8),  -- single
              nfp_out => nfp_out_9_1_2  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_single2double_26 : uz_pmsm_model_9ph_src_nfp_convert_single2double
    PORT MAP( nfp_in => L_zero,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_nfp_mul_comp_31 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Divide13_out1,  -- double
              nfp_out => Divide12_out1  -- double
              );

  u_nfp_sub_comp_13 : uz_pmsm_model_9ph_src_nfp_sub_double
    PORT MAP( nfp_in1 => nfp_out_9_1_2,  -- double
              nfp_in2 => Divide12_out1,  -- double
              nfp_out => Add6_out1  -- double
              );

  u_nfp_mul_comp_32 : uz_pmsm_model_9ph_src_nfp_mul_double
    PORT MAP( nfp_in1 => kconst_11,  -- double
              nfp_in2 => Add6_out1,  -- double
              nfp_out => Gain_out1_10  -- double
              );

  u_nfp_add_comp_12 : uz_pmsm_model_9ph_src_nfp_add_double
    PORT MAP( nfp_in1 => Gain_out1_10,  -- double
              nfp_in2 => Delay1_out1_10,  -- double
              nfp_out => Sum3_out1_11  -- double
              );

  u_nfp_div_comp_6 : uz_pmsm_model_9ph_src_nfp_div_double
    PORT MAP( nfp_in1 => psi_6,  -- double
              nfp_in2 => Data_Type_Conversion6_out1,  -- double
              nfp_out => Divide13_out1  -- double
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_double2single_13 : uz_pmsm_model_9ph_src_nfp_convert_double2single
    PORT MAP( nfp_in => Divide13_out1,  -- double
              nfp_out => Data_Type_Conversion17_out1(8)  -- single
              );

  u_Transformation1 : uz_pmsm_model_9ph_src_Transformation1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_rsvd => Data_Type_Conversion17_out1,  -- single [9]
              sin_theta_el => Sin_out1,  -- single
              cos_theta_el => Cos_out1,  -- single
              enb_counter => std_logic_vector(ctr_99_sig),  -- ufix8
              out_rsvd => Transformation1_out1  -- sfix43_En28 [9]
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(0),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(0)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_1 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(1),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(1)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_2 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(2),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(2)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_3 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(3),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(3)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_4 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(4),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(4)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_5 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(5),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(5)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_6 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(6),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(6)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_7 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(7),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(7)  -- single
              );

  u_uz_pmsm_model_9ph_uz_pmsm_model_9ph_nfp_convert_sfix_43_En28_to_single_8 : uz_pmsm_model_9ph_src_nfp_convert_sfix_43_En28_to_single
    PORT MAP( nfp_in => Transformation1_out1(8),  -- sfix43_En28
              nfp_out => Data_Type_Conversion6_out1_1(8)  -- single
              );

  Model_Parameter_reset_integrators_1 <= Model_Parameter_reset_integrators;

  reset_integrators <= Model_Parameter_reset_integrators_1;

  kconst <= X"3eb0c6f7a0b5ed8d";

  Model_Parameter_switch_pspl_1 <= Model_Parameter_switch_pspl;

  u_dq_pl(0) <= u_dq_pl_0;
  u_dq_pl(1) <= u_dq_pl_1;
  u_dq_pl(2) <= u_dq_pl_2;
  u_dq_pl(3) <= u_dq_pl_3;
  u_dq_pl(4) <= u_dq_pl_4;
  u_dq_pl(5) <= u_dq_pl_5;
  u_dq_pl(6) <= u_dq_pl_6;
  u_dq_pl(7) <= u_dq_pl_7;
  u_dq_pl(8) <= u_dq_pl_8;

  outputgen6: FOR k IN 0 TO 8 GENERATE
    u_dq_pl_9(k) <= signed(u_dq_pl(k));
  END GENERATE;

  u_dq_pl_10 <= u_dq_pl_9;

  control_dq_abc <= Model_Parameter_control_dq_abc;

  switch_pspl <= Model_Parameter_switch_pspl_1;


  input_voltages_dq(0) <= input_voltages_dq_0;
  input_voltages_dq(1) <= input_voltages_dq_1;
  input_voltages_dq(2) <= input_voltages_dq_2;
  input_voltages_dq(3) <= input_voltages_dq_3;
  input_voltages_dq(4) <= input_voltages_dq_4;
  input_voltages_dq(5) <= input_voltages_dq_5;
  input_voltages_dq(6) <= input_voltages_dq_6;
  input_voltages_dq(7) <= input_voltages_dq_7;
  input_voltages_dq(8) <= input_voltages_dq_8;

  input_voltages_dq_9 <= input_voltages_dq;

  
  Switch2_out1(0) <= Data_Type_Conversion30_out1(0) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(0);
  
  Switch2_out1(1) <= Data_Type_Conversion30_out1(1) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(1);
  
  Switch2_out1(2) <= Data_Type_Conversion30_out1(2) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(2);
  
  Switch2_out1(3) <= Data_Type_Conversion30_out1(3) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(3);
  
  Switch2_out1(4) <= Data_Type_Conversion30_out1(4) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(4);
  
  Switch2_out1(5) <= Data_Type_Conversion30_out1(5) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(5);
  
  Switch2_out1(6) <= Data_Type_Conversion30_out1(6) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(6);
  
  Switch2_out1(7) <= Data_Type_Conversion30_out1(7) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(7);
  
  Switch2_out1(8) <= Data_Type_Conversion30_out1(8) WHEN switch_pspl = '0' ELSE
      input_voltages_dq_9(8);

  u_abc1_pl(0) <= u_abc1_pl_0;
  u_abc1_pl(1) <= u_abc1_pl_1;
  u_abc1_pl(2) <= u_abc1_pl_2;

  outputgen5: FOR k IN 0 TO 2 GENERATE
    u_abc1_pl_3(k) <= signed(u_abc1_pl(k));
  END GENERATE;

  u_abc1_pl_4 <= u_abc1_pl_3;

  u_abc2_pl(0) <= u_abc2_pl_0;
  u_abc2_pl(1) <= u_abc2_pl_1;
  u_abc2_pl(2) <= u_abc2_pl_2;

  outputgen4: FOR k IN 0 TO 2 GENERATE
    u_abc2_pl_3(k) <= signed(u_abc2_pl(k));
  END GENERATE;

  u_abc2_pl_4 <= u_abc2_pl_3;

  u_abc3_pl(0) <= u_abc3_pl_0;
  u_abc3_pl(1) <= u_abc3_pl_1;
  u_abc3_pl(2) <= u_abc3_pl_2;

  outputgen3: FOR k IN 0 TO 2 GENERATE
    u_abc3_pl_3(k) <= signed(u_abc3_pl(k));
  END GENERATE;

  u_abc3_pl_4 <= u_abc3_pl_3;

  input_voltages_abc(0) <= input_voltages_abc_0;
  input_voltages_abc(1) <= input_voltages_abc_1;
  input_voltages_abc(2) <= input_voltages_abc_2;
  input_voltages_abc(3) <= input_voltages_abc_3;
  input_voltages_abc(4) <= input_voltages_abc_4;
  input_voltages_abc(5) <= input_voltages_abc_5;
  input_voltages_abc(6) <= input_voltages_abc_6;
  input_voltages_abc(7) <= input_voltages_abc_7;
  input_voltages_abc(8) <= input_voltages_abc_8;

  input_voltages_abc_9 <= input_voltages_abc;

  switch_pspl_1 <= Model_Parameter_switch_pspl_1;

  switch_pspl_2 <= switch_pspl_1;

  Mux2_out1(0) <= u_abc1_pl_4(0);
  Mux2_out1(1) <= u_abc1_pl_4(1);
  Mux2_out1(2) <= u_abc1_pl_4(2);
  Mux2_out1(3) <= u_abc2_pl_4(0);
  Mux2_out1(4) <= u_abc2_pl_4(1);
  Mux2_out1(5) <= u_abc2_pl_4(2);
  Mux2_out1(6) <= u_abc3_pl_4(0);
  Mux2_out1(7) <= u_abc3_pl_4(1);
  Mux2_out1(8) <= u_abc3_pl_4(2);


  outputgen2: FOR k IN 0 TO 8 GENERATE
    Data_Type_Conversion31_out1_1(k) <= signed(Data_Type_Conversion31_out1(k));
  END GENERATE;

  
  Switch4_out1(0) <= Mux2_out1(0) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(0);
  
  Switch4_out1(1) <= Mux2_out1(1) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(1);
  
  Switch4_out1(2) <= Mux2_out1(2) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(2);
  
  Switch4_out1(3) <= Mux2_out1(3) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(3);
  
  Switch4_out1(4) <= Mux2_out1(4) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(4);
  
  Switch4_out1(5) <= Mux2_out1(5) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(5);
  
  Switch4_out1(6) <= Mux2_out1(6) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(6);
  
  Switch4_out1(7) <= Mux2_out1(7) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(7);
  
  Switch4_out1(8) <= Mux2_out1(8) WHEN switch_pspl_2 = '0' ELSE
      Data_Type_Conversion31_out1_1(8);

  outputgen1: FOR k IN 0 TO 8 GENERATE
    Switch4_out1_1(k) <= std_logic_vector(Switch4_out1(k));
  END GENERATE;

  reset_integrators_1 <= Model_Parameter_reset_integrators_1;

  reset_integrators_2 <= reset_integrators_1;

  kconst_1 <= X"3eb0c6f7a0b5ed8d";

  simulate_mechanics <= Model_Parameter_simulate_mechanics;

  simulate_mechanics_1 <= simulate_mechanics;

  inputs_general(0) <= inputs_general_0;
  inputs_general(1) <= inputs_general_1;

  inputs_general_2 <= inputs_general;

  omega_mech_1 <= omega_mech;

  reset_integrators_3 <= Model_Parameter_reset_integrators_1;

  kconst_2 <= X"4012000000000000";

  kconst_3 <= X"3eb0c6f7a0b5ed8d";

  Physical_Parameter_polepair_1 <= Physical_Parameter_polepair;

  polepair <= Physical_Parameter_polepair_1;

  R_1 <= Physical_Parameter_R_1;

  Delay1_iv <= X"0000000000000000";

  alpha1_L_q <= Physical_Parameter_1_L_q;

  polepair_1 <= Physical_Parameter_polepair_1;

  mu <= Physical_Parameter_mu;

  alpha1_J <= Physical_Parameter_1_J;

  kconst_4 <= X"3eb0c6f7a0b5ed8d";

  M_R0 <= Physical_Parameter_M_R0;

  load_torque_1 <= load_torque;

  Delay1_iv_1 <= X"0000000000000000";

  Delay1_iv_2 <= X"0000000000000000";

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 99
  ctr_99_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ctr_99_sig <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF ctr_99_sig >= to_unsigned(16#63#, 8) THEN 
          ctr_99_sig <= to_unsigned(16#00#, 8);
        ELSE 
          ctr_99_sig <= ctr_99_sig + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_99_process;


  Delay1_iv_3 <= X"0000000000000000";

  alpha1_L_d <= Physical_Parameter_1_L_d;

  psi_pm <= Physical_Parameter_psi_pm;

  omega_el_1 <= omega_el;

  I_d_1 <= I_d;

  i_d_2 <= I_d_1;

  
  Switch_out1 <= omega_mech_1 WHEN simulate_mechanics_1 = '0' ELSE
      Delay1_out1_1;

  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators = '0' ELSE
      Delay1_iv;

  Delay1_toDel1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_1 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_1 <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_toDel1_process;


  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_2 <= Delay1_toDel_1 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut <= Delay1_toDel_2;

  
  Delay1_out1 <= Delay1_delOut WHEN reset_integrators = '0' ELSE
      Delay1_iv;

  psi_q <= Delay1_out1;

  M_Mi_1 <= M_Mi;

  Sum_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Sum_out1_2 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Sum_out1_2 <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Sum_out1_1_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay_bypass_reg <= Sum_out1_2;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Sum_out1_3 <= Sum_out1_2 WHEN enb_1_100_1 = '1' ELSE
      Delay_bypass_reg;

  
  Delay1_toDel_3 <= Sum3_out1_2 WHEN reset_integrators_3 = '0' ELSE
      Delay1_iv_1;

  Delay1_toDel10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_4 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_4 <= Delay1_toDel_3;
      END IF;
    END IF;
  END PROCESS Delay1_toDel10_process;


  Delay1_lowered10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered10_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered10_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered10_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered10_bypass_reg;

  Delay1_delOut_1 <= Delay1_toDel_5;

  
  Delay1_out1_1 <= Delay1_delOut_1 WHEN reset_integrators_3 = '0' ELSE
      Delay1_iv_1;

  
  omega_mech_2 <= omega_mech_1 WHEN simulate_mechanics_1 = '0' ELSE
      Delay1_out1_1;

  
  Delay1_toDel_6 <= Sum3_out1_3 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  Delay1_toDel9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_7 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_7 <= Delay1_toDel_6;
      END IF;
    END IF;
  END PROCESS Delay1_toDel9_process;


  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel_7;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_8 <= Delay1_toDel_7 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_8;

  
  Delay1_out1_3 <= Delay1_delOut_2 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  theta_el_1 <= theta_el;

  theta_el_2 <= theta_el_1;

  
  Switch3_out1(0) <= Switch2_out1(0) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(0);
  
  Switch3_out1(1) <= Switch2_out1(1) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(1);
  
  Switch3_out1(2) <= Switch2_out1(2) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(2);
  
  Switch3_out1(3) <= Switch2_out1(3) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(3);
  
  Switch3_out1(4) <= Switch2_out1(4) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(4);
  
  Switch3_out1(5) <= Switch2_out1(5) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(5);
  
  Switch3_out1(6) <= Switch2_out1(6) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(6);
  
  Switch3_out1(7) <= Switch2_out1(7) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(7);
  
  Switch3_out1(8) <= Switch2_out1(8) WHEN control_dq_abc = '0' ELSE
      Transformation_out1(8);

  
  Delay1_toDel_9 <= Sum3_out1_4 WHEN reset_integrators = '0' ELSE
      Delay1_iv_3;

  Delay1_toDel_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_11 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_11 <= Delay1_toDel_9;
      END IF;
    END IF;
  END PROCESS Delay1_toDel_10_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel_11;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_12 <= Delay1_toDel_11 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut_3 <= Delay1_toDel_12;

  
  Delay1_out1_2 <= Delay1_delOut_3 WHEN reset_integrators = '0' ELSE
      Delay1_iv_3;

  psi_d <= Delay1_out1_2;

  I_q_1 <= I_q;

  i_q_2 <= I_q_1;

  M_Mi_3 <= M_Mi_2;

  M_Mi_4 <= M_Mi_3;

  theta_el_3 <= theta_el;

  Mux_out1(4) <= theta_el_3;

  Mux_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Mux_out1_2(0) <= X"00000000";
        Mux_out1_2(1) <= X"00000000";
        Mux_out1_2(2) <= X"00000000";
        Mux_out1_2(3) <= X"00000000";
        Mux_out1_2(4) <= X"00000000";
      ELSIF enb = '1' THEN
        Mux_out1_2(0) <= Mux_out1(0);
        Mux_out1_2(1) <= Mux_out1(1);
        Mux_out1_2(2) <= Mux_out1(2);
        Mux_out1_2(3) <= Mux_out1(3);
        Mux_out1_2(4) <= Mux_out1(4);
      END IF;
    END IF;
  END PROCESS Mux_out1_1_process;


  t7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t7_bypass_reg(0) <= X"00000000";
        t7_bypass_reg(1) <= X"00000000";
        t7_bypass_reg(2) <= X"00000000";
        t7_bypass_reg(3) <= X"00000000";
        t7_bypass_reg(4) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t7_bypass_reg(0) <= t7_bypass_reg_next(0);
        t7_bypass_reg(1) <= t7_bypass_reg_next(1);
        t7_bypass_reg(2) <= t7_bypass_reg_next(2);
        t7_bypass_reg(3) <= t7_bypass_reg_next(3);
        t7_bypass_reg(4) <= t7_bypass_reg_next(4);
      END IF;
    END IF;
  END PROCESS t7_bypass_process;

  
  Mux_out1_3(0) <= Mux_out1_2(0) WHEN enb_1_100_1 = '1' ELSE
      t7_bypass_reg(0);
  
  Mux_out1_3(1) <= Mux_out1_2(1) WHEN enb_1_100_1 = '1' ELSE
      t7_bypass_reg(1);
  
  Mux_out1_3(2) <= Mux_out1_2(2) WHEN enb_1_100_1 = '1' ELSE
      t7_bypass_reg(2);
  
  Mux_out1_3(3) <= Mux_out1_2(3) WHEN enb_1_100_1 = '1' ELSE
      t7_bypass_reg(3);
  
  Mux_out1_3(4) <= Mux_out1_2(4) WHEN enb_1_100_1 = '1' ELSE
      t7_bypass_reg(4);
  t7_bypass_reg_next(0) <= Mux_out1_2(0);
  t7_bypass_reg_next(1) <= Mux_out1_2(1);
  t7_bypass_reg_next(2) <= Mux_out1_2(2);
  t7_bypass_reg_next(3) <= Mux_out1_2(3);
  t7_bypass_reg_next(4) <= Mux_out1_2(4);

  kconst_5 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_4 <= X"0000000000000000";

  L_o1 <= Physical_Parameter_L_o1;

  
  Delay1_toDel_13 <= Sum3_out1_5 WHEN reset_integrators = '0' ELSE
      Delay1_iv_4;

  Delay1_toDel3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_14 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_14 <= Delay1_toDel_13;
      END IF;
    END IF;
  END PROCESS Delay1_toDel3_process;


  Delay1_lowered4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered4_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered4_bypass_reg <= Delay1_toDel_14;
      END IF;
    END IF;
  END PROCESS Delay1_lowered4_bypass_process;

  
  Delay1_toDel_15 <= Delay1_toDel_14 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered4_bypass_reg;

  Delay1_delOut_4 <= Delay1_toDel_15;

  
  Delay1_out1_4 <= Delay1_delOut_4 WHEN reset_integrators = '0' ELSE
      Delay1_iv_4;

  psi <= Delay1_out1_4;

  kconst_6 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_5 <= X"0000000000000000";

  L_o2 <= Physical_Parameter_L_o2;

  
  Delay1_toDel_16 <= Sum3_out1_6 WHEN reset_integrators = '0' ELSE
      Delay1_iv_5;

  Delay1_toDel2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_17 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_17 <= Delay1_toDel_16;
      END IF;
    END IF;
  END PROCESS Delay1_toDel2_process;


  Delay1_lowered3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered3_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered3_bypass_reg <= Delay1_toDel_17;
      END IF;
    END IF;
  END PROCESS Delay1_lowered3_bypass_process;

  
  Delay1_toDel_18 <= Delay1_toDel_17 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered3_bypass_reg;

  Delay1_delOut_5 <= Delay1_toDel_18;

  
  Delay1_out1_5 <= Delay1_delOut_5 WHEN reset_integrators = '0' ELSE
      Delay1_iv_5;

  psi_1 <= Delay1_out1_5;

  kconst_7 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_6 <= X"0000000000000000";

  L_x1 <= Physical_Parameter_L_x1;

  
  Delay1_toDel_19 <= Sum3_out1_7 WHEN reset_integrators = '0' ELSE
      Delay1_iv_6;

  Delay1_toDel5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_20 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_20 <= Delay1_toDel_19;
      END IF;
    END IF;
  END PROCESS Delay1_toDel5_process;


  Delay1_lowered6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered6_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered6_bypass_reg <= Delay1_toDel_20;
      END IF;
    END IF;
  END PROCESS Delay1_lowered6_bypass_process;

  
  Delay1_toDel_21 <= Delay1_toDel_20 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered6_bypass_reg;

  Delay1_delOut_6 <= Delay1_toDel_21;

  
  Delay1_out1_6 <= Delay1_delOut_6 WHEN reset_integrators = '0' ELSE
      Delay1_iv_6;

  psi_2 <= Delay1_out1_6;

  kconst_8 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_7 <= X"0000000000000000";

  L_y1 <= Physical_Parameter_L_y1;

  
  Delay1_toDel_22 <= Sum3_out1_8 WHEN reset_integrators = '0' ELSE
      Delay1_iv_7;

  Delay1_toDel6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_23 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_23 <= Delay1_toDel_22;
      END IF;
    END IF;
  END PROCESS Delay1_toDel6_process;


  Delay1_lowered7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered7_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered7_bypass_reg <= Delay1_toDel_23;
      END IF;
    END IF;
  END PROCESS Delay1_lowered7_bypass_process;

  
  Delay1_toDel_24 <= Delay1_toDel_23 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered7_bypass_reg;

  Delay1_delOut_7 <= Delay1_toDel_24;

  
  Delay1_out1_7 <= Delay1_delOut_7 WHEN reset_integrators = '0' ELSE
      Delay1_iv_7;

  psi_3 <= Delay1_out1_7;

  kconst_9 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_8 <= X"0000000000000000";

  L_x2 <= Physical_Parameter_L_x2;

  
  Delay1_toDel_25 <= Sum3_out1_9 WHEN reset_integrators = '0' ELSE
      Delay1_iv_8;

  Delay1_toDel7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_26 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_26 <= Delay1_toDel_25;
      END IF;
    END IF;
  END PROCESS Delay1_toDel7_process;


  Delay1_lowered8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered8_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered8_bypass_reg <= Delay1_toDel_26;
      END IF;
    END IF;
  END PROCESS Delay1_lowered8_bypass_process;

  
  Delay1_toDel_27 <= Delay1_toDel_26 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered8_bypass_reg;

  Delay1_delOut_8 <= Delay1_toDel_27;

  
  Delay1_out1_8 <= Delay1_delOut_8 WHEN reset_integrators = '0' ELSE
      Delay1_iv_8;

  psi_4 <= Delay1_out1_8;

  kconst_10 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_9 <= X"0000000000000000";

  L_y2 <= Physical_Parameter_L_y2;

  
  Delay1_toDel_28 <= Sum3_out1_10 WHEN reset_integrators = '0' ELSE
      Delay1_iv_9;

  Delay1_toDel8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_29 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_29 <= Delay1_toDel_28;
      END IF;
    END IF;
  END PROCESS Delay1_toDel8_process;


  Delay1_lowered9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered9_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered9_bypass_reg <= Delay1_toDel_29;
      END IF;
    END IF;
  END PROCESS Delay1_lowered9_bypass_process;

  
  Delay1_toDel_30 <= Delay1_toDel_29 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered9_bypass_reg;

  Delay1_delOut_9 <= Delay1_toDel_30;

  
  Delay1_out1_9 <= Delay1_delOut_9 WHEN reset_integrators = '0' ELSE
      Delay1_iv_9;

  psi_5 <= Delay1_out1_9;

  kconst_11 <= X"3eb0c6f7a0b5ed8d";

  Delay1_iv_10 <= X"0000000000000000";

  L_zero <= Physical_Parameter_L_zero;

  
  Delay1_toDel_31 <= Sum3_out1_11 WHEN reset_integrators = '0' ELSE
      Delay1_iv_10;

  Delay1_toDel4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_toDel_32 <= X"0000000000000000";
      ELSIF enb = '1' THEN
        Delay1_toDel_32 <= Delay1_toDel_31;
      END IF;
    END IF;
  END PROCESS Delay1_toDel4_process;


  Delay1_lowered5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered5_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_100_1 = '1' THEN
        Delay1_lowered5_bypass_reg <= Delay1_toDel_32;
      END IF;
    END IF;
  END PROCESS Delay1_lowered5_bypass_process;

  
  Delay1_toDel_33 <= Delay1_toDel_32 WHEN enb_1_100_1 = '1' ELSE
      Delay1_lowered5_bypass_reg;

  Delay1_delOut_10 <= Delay1_toDel_33;

  
  Delay1_out1_10 <= Delay1_delOut_10 WHEN reset_integrators = '0' ELSE
      Delay1_iv_10;

  psi_6 <= Delay1_out1_10;


  Data_Type_Conversion17_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion17_out1_2(0) <= X"00000000";
        Data_Type_Conversion17_out1_2(1) <= X"00000000";
        Data_Type_Conversion17_out1_2(2) <= X"00000000";
        Data_Type_Conversion17_out1_2(3) <= X"00000000";
        Data_Type_Conversion17_out1_2(4) <= X"00000000";
        Data_Type_Conversion17_out1_2(5) <= X"00000000";
        Data_Type_Conversion17_out1_2(6) <= X"00000000";
        Data_Type_Conversion17_out1_2(7) <= X"00000000";
        Data_Type_Conversion17_out1_2(8) <= X"00000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion17_out1_2(0) <= Data_Type_Conversion17_out1(0);
        Data_Type_Conversion17_out1_2(1) <= Data_Type_Conversion17_out1(1);
        Data_Type_Conversion17_out1_2(2) <= Data_Type_Conversion17_out1(2);
        Data_Type_Conversion17_out1_2(3) <= Data_Type_Conversion17_out1(3);
        Data_Type_Conversion17_out1_2(4) <= Data_Type_Conversion17_out1(4);
        Data_Type_Conversion17_out1_2(5) <= Data_Type_Conversion17_out1(5);
        Data_Type_Conversion17_out1_2(6) <= Data_Type_Conversion17_out1(6);
        Data_Type_Conversion17_out1_2(7) <= Data_Type_Conversion17_out1(7);
        Data_Type_Conversion17_out1_2(8) <= Data_Type_Conversion17_out1(8);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion17_out1_1_process;


  t12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t12_bypass_reg(0) <= X"00000000";
        t12_bypass_reg(1) <= X"00000000";
        t12_bypass_reg(2) <= X"00000000";
        t12_bypass_reg(3) <= X"00000000";
        t12_bypass_reg(4) <= X"00000000";
        t12_bypass_reg(5) <= X"00000000";
        t12_bypass_reg(6) <= X"00000000";
        t12_bypass_reg(7) <= X"00000000";
        t12_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t12_bypass_reg(0) <= t12_bypass_reg_next(0);
        t12_bypass_reg(1) <= t12_bypass_reg_next(1);
        t12_bypass_reg(2) <= t12_bypass_reg_next(2);
        t12_bypass_reg(3) <= t12_bypass_reg_next(3);
        t12_bypass_reg(4) <= t12_bypass_reg_next(4);
        t12_bypass_reg(5) <= t12_bypass_reg_next(5);
        t12_bypass_reg(6) <= t12_bypass_reg_next(6);
        t12_bypass_reg(7) <= t12_bypass_reg_next(7);
        t12_bypass_reg(8) <= t12_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t12_bypass_process;

  
  Data_Type_Conversion17_out1_3(0) <= Data_Type_Conversion17_out1_2(0) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(0);
  
  Data_Type_Conversion17_out1_3(1) <= Data_Type_Conversion17_out1_2(1) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(1);
  
  Data_Type_Conversion17_out1_3(2) <= Data_Type_Conversion17_out1_2(2) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(2);
  
  Data_Type_Conversion17_out1_3(3) <= Data_Type_Conversion17_out1_2(3) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(3);
  
  Data_Type_Conversion17_out1_3(4) <= Data_Type_Conversion17_out1_2(4) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(4);
  
  Data_Type_Conversion17_out1_3(5) <= Data_Type_Conversion17_out1_2(5) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(5);
  
  Data_Type_Conversion17_out1_3(6) <= Data_Type_Conversion17_out1_2(6) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(6);
  
  Data_Type_Conversion17_out1_3(7) <= Data_Type_Conversion17_out1_2(7) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(7);
  
  Data_Type_Conversion17_out1_3(8) <= Data_Type_Conversion17_out1_2(8) WHEN enb_1_100_1 = '1' ELSE
      t12_bypass_reg(8);
  t12_bypass_reg_next(0) <= Data_Type_Conversion17_out1_2(0);
  t12_bypass_reg_next(1) <= Data_Type_Conversion17_out1_2(1);
  t12_bypass_reg_next(2) <= Data_Type_Conversion17_out1_2(2);
  t12_bypass_reg_next(3) <= Data_Type_Conversion17_out1_2(3);
  t12_bypass_reg_next(4) <= Data_Type_Conversion17_out1_2(4);
  t12_bypass_reg_next(5) <= Data_Type_Conversion17_out1_2(5);
  t12_bypass_reg_next(6) <= Data_Type_Conversion17_out1_2(6);
  t12_bypass_reg_next(7) <= Data_Type_Conversion17_out1_2(7);
  t12_bypass_reg_next(8) <= Data_Type_Conversion17_out1_2(8);


  Data_Type_Conversion6_out1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Data_Type_Conversion6_out1_3(0) <= X"00000000";
        Data_Type_Conversion6_out1_3(1) <= X"00000000";
        Data_Type_Conversion6_out1_3(2) <= X"00000000";
        Data_Type_Conversion6_out1_3(3) <= X"00000000";
        Data_Type_Conversion6_out1_3(4) <= X"00000000";
        Data_Type_Conversion6_out1_3(5) <= X"00000000";
        Data_Type_Conversion6_out1_3(6) <= X"00000000";
        Data_Type_Conversion6_out1_3(7) <= X"00000000";
        Data_Type_Conversion6_out1_3(8) <= X"00000000";
      ELSIF enb = '1' THEN
        Data_Type_Conversion6_out1_3(0) <= Data_Type_Conversion6_out1_1(0);
        Data_Type_Conversion6_out1_3(1) <= Data_Type_Conversion6_out1_1(1);
        Data_Type_Conversion6_out1_3(2) <= Data_Type_Conversion6_out1_1(2);
        Data_Type_Conversion6_out1_3(3) <= Data_Type_Conversion6_out1_1(3);
        Data_Type_Conversion6_out1_3(4) <= Data_Type_Conversion6_out1_1(4);
        Data_Type_Conversion6_out1_3(5) <= Data_Type_Conversion6_out1_1(5);
        Data_Type_Conversion6_out1_3(6) <= Data_Type_Conversion6_out1_1(6);
        Data_Type_Conversion6_out1_3(7) <= Data_Type_Conversion6_out1_1(7);
        Data_Type_Conversion6_out1_3(8) <= Data_Type_Conversion6_out1_1(8);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion6_out1_2_process;


  t11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t11_bypass_reg(0) <= X"00000000";
        t11_bypass_reg(1) <= X"00000000";
        t11_bypass_reg(2) <= X"00000000";
        t11_bypass_reg(3) <= X"00000000";
        t11_bypass_reg(4) <= X"00000000";
        t11_bypass_reg(5) <= X"00000000";
        t11_bypass_reg(6) <= X"00000000";
        t11_bypass_reg(7) <= X"00000000";
        t11_bypass_reg(8) <= X"00000000";
      ELSIF enb_1_100_1 = '1' THEN
        t11_bypass_reg(0) <= t11_bypass_reg_next(0);
        t11_bypass_reg(1) <= t11_bypass_reg_next(1);
        t11_bypass_reg(2) <= t11_bypass_reg_next(2);
        t11_bypass_reg(3) <= t11_bypass_reg_next(3);
        t11_bypass_reg(4) <= t11_bypass_reg_next(4);
        t11_bypass_reg(5) <= t11_bypass_reg_next(5);
        t11_bypass_reg(6) <= t11_bypass_reg_next(6);
        t11_bypass_reg(7) <= t11_bypass_reg_next(7);
        t11_bypass_reg(8) <= t11_bypass_reg_next(8);
      END IF;
    END IF;
  END PROCESS t11_bypass_process;

  
  Data_Type_Conversion6_out1_4(0) <= Data_Type_Conversion6_out1_3(0) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(0);
  
  Data_Type_Conversion6_out1_4(1) <= Data_Type_Conversion6_out1_3(1) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(1);
  
  Data_Type_Conversion6_out1_4(2) <= Data_Type_Conversion6_out1_3(2) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(2);
  
  Data_Type_Conversion6_out1_4(3) <= Data_Type_Conversion6_out1_3(3) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(3);
  
  Data_Type_Conversion6_out1_4(4) <= Data_Type_Conversion6_out1_3(4) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(4);
  
  Data_Type_Conversion6_out1_4(5) <= Data_Type_Conversion6_out1_3(5) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(5);
  
  Data_Type_Conversion6_out1_4(6) <= Data_Type_Conversion6_out1_3(6) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(6);
  
  Data_Type_Conversion6_out1_4(7) <= Data_Type_Conversion6_out1_3(7) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(7);
  
  Data_Type_Conversion6_out1_4(8) <= Data_Type_Conversion6_out1_3(8) WHEN enb_1_100_1 = '1' ELSE
      t11_bypass_reg(8);
  t11_bypass_reg_next(0) <= Data_Type_Conversion6_out1_3(0);
  t11_bypass_reg_next(1) <= Data_Type_Conversion6_out1_3(1);
  t11_bypass_reg_next(2) <= Data_Type_Conversion6_out1_3(2);
  t11_bypass_reg_next(3) <= Data_Type_Conversion6_out1_3(3);
  t11_bypass_reg_next(4) <= Data_Type_Conversion6_out1_3(4);
  t11_bypass_reg_next(5) <= Data_Type_Conversion6_out1_3(5);
  t11_bypass_reg_next(6) <= Data_Type_Conversion6_out1_3(6);
  t11_bypass_reg_next(7) <= Data_Type_Conversion6_out1_3(7);
  t11_bypass_reg_next(8) <= Data_Type_Conversion6_out1_3(8);

  outputgen: FOR k IN 0 TO 8 GENERATE
    Transformation1_out1_signed(k) <= signed(Transformation1_out1(k));
  END GENERATE;

  Data_Type_Conversion7_out1_1(0) <= Transformation1_out1_signed(0)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(0)(15));
  Data_Type_Conversion7_out1_1(1) <= Transformation1_out1_signed(1)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(1)(15));
  Data_Type_Conversion7_out1_1(2) <= Transformation1_out1_signed(2)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(2)(15));
  Data_Type_Conversion7_out1_1(3) <= Transformation1_out1_signed(3)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(3)(15));
  Data_Type_Conversion7_out1_1(4) <= Transformation1_out1_signed(4)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(4)(15));
  Data_Type_Conversion7_out1_1(5) <= Transformation1_out1_signed(5)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(5)(15));
  Data_Type_Conversion7_out1_1(6) <= Transformation1_out1_signed(6)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(6)(15));
  Data_Type_Conversion7_out1_1(7) <= Transformation1_out1_signed(7)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(7)(15));
  Data_Type_Conversion7_out1_1(8) <= Transformation1_out1_signed(8)(40 DOWNTO 16) + ('0' & Transformation1_out1_signed(8)(15));

  Demux1_out1(0) <= Data_Type_Conversion7_out1_1(0);
  Demux1_out1(1) <= Data_Type_Conversion7_out1_1(1);
  Demux1_out1(2) <= Data_Type_Conversion7_out1_1(2);

  Demux1_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out1_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out1_2(0) <= Demux1_out1(0);
        Demux1_out1_2(1) <= Demux1_out1(1);
        Demux1_out1_2(2) <= Demux1_out1(2);
      END IF;
    END IF;
  END PROCESS Demux1_out1_1_process;


  t8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t8_bypass_reg(0) <= to_signed(16#0000000#, 25);
        t8_bypass_reg(1) <= to_signed(16#0000000#, 25);
        t8_bypass_reg(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_100_1 = '1' THEN
        t8_bypass_reg(0) <= t8_bypass_reg_next(0);
        t8_bypass_reg(1) <= t8_bypass_reg_next(1);
        t8_bypass_reg(2) <= t8_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t8_bypass_process;

  
  Demux1_out1_3(0) <= Demux1_out1_2(0) WHEN enb_1_100_1 = '1' ELSE
      t8_bypass_reg(0);
  
  Demux1_out1_3(1) <= Demux1_out1_2(1) WHEN enb_1_100_1 = '1' ELSE
      t8_bypass_reg(1);
  
  Demux1_out1_3(2) <= Demux1_out1_2(2) WHEN enb_1_100_1 = '1' ELSE
      t8_bypass_reg(2);
  t8_bypass_reg_next(0) <= Demux1_out1_2(0);
  t8_bypass_reg_next(1) <= Demux1_out1_2(1);
  t8_bypass_reg_next(2) <= Demux1_out1_2(2);

  u_abc1_pl_out_0 <= std_logic_vector(Demux1_out1_3(0));

  u_abc1_pl_out_1 <= std_logic_vector(Demux1_out1_3(1));

  u_abc1_pl_out_2 <= std_logic_vector(Demux1_out1_3(2));

  Demux1_out2(0) <= Data_Type_Conversion7_out1_1(3);
  Demux1_out2(1) <= Data_Type_Conversion7_out1_1(4);
  Demux1_out2(2) <= Data_Type_Conversion7_out1_1(5);

  Demux1_out2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out2_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out2_2(0) <= Demux1_out2(0);
        Demux1_out2_2(1) <= Demux1_out2(1);
        Demux1_out2_2(2) <= Demux1_out2(2);
      END IF;
    END IF;
  END PROCESS Demux1_out2_1_process;


  t9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t9_bypass_reg(0) <= to_signed(16#0000000#, 25);
        t9_bypass_reg(1) <= to_signed(16#0000000#, 25);
        t9_bypass_reg(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_100_1 = '1' THEN
        t9_bypass_reg(0) <= t9_bypass_reg_next(0);
        t9_bypass_reg(1) <= t9_bypass_reg_next(1);
        t9_bypass_reg(2) <= t9_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t9_bypass_process;

  
  Demux1_out2_3(0) <= Demux1_out2_2(0) WHEN enb_1_100_1 = '1' ELSE
      t9_bypass_reg(0);
  
  Demux1_out2_3(1) <= Demux1_out2_2(1) WHEN enb_1_100_1 = '1' ELSE
      t9_bypass_reg(1);
  
  Demux1_out2_3(2) <= Demux1_out2_2(2) WHEN enb_1_100_1 = '1' ELSE
      t9_bypass_reg(2);
  t9_bypass_reg_next(0) <= Demux1_out2_2(0);
  t9_bypass_reg_next(1) <= Demux1_out2_2(1);
  t9_bypass_reg_next(2) <= Demux1_out2_2(2);

  u_abc2_pl_out_0 <= std_logic_vector(Demux1_out2_3(0));

  u_abc2_pl_out_1 <= std_logic_vector(Demux1_out2_3(1));

  u_abc2_pl_out_2 <= std_logic_vector(Demux1_out2_3(2));

  Demux1_out3(0) <= Data_Type_Conversion7_out1_1(6);
  Demux1_out3(1) <= Data_Type_Conversion7_out1_1(7);
  Demux1_out3(2) <= Data_Type_Conversion7_out1_1(8);

  Demux1_out3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3_2(0) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(1) <= to_signed(16#0000000#, 25);
        Demux1_out3_2(2) <= to_signed(16#0000000#, 25);
      ELSIF enb = '1' THEN
        Demux1_out3_2(0) <= Demux1_out3(0);
        Demux1_out3_2(1) <= Demux1_out3(1);
        Demux1_out3_2(2) <= Demux1_out3(2);
      END IF;
    END IF;
  END PROCESS Demux1_out3_1_process;


  t10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t10_bypass_reg(0) <= to_signed(16#0000000#, 25);
        t10_bypass_reg(1) <= to_signed(16#0000000#, 25);
        t10_bypass_reg(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_100_1 = '1' THEN
        t10_bypass_reg(0) <= t10_bypass_reg_next(0);
        t10_bypass_reg(1) <= t10_bypass_reg_next(1);
        t10_bypass_reg(2) <= t10_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t10_bypass_process;

  
  Demux1_out3_3(0) <= Demux1_out3_2(0) WHEN enb_1_100_1 = '1' ELSE
      t10_bypass_reg(0);
  
  Demux1_out3_3(1) <= Demux1_out3_2(1) WHEN enb_1_100_1 = '1' ELSE
      t10_bypass_reg(1);
  
  Demux1_out3_3(2) <= Demux1_out3_2(2) WHEN enb_1_100_1 = '1' ELSE
      t10_bypass_reg(2);
  t10_bypass_reg_next(0) <= Demux1_out3_2(0);
  t10_bypass_reg_next(1) <= Demux1_out3_2(1);
  t10_bypass_reg_next(2) <= Demux1_out3_2(2);

  u_abc3_pl_out_0 <= std_logic_vector(Demux1_out3_3(0));

  u_abc3_pl_out_1 <= std_logic_vector(Demux1_out3_3(1));

  u_abc3_pl_out_2 <= std_logic_vector(Demux1_out3_3(2));

  ce_out <= enb_1_100_1;

  output_general_0 <= Mux_out1_3(0);

  output_general_1 <= Mux_out1_3(1);

  output_general_2 <= Mux_out1_3(2);

  output_general_3 <= Mux_out1_3(3);

  output_general_4 <= Mux_out1_3(4);

  output_currents_dq_0 <= Data_Type_Conversion17_out1_3(0);

  output_currents_dq_1 <= Data_Type_Conversion17_out1_3(1);

  output_currents_dq_2 <= Data_Type_Conversion17_out1_3(2);

  output_currents_dq_3 <= Data_Type_Conversion17_out1_3(3);

  output_currents_dq_4 <= Data_Type_Conversion17_out1_3(4);

  output_currents_dq_5 <= Data_Type_Conversion17_out1_3(5);

  output_currents_dq_6 <= Data_Type_Conversion17_out1_3(6);

  output_currents_dq_7 <= Data_Type_Conversion17_out1_3(7);

  output_currents_dq_8 <= Data_Type_Conversion17_out1_3(8);

  output_currents_abc_0 <= Data_Type_Conversion6_out1_4(0);

  output_currents_abc_1 <= Data_Type_Conversion6_out1_4(1);

  output_currents_abc_2 <= Data_Type_Conversion6_out1_4(2);

  output_currents_abc_3 <= Data_Type_Conversion6_out1_4(3);

  output_currents_abc_4 <= Data_Type_Conversion6_out1_4(4);

  output_currents_abc_5 <= Data_Type_Conversion6_out1_4(5);

  output_currents_abc_6 <= Data_Type_Conversion6_out1_4(6);

  output_currents_abc_7 <= Data_Type_Conversion6_out1_4(7);

  output_currents_abc_8 <= Data_Type_Conversion6_out1_4(8);

END rtl;

