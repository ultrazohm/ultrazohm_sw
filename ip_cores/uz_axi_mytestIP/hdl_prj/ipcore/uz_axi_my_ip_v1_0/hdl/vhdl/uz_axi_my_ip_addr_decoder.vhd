-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\uz_axi_mytestIP\hdl_prj\hdlsrc\uz_axi_mytestIP\uz_axi_my_ip_addr_decoder.vhd
-- Created: 2022-05-12 15:37:14
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_axi_my_ip_addr_decoder
-- Source Path: uz_axi_my_ip/uz_axi_my_ip_axi4/uz_axi_my_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_axi_my_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_C_int32                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        read_C_uint32                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_Out3                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_A_int32                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_B_int32                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        write_A_uint32                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_B_uint32                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_In6                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En5
        write_In5                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
        );
END uz_axi_my_ip_addr_decoder;


ARCHITECTURE rtl OF uz_axi_my_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_C_int32_signed              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_C_uint32_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_C_int32_1_1           : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_C_int32                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_slice_C_int32_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_int32_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_C_uint32_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_Out3_signed                 : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL decode_sel_Out3_1_1              : std_logic;  -- ufix1
  SIGNAL read_reg_C_uint32                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_C_uint32_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out3                    : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL data_slice_Out3_1                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out3_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_A_int32_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_A_int32_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_A_int32                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_A_int32_1_1             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_B_int32_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_B_int32_1_1              : std_logic;  -- ufix1
  SIGNAL data_in_B_int32                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_B_int32_1_1             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL decode_sel_A_uint32_1_1          : std_logic;  -- ufix1
  SIGNAL reg_enb_A_uint32_1_1             : std_logic;  -- ufix1
  SIGNAL data_reg_A_uint32_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_B_uint32_1_1          : std_logic;  -- ufix1
  SIGNAL reg_enb_B_uint32_1_1             : std_logic;  -- ufix1
  SIGNAL data_reg_B_uint32_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_In6_1_1               : std_logic;  -- ufix1
  SIGNAL reg_enb_In6_1_1                  : std_logic;  -- ufix1
  SIGNAL data_in_In6                      : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL data_reg_In6_1_1                 : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL decode_sel_In5_1_1               : std_logic;  -- ufix1
  SIGNAL reg_enb_In5_1_1                  : std_logic;  -- ufix1
  SIGNAL data_in_In5                      : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL data_reg_In5_1_1                 : signed(15 DOWNTO 0);  -- sfix16_En5

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  read_C_int32_signed <= signed(read_C_int32);

  
  decode_sel_C_uint32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_C_int32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_C_int32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_C_int32 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        read_reg_C_int32 <= read_C_int32_signed;
      END IF;
    END IF;
  END PROCESS reg_C_int32_process;


  data_slice_C_int32_1 <= unsigned(read_reg_C_int32);

  
  decode_rd_C_int32_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_C_int32_1_1 = '0' ELSE
      data_slice_C_int32_1;

  read_C_uint32_unsigned <= unsigned(read_C_uint32);

  read_Out3_signed <= signed(read_Out3);

  
  decode_sel_Out3_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_C_uint32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_C_uint32 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_C_uint32 <= read_C_uint32_unsigned;
      END IF;
    END IF;
  END PROCESS reg_C_uint32_process;


  
  decode_rd_C_uint32_1_1 <= decode_rd_C_int32_1_1 WHEN decode_sel_C_uint32_1_1 = '0' ELSE
      read_reg_C_uint32;

  reg_Out3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_Out3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        read_reg_Out3 <= read_Out3_signed;
      END IF;
    END IF;
  END PROCESS reg_Out3_process;


  data_slice_Out3_1 <= unsigned(resize(read_reg_Out3, 32));

  
  decode_rd_Out3_1_1 <= decode_rd_C_uint32_1_1 WHEN decode_sel_Out3_1_1 = '0' ELSE
      data_slice_Out3_1;

  data_read <= std_logic_vector(decode_rd_Out3_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_A_int32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_A_int32_1_1 <= decode_sel_A_int32_1_1 AND wr_enb;

  data_in_A_int32 <= signed(data_write_unsigned);

  reg_A_int32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_int32_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_A_int32_1_1 = '1' THEN
        data_reg_A_int32_1_1 <= data_in_A_int32;
      END IF;
    END IF;
  END PROCESS reg_A_int32_1_1_process;


  write_A_int32 <= std_logic_vector(data_reg_A_int32_1_1);

  
  decode_sel_B_int32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_B_int32_1_1 <= decode_sel_B_int32_1_1 AND wr_enb;

  data_in_B_int32 <= signed(data_write_unsigned);

  reg_B_int32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_int32_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_B_int32_1_1 = '1' THEN
        data_reg_B_int32_1_1 <= data_in_B_int32;
      END IF;
    END IF;
  END PROCESS reg_B_int32_1_1_process;


  write_B_int32 <= std_logic_vector(data_reg_B_int32_1_1);

  
  decode_sel_A_uint32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_A_uint32_1_1 <= decode_sel_A_uint32_1_1 AND wr_enb;

  reg_A_uint32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_A_uint32_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_A_uint32_1_1 = '1' THEN
        data_reg_A_uint32_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_A_uint32_1_1_process;


  write_A_uint32 <= std_logic_vector(data_reg_A_uint32_1_1);

  
  decode_sel_B_uint32_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_B_uint32_1_1 <= decode_sel_B_uint32_1_1 AND wr_enb;

  reg_B_uint32_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_B_uint32_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_B_uint32_1_1 = '1' THEN
        data_reg_B_uint32_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_B_uint32_1_1_process;


  write_B_uint32 <= std_logic_vector(data_reg_B_uint32_1_1);

  
  decode_sel_In6_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_In6_1_1 <= decode_sel_In6_1_1 AND wr_enb;

  data_in_In6 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_In6_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_In6_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_In6_1_1 = '1' THEN
        data_reg_In6_1_1 <= data_in_In6;
      END IF;
    END IF;
  END PROCESS reg_In6_1_1_process;


  write_In6 <= std_logic_vector(data_reg_In6_1_1);

  
  decode_sel_In5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_In5_1_1 <= decode_sel_In5_1_1 AND wr_enb;

  data_in_In5 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_In5_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_In5_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_In5_1_1 = '1' THEN
        data_reg_In5_1_1 <= data_in_In5;
      END IF;
    END IF;
  END PROCESS reg_In5_1_1_process;


  write_In5 <= std_logic_vector(data_reg_In5_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

END rtl;

