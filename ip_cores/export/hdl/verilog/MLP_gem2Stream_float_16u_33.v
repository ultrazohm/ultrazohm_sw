// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_gem2Stream_float_16u_33 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read,
        p_m_out_din,
        p_m_out_full_n,
        p_m_out_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [511:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
output  [13:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [13:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [13:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;
output  [31:0] p_m_out_din;
input   p_m_out_full_n;
output   p_m_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_out_write;
reg p_m_read;
reg[13:0] p_in_address0;
reg p_in_ce0;
reg[13:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;
reg p_m_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln55_reg_656;
reg    p_m_blk_n;
reg    p_in_offset_blk_n;
reg    p_m_out_blk_n;
reg   [27:0] i_reg_258;
reg   [13:0] p_in_offset_read_reg_631;
reg    ap_block_state1;
reg   [27:0] trunc_ln_reg_651;
wire   [0:0] icmp_ln55_fu_285_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [27:0] add_ln55_fu_290_p2;
reg   [27:0] add_ln55_reg_660;
reg    ap_enable_reg_pp0_iter0;
wire   [13:0] tmp_s_fu_300_p3;
reg   [13:0] tmp_s_reg_665;
reg   [31:0] l_val_m_Val_0_reg_693;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] l_val_m_Val_1_reg_698;
reg   [31:0] l_val_m_Val_2_reg_713;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] l_val_m_Val_3_reg_718;
reg   [31:0] l_val_m_Val_4_reg_733;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] l_val_m_Val_5_reg_738;
reg   [31:0] l_val_m_Val_6_reg_753;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] l_val_m_Val_7_reg_758;
reg   [31:0] l_val_m_Val_8_reg_773;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] l_val_m_Val_9_reg_778;
reg   [31:0] l_val_m_Val_10_reg_793;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] l_val_m_Val_11_reg_798;
reg   [31:0] l_val_m_Val_12_reg_813;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [31:0] l_val_m_Val_13_reg_818;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage7_subdone;
reg   [27:0] ap_phi_mux_i_phi_fu_262_p4;
wire   [63:0] zext_ln60_fu_313_p1;
wire   [63:0] zext_ln60_1_fu_329_p1;
wire   [63:0] zext_ln60_2_fu_344_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln60_3_fu_359_p1;
wire   [63:0] zext_ln60_4_fu_374_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln60_5_fu_389_p1;
wire   [63:0] zext_ln60_6_fu_404_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln60_7_fu_419_p1;
wire   [63:0] zext_ln60_8_fu_434_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln60_9_fu_449_p1;
wire   [63:0] zext_ln60_10_fu_464_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln60_11_fu_479_p1;
wire   [63:0] zext_ln60_12_fu_494_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln60_13_fu_509_p1;
wire   [63:0] zext_ln60_14_fu_524_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln60_15_fu_539_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln54_fu_269_p2;
wire   [9:0] empty_fu_296_p1;
wire   [13:0] add_ln60_fu_308_p2;
wire   [13:0] or_ln60_fu_318_p2;
wire   [13:0] add_ln60_1_fu_324_p2;
wire   [13:0] or_ln60_1_fu_334_p2;
wire   [13:0] add_ln60_2_fu_339_p2;
wire   [13:0] or_ln60_2_fu_349_p2;
wire   [13:0] add_ln60_3_fu_354_p2;
wire   [13:0] or_ln60_3_fu_364_p2;
wire   [13:0] add_ln60_4_fu_369_p2;
wire   [13:0] or_ln60_4_fu_379_p2;
wire   [13:0] add_ln60_5_fu_384_p2;
wire   [13:0] or_ln60_5_fu_394_p2;
wire   [13:0] add_ln60_6_fu_399_p2;
wire   [13:0] or_ln60_6_fu_409_p2;
wire   [13:0] add_ln60_7_fu_414_p2;
wire   [13:0] or_ln60_7_fu_424_p2;
wire   [13:0] add_ln60_8_fu_429_p2;
wire   [13:0] or_ln60_8_fu_439_p2;
wire   [13:0] add_ln60_9_fu_444_p2;
wire   [13:0] or_ln60_9_fu_454_p2;
wire   [13:0] add_ln60_10_fu_459_p2;
wire   [13:0] or_ln60_10_fu_469_p2;
wire   [13:0] add_ln60_11_fu_474_p2;
wire   [13:0] or_ln60_11_fu_484_p2;
wire   [13:0] add_ln60_12_fu_489_p2;
wire   [13:0] or_ln60_12_fu_499_p2;
wire   [13:0] add_ln60_13_fu_504_p2;
wire   [13:0] or_ln60_13_fu_514_p2;
wire   [13:0] add_ln60_14_fu_519_p2;
wire   [13:0] or_ln60_14_fu_529_p2;
wire   [13:0] add_ln60_15_fu_534_p2;
wire   [31:0] l_v_105_fu_590_p1;
wire   [31:0] l_v_104_fu_586_p1;
wire   [31:0] l_v_103_fu_583_p1;
wire   [31:0] l_v_102_fu_580_p1;
wire   [31:0] l_v_101_fu_577_p1;
wire   [31:0] l_v_100_fu_574_p1;
wire   [31:0] l_v_99_fu_571_p1;
wire   [31:0] l_v_98_fu_568_p1;
wire   [31:0] l_v_97_fu_565_p1;
wire   [31:0] l_v_96_fu_562_p1;
wire   [31:0] l_v_95_fu_559_p1;
wire   [31:0] l_v_94_fu_556_p1;
wire   [31:0] l_v_93_fu_553_p1;
wire   [31:0] l_v_92_fu_550_p1;
wire   [31:0] l_v_91_fu_547_p1;
wire   [31:0] l_v_fu_544_p1;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U215(
    .din0(p_m_dout),
    .din1(p_m_dout),
    .dout(mul_ln54_fu_269_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_258 <= add_ln55_reg_660;
    end else if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_258 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln55_reg_660 <= add_ln55_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_656 <= icmp_ln55_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_0_reg_693 <= p_in_q1;
        l_val_m_Val_1_reg_698 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_10_reg_793 <= p_in_q1;
        l_val_m_Val_11_reg_798 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_12_reg_813 <= p_in_q1;
        l_val_m_Val_13_reg_818 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_2_reg_713 <= p_in_q1;
        l_val_m_Val_3_reg_718 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_4_reg_733 <= p_in_q1;
        l_val_m_Val_5_reg_738 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_6_reg_753 <= p_in_q1;
        l_val_m_Val_7_reg_758 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_8_reg_773 <= p_in_q1;
        l_val_m_Val_9_reg_778 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read_reg_631 <= p_in_offset_dout;
        trunc_ln_reg_651 <= {{mul_ln54_fu_269_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_285_p2 == 1'd0))) begin
        tmp_s_reg_665[13 : 4] <= tmp_s_fu_300_p3[13 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_285_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_262_p4 = add_ln55_reg_660;
    end else begin
        ap_phi_mux_i_phi_fu_262_p4 = i_reg_258;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            p_in_address0 = zext_ln60_15_fu_539_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            p_in_address0 = zext_ln60_13_fu_509_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            p_in_address0 = zext_ln60_11_fu_479_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_in_address0 = zext_ln60_9_fu_449_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_in_address0 = zext_ln60_7_fu_419_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_in_address0 = zext_ln60_5_fu_389_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address0 = zext_ln60_3_fu_359_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address0 = zext_ln60_1_fu_329_p1;
        end else begin
            p_in_address0 = 'bx;
        end
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            p_in_address1 = zext_ln60_14_fu_524_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            p_in_address1 = zext_ln60_12_fu_494_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            p_in_address1 = zext_ln60_10_fu_464_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_in_address1 = zext_ln60_8_fu_434_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_in_address1 = zext_ln60_6_fu_404_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_in_address1 = zext_ln60_4_fu_374_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address1 = zext_ln60_2_fu_344_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address1 = zext_ln60_fu_313_p1;
        end else begin
            p_in_address1 = 'bx;
        end
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_out_blk_n = p_m_out_full_n;
    end else begin
        p_m_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_out_write = 1'b1;
    end else begin
        p_m_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_656 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_285_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_290_p2 = (ap_phi_mux_i_phi_fu_262_p4 + 28'd1);

assign add_ln60_10_fu_459_p2 = (p_in_offset_read_reg_631 + or_ln60_9_fu_454_p2);

assign add_ln60_11_fu_474_p2 = (p_in_offset_read_reg_631 + or_ln60_10_fu_469_p2);

assign add_ln60_12_fu_489_p2 = (p_in_offset_read_reg_631 + or_ln60_11_fu_484_p2);

assign add_ln60_13_fu_504_p2 = (p_in_offset_read_reg_631 + or_ln60_12_fu_499_p2);

assign add_ln60_14_fu_519_p2 = (p_in_offset_read_reg_631 + or_ln60_13_fu_514_p2);

assign add_ln60_15_fu_534_p2 = (p_in_offset_read_reg_631 + or_ln60_14_fu_529_p2);

assign add_ln60_1_fu_324_p2 = (p_in_offset_read_reg_631 + or_ln60_fu_318_p2);

assign add_ln60_2_fu_339_p2 = (p_in_offset_read_reg_631 + or_ln60_1_fu_334_p2);

assign add_ln60_3_fu_354_p2 = (p_in_offset_read_reg_631 + or_ln60_2_fu_349_p2);

assign add_ln60_4_fu_369_p2 = (p_in_offset_read_reg_631 + or_ln60_3_fu_364_p2);

assign add_ln60_5_fu_384_p2 = (p_in_offset_read_reg_631 + or_ln60_4_fu_379_p2);

assign add_ln60_6_fu_399_p2 = (p_in_offset_read_reg_631 + or_ln60_5_fu_394_p2);

assign add_ln60_7_fu_414_p2 = (p_in_offset_read_reg_631 + or_ln60_6_fu_409_p2);

assign add_ln60_8_fu_429_p2 = (p_in_offset_read_reg_631 + or_ln60_7_fu_424_p2);

assign add_ln60_9_fu_444_p2 = (p_in_offset_read_reg_631 + or_ln60_8_fu_439_p2);

assign add_ln60_fu_308_p2 = (p_in_offset_read_reg_631 + tmp_s_fu_300_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln55_reg_656 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln55_reg_656 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln55_reg_656 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln55_reg_656 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign empty_fu_296_p1 = ap_phi_mux_i_phi_fu_262_p4[9:0];

assign icmp_ln55_fu_285_p2 = ((ap_phi_mux_i_phi_fu_262_p4 == trunc_ln_reg_651) ? 1'b1 : 1'b0);

assign l_v_100_fu_574_p1 = l_val_m_Val_10_reg_793;

assign l_v_101_fu_577_p1 = l_val_m_Val_11_reg_798;

assign l_v_102_fu_580_p1 = l_val_m_Val_12_reg_813;

assign l_v_103_fu_583_p1 = l_val_m_Val_13_reg_818;

assign l_v_104_fu_586_p1 = p_in_q1;

assign l_v_105_fu_590_p1 = p_in_q0;

assign l_v_91_fu_547_p1 = l_val_m_Val_1_reg_698;

assign l_v_92_fu_550_p1 = l_val_m_Val_2_reg_713;

assign l_v_93_fu_553_p1 = l_val_m_Val_3_reg_718;

assign l_v_94_fu_556_p1 = l_val_m_Val_4_reg_733;

assign l_v_95_fu_559_p1 = l_val_m_Val_5_reg_738;

assign l_v_96_fu_562_p1 = l_val_m_Val_6_reg_753;

assign l_v_97_fu_565_p1 = l_val_m_Val_7_reg_758;

assign l_v_98_fu_568_p1 = l_val_m_Val_8_reg_773;

assign l_v_99_fu_571_p1 = l_val_m_Val_9_reg_778;

assign l_v_fu_544_p1 = l_val_m_Val_0_reg_693;

assign or_ln60_10_fu_469_p2 = (tmp_s_reg_665 | 14'd11);

assign or_ln60_11_fu_484_p2 = (tmp_s_reg_665 | 14'd12);

assign or_ln60_12_fu_499_p2 = (tmp_s_reg_665 | 14'd13);

assign or_ln60_13_fu_514_p2 = (tmp_s_reg_665 | 14'd14);

assign or_ln60_14_fu_529_p2 = (tmp_s_reg_665 | 14'd15);

assign or_ln60_1_fu_334_p2 = (tmp_s_reg_665 | 14'd2);

assign or_ln60_2_fu_349_p2 = (tmp_s_reg_665 | 14'd3);

assign or_ln60_3_fu_364_p2 = (tmp_s_reg_665 | 14'd4);

assign or_ln60_4_fu_379_p2 = (tmp_s_reg_665 | 14'd5);

assign or_ln60_5_fu_394_p2 = (tmp_s_reg_665 | 14'd6);

assign or_ln60_6_fu_409_p2 = (tmp_s_reg_665 | 14'd7);

assign or_ln60_7_fu_424_p2 = (tmp_s_reg_665 | 14'd8);

assign or_ln60_8_fu_439_p2 = (tmp_s_reg_665 | 14'd9);

assign or_ln60_9_fu_454_p2 = (tmp_s_reg_665 | 14'd10);

assign or_ln60_fu_318_p2 = (tmp_s_fu_300_p3 | 14'd1);

assign p_m_out_din = p_m_dout;

assign p_out_din = {{{{{{{{{{{{{{{{l_v_105_fu_590_p1}, {l_v_104_fu_586_p1}}, {l_v_103_fu_583_p1}}, {l_v_102_fu_580_p1}}, {l_v_101_fu_577_p1}}, {l_v_100_fu_574_p1}}, {l_v_99_fu_571_p1}}, {l_v_98_fu_568_p1}}, {l_v_97_fu_565_p1}}, {l_v_96_fu_562_p1}}, {l_v_95_fu_559_p1}}, {l_v_94_fu_556_p1}}, {l_v_93_fu_553_p1}}, {l_v_92_fu_550_p1}}, {l_v_91_fu_547_p1}}, {l_v_fu_544_p1}};

assign start_out = real_start;

assign tmp_s_fu_300_p3 = {{empty_fu_296_p1}, {4'd0}};

assign zext_ln60_10_fu_464_p1 = add_ln60_10_fu_459_p2;

assign zext_ln60_11_fu_479_p1 = add_ln60_11_fu_474_p2;

assign zext_ln60_12_fu_494_p1 = add_ln60_12_fu_489_p2;

assign zext_ln60_13_fu_509_p1 = add_ln60_13_fu_504_p2;

assign zext_ln60_14_fu_524_p1 = add_ln60_14_fu_519_p2;

assign zext_ln60_15_fu_539_p1 = add_ln60_15_fu_534_p2;

assign zext_ln60_1_fu_329_p1 = add_ln60_1_fu_324_p2;

assign zext_ln60_2_fu_344_p1 = add_ln60_2_fu_339_p2;

assign zext_ln60_3_fu_359_p1 = add_ln60_3_fu_354_p2;

assign zext_ln60_4_fu_374_p1 = add_ln60_4_fu_369_p2;

assign zext_ln60_5_fu_389_p1 = add_ln60_5_fu_384_p2;

assign zext_ln60_6_fu_404_p1 = add_ln60_6_fu_399_p2;

assign zext_ln60_7_fu_419_p1 = add_ln60_7_fu_414_p2;

assign zext_ln60_8_fu_434_p1 = add_ln60_8_fu_429_p2;

assign zext_ln60_9_fu_449_p1 = add_ln60_9_fu_444_p2;

assign zext_ln60_fu_313_p1 = add_ln60_fu_308_p2;

always @ (posedge ap_clk) begin
    tmp_s_reg_665[3:0] <= 4'b0000;
end

endmodule //MLP_gem2Stream_float_16u_33
