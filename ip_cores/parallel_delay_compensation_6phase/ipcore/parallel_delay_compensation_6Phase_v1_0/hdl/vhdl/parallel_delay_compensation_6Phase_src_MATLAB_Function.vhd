-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_delay_compensation_6phase\hdlsrc\parallel_delay_compensation_6phase\parallel_delay_compensation_6Phase_src_MATLAB_Function.vhd
-- Created: 2022-10-05 14:30:53
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_delay_compensation_6Phase_src_MATLAB_Function
-- Source Path: parallel_delay_compensation_6phase/HDL_DUT/MATLAB Function
-- Hierarchy Level: 1
-- 
-- Delay compensation with a modell of a 6-Phase PMSM
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_delay_compensation_6Phase_src_HDL_DUT_pkg.ALL;

ENTITY parallel_delay_compensation_6Phase_src_MATLAB_Function IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        SampleTime_div_Ld                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        last_applied_optimal_voltage_vector :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
        id_measured                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_measured                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_measured                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_measured                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Lq                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Rs                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_el                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        iq_k_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        ix_k_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        iy_k_1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END parallel_delay_compensation_6Phase_src_MATLAB_Function;


ARCHITECTURE rtl OF parallel_delay_compensation_6Phase_src_MATLAB_Function IS

  -- Component Declarations
  COMPONENT parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_mul_single
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_mul_single(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_sub_single
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_sub_single(rtl);

  FOR ALL : parallel_delay_compensation_6Phase_src_nfp_add_single
    USE ENTITY work.parallel_delay_compensation_6Phase_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL SampleTime_div_Ld_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_0 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch12_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch12_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL out0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Rs_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch14_reg                 : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL delayMatch14_reg_next            : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL out0_3                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch10_reg                 : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL delayMatch10_reg_next            : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL Lq_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_4                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_1                    : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL reduced_reg_next_1               : vector_of_std_logic_vector32(0 TO 10);  -- ufix32 [11]
  SIGNAL iq_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_5                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_6                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_7                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch16_reg                 : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL delayMatch16_reg_next            : vector_of_std_logic_vector32(0 TO 28);  -- ufix32 [29]
  SIGNAL id_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch23_reg                 : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch23_reg_next            : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL SampleTime_div_Lq_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch18_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch18_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL out0_8                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_9                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_10                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch22_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch22_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL out0_11                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch21_reg                 : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL delayMatch21_reg_next            : vector_of_std_logic_vector32(0 TO 6);  -- ufix32 [7]
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch20_reg                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch20_reg_next            : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL psiPM_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch19_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch19_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Ld_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_12                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_13                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_14                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_15                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_16                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_2                    : vector_of_std_logic_vector32(0 TO 18);  -- ufix32 [19]
  SIGNAL reduced_reg_next_2               : vector_of_std_logic_vector32(0 TO 18);  -- ufix32 [19]
  SIGNAL iq_measured_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch27_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch27_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL SampleTime_div_Lx_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_2 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch26_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch26_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL out0_17                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_18                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_19                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_20                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch28_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch28_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL ix_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch31_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch31_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL SampleTime_div_Ly_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_3 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch30_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch30_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL out0_21                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_22                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_23                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_24                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch32_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch32_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL iy_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_measured,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => out0_1  -- single
              );

  u_nfp_sub_comp : parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0,  -- single
              nfp_in2 => out0_1,  -- single
              nfp_out => out0_2  -- single
              );

  u_nfp_mul_comp_1 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el,  -- single
              nfp_in2 => Lq_1,  -- single
              nfp_out => out0_4  -- single
              );

  u_nfp_mul_comp_2 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_4,  -- single
              nfp_in2 => iq_measured_1,  -- single
              nfp_out => out0_5  -- single
              );

  u_nfp_add_comp : parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_3,  -- single
              nfp_in2 => out0_5,  -- single
              nfp_out => out0_6  -- single
              );

  u_nfp_mul_comp_3 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Ld_1,  -- single
              nfp_in2 => out0_6,  -- single
              nfp_out => out0_7  -- single
              );

  u_nfp_add_comp_1 : parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_7,  -- single
              nfp_in2 => id_measured_1,  -- single
              nfp_out => id_k_1  -- single
              );

  u_nfp_mul_comp_4 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iq_measured,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => out0_9  -- single
              );

  u_nfp_sub_comp_1 : parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_8,  -- single
              nfp_in2 => out0_9,  -- single
              nfp_out => out0_10  -- single
              );

  u_nfp_mul_comp_5 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_measured,  -- single
              nfp_in2 => Ld_1,  -- single
              nfp_out => out0_12  -- single
              );

  u_nfp_add_comp_2 : parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiPM_1,  -- single
              nfp_in2 => out0_12,  -- single
              nfp_out => out0_13  -- single
              );

  u_nfp_mul_comp_6 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el_1,  -- single
              nfp_in2 => out0_13,  -- single
              nfp_out => out0_14  -- single
              );

  u_nfp_sub_comp_2 : parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_11,  -- single
              nfp_in2 => out0_14,  -- single
              nfp_out => out0_15  -- single
              );

  u_nfp_mul_comp_7 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Lq_1,  -- single
              nfp_in2 => out0_15,  -- single
              nfp_out => out0_16  -- single
              );

  u_nfp_add_comp_3 : parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_16,  -- single
              nfp_in2 => iq_measured_2,  -- single
              nfp_out => iq_k_1  -- single
              );

  u_nfp_mul_comp_8 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ix_measured,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => out0_18  -- single
              );

  u_nfp_sub_comp_3 : parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_17,  -- single
              nfp_in2 => out0_18,  -- single
              nfp_out => out0_19  -- single
              );

  u_nfp_mul_comp_9 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Lx_1,  -- single
              nfp_in2 => out0_19,  -- single
              nfp_out => out0_20  -- single
              );

  u_nfp_add_comp_4 : parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_20,  -- single
              nfp_in2 => ix_measured_1,  -- single
              nfp_out => ix_k_1  -- single
              );

  u_nfp_mul_comp_10 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iy_measured,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => out0_22  -- single
              );

  u_nfp_sub_comp_4 : parallel_delay_compensation_6Phase_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_21,  -- single
              nfp_in2 => out0_22,  -- single
              nfp_out => out0_23  -- single
              );

  u_nfp_mul_comp_11 : parallel_delay_compensation_6Phase_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Ly_1,  -- single
              nfp_in2 => out0_23,  -- single
              nfp_out => out0_24  -- single
              );

  u_nfp_add_comp_5 : parallel_delay_compensation_6Phase_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_24,  -- single
              nfp_in2 => iy_measured_1,  -- single
              nfp_out => iy_k_1  -- single
              );

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"00000000";
        delayMatch15_reg(1) <= X"00000000";
        delayMatch15_reg(2) <= X"00000000";
        delayMatch15_reg(3) <= X"00000000";
        delayMatch15_reg(4) <= X"00000000";
        delayMatch15_reg(5) <= X"00000000";
        delayMatch15_reg(6) <= X"00000000";
        delayMatch15_reg(7) <= X"00000000";
        delayMatch15_reg(8) <= X"00000000";
        delayMatch15_reg(9) <= X"00000000";
        delayMatch15_reg(10) <= X"00000000";
        delayMatch15_reg(11) <= X"00000000";
        delayMatch15_reg(12) <= X"00000000";
        delayMatch15_reg(13) <= X"00000000";
        delayMatch15_reg(14) <= X"00000000";
        delayMatch15_reg(15) <= X"00000000";
        delayMatch15_reg(16) <= X"00000000";
        delayMatch15_reg(17) <= X"00000000";
        delayMatch15_reg(18) <= X"00000000";
        delayMatch15_reg(19) <= X"00000000";
        delayMatch15_reg(20) <= X"00000000";
        delayMatch15_reg(21) <= X"00000000";
        delayMatch15_reg(22) <= X"00000000";
        delayMatch15_reg(23) <= X"00000000";
        delayMatch15_reg(24) <= X"00000000";
        delayMatch15_reg(25) <= X"00000000";
        delayMatch15_reg(26) <= X"00000000";
        delayMatch15_reg(27) <= X"00000000";
        delayMatch15_reg(28) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
        delayMatch15_reg(6) <= delayMatch15_reg_next(6);
        delayMatch15_reg(7) <= delayMatch15_reg_next(7);
        delayMatch15_reg(8) <= delayMatch15_reg_next(8);
        delayMatch15_reg(9) <= delayMatch15_reg_next(9);
        delayMatch15_reg(10) <= delayMatch15_reg_next(10);
        delayMatch15_reg(11) <= delayMatch15_reg_next(11);
        delayMatch15_reg(12) <= delayMatch15_reg_next(12);
        delayMatch15_reg(13) <= delayMatch15_reg_next(13);
        delayMatch15_reg(14) <= delayMatch15_reg_next(14);
        delayMatch15_reg(15) <= delayMatch15_reg_next(15);
        delayMatch15_reg(16) <= delayMatch15_reg_next(16);
        delayMatch15_reg(17) <= delayMatch15_reg_next(17);
        delayMatch15_reg(18) <= delayMatch15_reg_next(18);
        delayMatch15_reg(19) <= delayMatch15_reg_next(19);
        delayMatch15_reg(20) <= delayMatch15_reg_next(20);
        delayMatch15_reg(21) <= delayMatch15_reg_next(21);
        delayMatch15_reg(22) <= delayMatch15_reg_next(22);
        delayMatch15_reg(23) <= delayMatch15_reg_next(23);
        delayMatch15_reg(24) <= delayMatch15_reg_next(24);
        delayMatch15_reg(25) <= delayMatch15_reg_next(25);
        delayMatch15_reg(26) <= delayMatch15_reg_next(26);
        delayMatch15_reg(27) <= delayMatch15_reg_next(27);
        delayMatch15_reg(28) <= delayMatch15_reg_next(28);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  SampleTime_div_Ld_1 <= delayMatch15_reg(28);
  delayMatch15_reg_next(0) <= SampleTime_div_Ld;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);
  delayMatch15_reg_next(5) <= delayMatch15_reg(4);
  delayMatch15_reg_next(6) <= delayMatch15_reg(5);
  delayMatch15_reg_next(7) <= delayMatch15_reg(6);
  delayMatch15_reg_next(8) <= delayMatch15_reg(7);
  delayMatch15_reg_next(9) <= delayMatch15_reg(8);
  delayMatch15_reg_next(10) <= delayMatch15_reg(9);
  delayMatch15_reg_next(11) <= delayMatch15_reg(10);
  delayMatch15_reg_next(12) <= delayMatch15_reg(11);
  delayMatch15_reg_next(13) <= delayMatch15_reg(12);
  delayMatch15_reg_next(14) <= delayMatch15_reg(13);
  delayMatch15_reg_next(15) <= delayMatch15_reg(14);
  delayMatch15_reg_next(16) <= delayMatch15_reg(15);
  delayMatch15_reg_next(17) <= delayMatch15_reg(16);
  delayMatch15_reg_next(18) <= delayMatch15_reg(17);
  delayMatch15_reg_next(19) <= delayMatch15_reg(18);
  delayMatch15_reg_next(20) <= delayMatch15_reg(19);
  delayMatch15_reg_next(21) <= delayMatch15_reg(20);
  delayMatch15_reg_next(22) <= delayMatch15_reg(21);
  delayMatch15_reg_next(23) <= delayMatch15_reg(22);
  delayMatch15_reg_next(24) <= delayMatch15_reg(23);
  delayMatch15_reg_next(25) <= delayMatch15_reg(24);
  delayMatch15_reg_next(26) <= delayMatch15_reg(25);
  delayMatch15_reg_next(27) <= delayMatch15_reg(26);
  delayMatch15_reg_next(28) <= delayMatch15_reg(27);

  last_applied_optimal_voltage_vector_0 <= last_applied_optimal_voltage_vector(0);

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= X"00000000";
        delayMatch12_reg(1) <= X"00000000";
        delayMatch12_reg(2) <= X"00000000";
        delayMatch12_reg(3) <= X"00000000";
        delayMatch12_reg(4) <= X"00000000";
        delayMatch12_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
        delayMatch12_reg(5) <= delayMatch12_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  out0 <= delayMatch12_reg(5);
  delayMatch12_reg_next(0) <= last_applied_optimal_voltage_vector_0;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);
  delayMatch12_reg_next(3) <= delayMatch12_reg(2);
  delayMatch12_reg_next(4) <= delayMatch12_reg(3);
  delayMatch12_reg_next(5) <= delayMatch12_reg(4);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"00000000";
        reduced_reg(1) <= X"00000000";
        reduced_reg(2) <= X"00000000";
        reduced_reg(3) <= X"00000000";
        reduced_reg(4) <= X"00000000";
        reduced_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Rs_1 <= reduced_reg(5);
  reduced_reg_next(0) <= Rs;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= X"00000000";
        delayMatch14_reg(1) <= X"00000000";
        delayMatch14_reg(2) <= X"00000000";
        delayMatch14_reg(3) <= X"00000000";
        delayMatch14_reg(4) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
        delayMatch14_reg(4) <= delayMatch14_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  out0_3 <= delayMatch14_reg(4);
  delayMatch14_reg_next(0) <= out0_2;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);
  delayMatch14_reg_next(4) <= delayMatch14_reg(3);

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg(0) <= X"00000000";
        delayMatch10_reg(1) <= X"00000000";
        delayMatch10_reg(2) <= X"00000000";
        delayMatch10_reg(3) <= X"00000000";
        delayMatch10_reg(4) <= X"00000000";
        delayMatch10_reg(5) <= X"00000000";
        delayMatch10_reg(6) <= X"00000000";
        delayMatch10_reg(7) <= X"00000000";
        delayMatch10_reg(8) <= X"00000000";
        delayMatch10_reg(9) <= X"00000000";
        delayMatch10_reg(10) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
        delayMatch10_reg(5) <= delayMatch10_reg_next(5);
        delayMatch10_reg(6) <= delayMatch10_reg_next(6);
        delayMatch10_reg(7) <= delayMatch10_reg_next(7);
        delayMatch10_reg(8) <= delayMatch10_reg_next(8);
        delayMatch10_reg(9) <= delayMatch10_reg_next(9);
        delayMatch10_reg(10) <= delayMatch10_reg_next(10);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Lq_1 <= delayMatch10_reg(10);
  delayMatch10_reg_next(0) <= Lq;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);
  delayMatch10_reg_next(2) <= delayMatch10_reg(1);
  delayMatch10_reg_next(3) <= delayMatch10_reg(2);
  delayMatch10_reg_next(4) <= delayMatch10_reg(3);
  delayMatch10_reg_next(5) <= delayMatch10_reg(4);
  delayMatch10_reg_next(6) <= delayMatch10_reg(5);
  delayMatch10_reg_next(7) <= delayMatch10_reg(6);
  delayMatch10_reg_next(8) <= delayMatch10_reg(7);
  delayMatch10_reg_next(9) <= delayMatch10_reg(8);
  delayMatch10_reg_next(10) <= delayMatch10_reg(9);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= X"00000000";
        reduced_reg_1(1) <= X"00000000";
        reduced_reg_1(2) <= X"00000000";
        reduced_reg_1(3) <= X"00000000";
        reduced_reg_1(4) <= X"00000000";
        reduced_reg_1(5) <= X"00000000";
        reduced_reg_1(6) <= X"00000000";
        reduced_reg_1(7) <= X"00000000";
        reduced_reg_1(8) <= X"00000000";
        reduced_reg_1(9) <= X"00000000";
        reduced_reg_1(10) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  iq_measured_1 <= reduced_reg_1(10);
  reduced_reg_next_1(0) <= iq_measured;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_reg(0) <= X"00000000";
        delayMatch16_reg(1) <= X"00000000";
        delayMatch16_reg(2) <= X"00000000";
        delayMatch16_reg(3) <= X"00000000";
        delayMatch16_reg(4) <= X"00000000";
        delayMatch16_reg(5) <= X"00000000";
        delayMatch16_reg(6) <= X"00000000";
        delayMatch16_reg(7) <= X"00000000";
        delayMatch16_reg(8) <= X"00000000";
        delayMatch16_reg(9) <= X"00000000";
        delayMatch16_reg(10) <= X"00000000";
        delayMatch16_reg(11) <= X"00000000";
        delayMatch16_reg(12) <= X"00000000";
        delayMatch16_reg(13) <= X"00000000";
        delayMatch16_reg(14) <= X"00000000";
        delayMatch16_reg(15) <= X"00000000";
        delayMatch16_reg(16) <= X"00000000";
        delayMatch16_reg(17) <= X"00000000";
        delayMatch16_reg(18) <= X"00000000";
        delayMatch16_reg(19) <= X"00000000";
        delayMatch16_reg(20) <= X"00000000";
        delayMatch16_reg(21) <= X"00000000";
        delayMatch16_reg(22) <= X"00000000";
        delayMatch16_reg(23) <= X"00000000";
        delayMatch16_reg(24) <= X"00000000";
        delayMatch16_reg(25) <= X"00000000";
        delayMatch16_reg(26) <= X"00000000";
        delayMatch16_reg(27) <= X"00000000";
        delayMatch16_reg(28) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= delayMatch16_reg_next(0);
        delayMatch16_reg(1) <= delayMatch16_reg_next(1);
        delayMatch16_reg(2) <= delayMatch16_reg_next(2);
        delayMatch16_reg(3) <= delayMatch16_reg_next(3);
        delayMatch16_reg(4) <= delayMatch16_reg_next(4);
        delayMatch16_reg(5) <= delayMatch16_reg_next(5);
        delayMatch16_reg(6) <= delayMatch16_reg_next(6);
        delayMatch16_reg(7) <= delayMatch16_reg_next(7);
        delayMatch16_reg(8) <= delayMatch16_reg_next(8);
        delayMatch16_reg(9) <= delayMatch16_reg_next(9);
        delayMatch16_reg(10) <= delayMatch16_reg_next(10);
        delayMatch16_reg(11) <= delayMatch16_reg_next(11);
        delayMatch16_reg(12) <= delayMatch16_reg_next(12);
        delayMatch16_reg(13) <= delayMatch16_reg_next(13);
        delayMatch16_reg(14) <= delayMatch16_reg_next(14);
        delayMatch16_reg(15) <= delayMatch16_reg_next(15);
        delayMatch16_reg(16) <= delayMatch16_reg_next(16);
        delayMatch16_reg(17) <= delayMatch16_reg_next(17);
        delayMatch16_reg(18) <= delayMatch16_reg_next(18);
        delayMatch16_reg(19) <= delayMatch16_reg_next(19);
        delayMatch16_reg(20) <= delayMatch16_reg_next(20);
        delayMatch16_reg(21) <= delayMatch16_reg_next(21);
        delayMatch16_reg(22) <= delayMatch16_reg_next(22);
        delayMatch16_reg(23) <= delayMatch16_reg_next(23);
        delayMatch16_reg(24) <= delayMatch16_reg_next(24);
        delayMatch16_reg(25) <= delayMatch16_reg_next(25);
        delayMatch16_reg(26) <= delayMatch16_reg_next(26);
        delayMatch16_reg(27) <= delayMatch16_reg_next(27);
        delayMatch16_reg(28) <= delayMatch16_reg_next(28);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  id_measured_1 <= delayMatch16_reg(28);
  delayMatch16_reg_next(0) <= id_measured;
  delayMatch16_reg_next(1) <= delayMatch16_reg(0);
  delayMatch16_reg_next(2) <= delayMatch16_reg(1);
  delayMatch16_reg_next(3) <= delayMatch16_reg(2);
  delayMatch16_reg_next(4) <= delayMatch16_reg(3);
  delayMatch16_reg_next(5) <= delayMatch16_reg(4);
  delayMatch16_reg_next(6) <= delayMatch16_reg(5);
  delayMatch16_reg_next(7) <= delayMatch16_reg(6);
  delayMatch16_reg_next(8) <= delayMatch16_reg(7);
  delayMatch16_reg_next(9) <= delayMatch16_reg(8);
  delayMatch16_reg_next(10) <= delayMatch16_reg(9);
  delayMatch16_reg_next(11) <= delayMatch16_reg(10);
  delayMatch16_reg_next(12) <= delayMatch16_reg(11);
  delayMatch16_reg_next(13) <= delayMatch16_reg(12);
  delayMatch16_reg_next(14) <= delayMatch16_reg(13);
  delayMatch16_reg_next(15) <= delayMatch16_reg(14);
  delayMatch16_reg_next(16) <= delayMatch16_reg(15);
  delayMatch16_reg_next(17) <= delayMatch16_reg(16);
  delayMatch16_reg_next(18) <= delayMatch16_reg(17);
  delayMatch16_reg_next(19) <= delayMatch16_reg(18);
  delayMatch16_reg_next(20) <= delayMatch16_reg(19);
  delayMatch16_reg_next(21) <= delayMatch16_reg(20);
  delayMatch16_reg_next(22) <= delayMatch16_reg(21);
  delayMatch16_reg_next(23) <= delayMatch16_reg(22);
  delayMatch16_reg_next(24) <= delayMatch16_reg(23);
  delayMatch16_reg_next(25) <= delayMatch16_reg(24);
  delayMatch16_reg_next(26) <= delayMatch16_reg(25);
  delayMatch16_reg_next(27) <= delayMatch16_reg(26);
  delayMatch16_reg_next(28) <= delayMatch16_reg(27);

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch23_reg(0) <= X"00000000";
        delayMatch23_reg(1) <= X"00000000";
        delayMatch23_reg(2) <= X"00000000";
        delayMatch23_reg(3) <= X"00000000";
        delayMatch23_reg(4) <= X"00000000";
        delayMatch23_reg(5) <= X"00000000";
        delayMatch23_reg(6) <= X"00000000";
        delayMatch23_reg(7) <= X"00000000";
        delayMatch23_reg(8) <= X"00000000";
        delayMatch23_reg(9) <= X"00000000";
        delayMatch23_reg(10) <= X"00000000";
        delayMatch23_reg(11) <= X"00000000";
        delayMatch23_reg(12) <= X"00000000";
        delayMatch23_reg(13) <= X"00000000";
        delayMatch23_reg(14) <= X"00000000";
        delayMatch23_reg(15) <= X"00000000";
        delayMatch23_reg(16) <= X"00000000";
        delayMatch23_reg(17) <= X"00000000";
        delayMatch23_reg(18) <= X"00000000";
        delayMatch23_reg(19) <= X"00000000";
        delayMatch23_reg(20) <= X"00000000";
        delayMatch23_reg(21) <= X"00000000";
        delayMatch23_reg(22) <= X"00000000";
        delayMatch23_reg(23) <= X"00000000";
        delayMatch23_reg(24) <= X"00000000";
        delayMatch23_reg(25) <= X"00000000";
        delayMatch23_reg(26) <= X"00000000";
        delayMatch23_reg(27) <= X"00000000";
        delayMatch23_reg(28) <= X"00000000";
        delayMatch23_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch23_reg(0) <= delayMatch23_reg_next(0);
        delayMatch23_reg(1) <= delayMatch23_reg_next(1);
        delayMatch23_reg(2) <= delayMatch23_reg_next(2);
        delayMatch23_reg(3) <= delayMatch23_reg_next(3);
        delayMatch23_reg(4) <= delayMatch23_reg_next(4);
        delayMatch23_reg(5) <= delayMatch23_reg_next(5);
        delayMatch23_reg(6) <= delayMatch23_reg_next(6);
        delayMatch23_reg(7) <= delayMatch23_reg_next(7);
        delayMatch23_reg(8) <= delayMatch23_reg_next(8);
        delayMatch23_reg(9) <= delayMatch23_reg_next(9);
        delayMatch23_reg(10) <= delayMatch23_reg_next(10);
        delayMatch23_reg(11) <= delayMatch23_reg_next(11);
        delayMatch23_reg(12) <= delayMatch23_reg_next(12);
        delayMatch23_reg(13) <= delayMatch23_reg_next(13);
        delayMatch23_reg(14) <= delayMatch23_reg_next(14);
        delayMatch23_reg(15) <= delayMatch23_reg_next(15);
        delayMatch23_reg(16) <= delayMatch23_reg_next(16);
        delayMatch23_reg(17) <= delayMatch23_reg_next(17);
        delayMatch23_reg(18) <= delayMatch23_reg_next(18);
        delayMatch23_reg(19) <= delayMatch23_reg_next(19);
        delayMatch23_reg(20) <= delayMatch23_reg_next(20);
        delayMatch23_reg(21) <= delayMatch23_reg_next(21);
        delayMatch23_reg(22) <= delayMatch23_reg_next(22);
        delayMatch23_reg(23) <= delayMatch23_reg_next(23);
        delayMatch23_reg(24) <= delayMatch23_reg_next(24);
        delayMatch23_reg(25) <= delayMatch23_reg_next(25);
        delayMatch23_reg(26) <= delayMatch23_reg_next(26);
        delayMatch23_reg(27) <= delayMatch23_reg_next(27);
        delayMatch23_reg(28) <= delayMatch23_reg_next(28);
        delayMatch23_reg(29) <= delayMatch23_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch23_process;

  SampleTime_div_Lq_1 <= delayMatch23_reg(29);
  delayMatch23_reg_next(0) <= SampleTime_div_Lq;
  delayMatch23_reg_next(1) <= delayMatch23_reg(0);
  delayMatch23_reg_next(2) <= delayMatch23_reg(1);
  delayMatch23_reg_next(3) <= delayMatch23_reg(2);
  delayMatch23_reg_next(4) <= delayMatch23_reg(3);
  delayMatch23_reg_next(5) <= delayMatch23_reg(4);
  delayMatch23_reg_next(6) <= delayMatch23_reg(5);
  delayMatch23_reg_next(7) <= delayMatch23_reg(6);
  delayMatch23_reg_next(8) <= delayMatch23_reg(7);
  delayMatch23_reg_next(9) <= delayMatch23_reg(8);
  delayMatch23_reg_next(10) <= delayMatch23_reg(9);
  delayMatch23_reg_next(11) <= delayMatch23_reg(10);
  delayMatch23_reg_next(12) <= delayMatch23_reg(11);
  delayMatch23_reg_next(13) <= delayMatch23_reg(12);
  delayMatch23_reg_next(14) <= delayMatch23_reg(13);
  delayMatch23_reg_next(15) <= delayMatch23_reg(14);
  delayMatch23_reg_next(16) <= delayMatch23_reg(15);
  delayMatch23_reg_next(17) <= delayMatch23_reg(16);
  delayMatch23_reg_next(18) <= delayMatch23_reg(17);
  delayMatch23_reg_next(19) <= delayMatch23_reg(18);
  delayMatch23_reg_next(20) <= delayMatch23_reg(19);
  delayMatch23_reg_next(21) <= delayMatch23_reg(20);
  delayMatch23_reg_next(22) <= delayMatch23_reg(21);
  delayMatch23_reg_next(23) <= delayMatch23_reg(22);
  delayMatch23_reg_next(24) <= delayMatch23_reg(23);
  delayMatch23_reg_next(25) <= delayMatch23_reg(24);
  delayMatch23_reg_next(26) <= delayMatch23_reg(25);
  delayMatch23_reg_next(27) <= delayMatch23_reg(26);
  delayMatch23_reg_next(28) <= delayMatch23_reg(27);
  delayMatch23_reg_next(29) <= delayMatch23_reg(28);

  last_applied_optimal_voltage_vector_1 <= last_applied_optimal_voltage_vector(1);

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= X"00000000";
        delayMatch18_reg(1) <= X"00000000";
        delayMatch18_reg(2) <= X"00000000";
        delayMatch18_reg(3) <= X"00000000";
        delayMatch18_reg(4) <= X"00000000";
        delayMatch18_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  out0_8 <= delayMatch18_reg(5);
  delayMatch18_reg_next(0) <= last_applied_optimal_voltage_vector_1;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= X"00000000";
        delayMatch22_reg(1) <= X"00000000";
        delayMatch22_reg(2) <= X"00000000";
        delayMatch22_reg(3) <= X"00000000";
        delayMatch22_reg(4) <= X"00000000";
        delayMatch22_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  out0_11 <= delayMatch22_reg(5);
  delayMatch22_reg_next(0) <= out0_10;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= X"00000000";
        delayMatch21_reg(1) <= X"00000000";
        delayMatch21_reg(2) <= X"00000000";
        delayMatch21_reg(3) <= X"00000000";
        delayMatch21_reg(4) <= X"00000000";
        delayMatch21_reg(5) <= X"00000000";
        delayMatch21_reg(6) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
        delayMatch21_reg(6) <= delayMatch21_reg_next(6);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  omega_el_1 <= delayMatch21_reg(6);
  delayMatch21_reg_next(0) <= omega_el;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);
  delayMatch21_reg_next(6) <= delayMatch21_reg(5);

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch20_reg(0) <= X"00000000";
        delayMatch20_reg(1) <= X"00000000";
        delayMatch20_reg(2) <= X"00000000";
        delayMatch20_reg(3) <= X"00000000";
        delayMatch20_reg(4) <= X"00000000";
        delayMatch20_reg(5) <= X"00000000";
        delayMatch20_reg(6) <= X"00000000";
        delayMatch20_reg(7) <= X"00000000";
        delayMatch20_reg(8) <= X"00000000";
        delayMatch20_reg(9) <= X"00000000";
        delayMatch20_reg(10) <= X"00000000";
        delayMatch20_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch20_reg(0) <= delayMatch20_reg_next(0);
        delayMatch20_reg(1) <= delayMatch20_reg_next(1);
        delayMatch20_reg(2) <= delayMatch20_reg_next(2);
        delayMatch20_reg(3) <= delayMatch20_reg_next(3);
        delayMatch20_reg(4) <= delayMatch20_reg_next(4);
        delayMatch20_reg(5) <= delayMatch20_reg_next(5);
        delayMatch20_reg(6) <= delayMatch20_reg_next(6);
        delayMatch20_reg(7) <= delayMatch20_reg_next(7);
        delayMatch20_reg(8) <= delayMatch20_reg_next(8);
        delayMatch20_reg(9) <= delayMatch20_reg_next(9);
        delayMatch20_reg(10) <= delayMatch20_reg_next(10);
        delayMatch20_reg(11) <= delayMatch20_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  psiPM_1 <= delayMatch20_reg(11);
  delayMatch20_reg_next(0) <= psiPM;
  delayMatch20_reg_next(1) <= delayMatch20_reg(0);
  delayMatch20_reg_next(2) <= delayMatch20_reg(1);
  delayMatch20_reg_next(3) <= delayMatch20_reg(2);
  delayMatch20_reg_next(4) <= delayMatch20_reg(3);
  delayMatch20_reg_next(5) <= delayMatch20_reg(4);
  delayMatch20_reg_next(6) <= delayMatch20_reg(5);
  delayMatch20_reg_next(7) <= delayMatch20_reg(6);
  delayMatch20_reg_next(8) <= delayMatch20_reg(7);
  delayMatch20_reg_next(9) <= delayMatch20_reg(8);
  delayMatch20_reg_next(10) <= delayMatch20_reg(9);
  delayMatch20_reg_next(11) <= delayMatch20_reg(10);

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch19_reg(0) <= X"00000000";
        delayMatch19_reg(1) <= X"00000000";
        delayMatch19_reg(2) <= X"00000000";
        delayMatch19_reg(3) <= X"00000000";
        delayMatch19_reg(4) <= X"00000000";
        delayMatch19_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch19_reg(0) <= delayMatch19_reg_next(0);
        delayMatch19_reg(1) <= delayMatch19_reg_next(1);
        delayMatch19_reg(2) <= delayMatch19_reg_next(2);
        delayMatch19_reg(3) <= delayMatch19_reg_next(3);
        delayMatch19_reg(4) <= delayMatch19_reg_next(4);
        delayMatch19_reg(5) <= delayMatch19_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  Ld_1 <= delayMatch19_reg(5);
  delayMatch19_reg_next(0) <= Ld;
  delayMatch19_reg_next(1) <= delayMatch19_reg(0);
  delayMatch19_reg_next(2) <= delayMatch19_reg(1);
  delayMatch19_reg_next(3) <= delayMatch19_reg(2);
  delayMatch19_reg_next(4) <= delayMatch19_reg(3);
  delayMatch19_reg_next(5) <= delayMatch19_reg(4);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= X"00000000";
        reduced_reg_2(1) <= X"00000000";
        reduced_reg_2(2) <= X"00000000";
        reduced_reg_2(3) <= X"00000000";
        reduced_reg_2(4) <= X"00000000";
        reduced_reg_2(5) <= X"00000000";
        reduced_reg_2(6) <= X"00000000";
        reduced_reg_2(7) <= X"00000000";
        reduced_reg_2(8) <= X"00000000";
        reduced_reg_2(9) <= X"00000000";
        reduced_reg_2(10) <= X"00000000";
        reduced_reg_2(11) <= X"00000000";
        reduced_reg_2(12) <= X"00000000";
        reduced_reg_2(13) <= X"00000000";
        reduced_reg_2(14) <= X"00000000";
        reduced_reg_2(15) <= X"00000000";
        reduced_reg_2(16) <= X"00000000";
        reduced_reg_2(17) <= X"00000000";
        reduced_reg_2(18) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
        reduced_reg_2(5) <= reduced_reg_next_2(5);
        reduced_reg_2(6) <= reduced_reg_next_2(6);
        reduced_reg_2(7) <= reduced_reg_next_2(7);
        reduced_reg_2(8) <= reduced_reg_next_2(8);
        reduced_reg_2(9) <= reduced_reg_next_2(9);
        reduced_reg_2(10) <= reduced_reg_next_2(10);
        reduced_reg_2(11) <= reduced_reg_next_2(11);
        reduced_reg_2(12) <= reduced_reg_next_2(12);
        reduced_reg_2(13) <= reduced_reg_next_2(13);
        reduced_reg_2(14) <= reduced_reg_next_2(14);
        reduced_reg_2(15) <= reduced_reg_next_2(15);
        reduced_reg_2(16) <= reduced_reg_next_2(16);
        reduced_reg_2(17) <= reduced_reg_next_2(17);
        reduced_reg_2(18) <= reduced_reg_next_2(18);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  iq_measured_2 <= reduced_reg_2(18);
  reduced_reg_next_2(0) <= iq_measured_1;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);
  reduced_reg_next_2(5) <= reduced_reg_2(4);
  reduced_reg_next_2(6) <= reduced_reg_2(5);
  reduced_reg_next_2(7) <= reduced_reg_2(6);
  reduced_reg_next_2(8) <= reduced_reg_2(7);
  reduced_reg_next_2(9) <= reduced_reg_2(8);
  reduced_reg_next_2(10) <= reduced_reg_2(9);
  reduced_reg_next_2(11) <= reduced_reg_2(10);
  reduced_reg_next_2(12) <= reduced_reg_2(11);
  reduced_reg_next_2(13) <= reduced_reg_2(12);
  reduced_reg_next_2(14) <= reduced_reg_2(13);
  reduced_reg_next_2(15) <= reduced_reg_2(14);
  reduced_reg_next_2(16) <= reduced_reg_2(15);
  reduced_reg_next_2(17) <= reduced_reg_2(16);
  reduced_reg_next_2(18) <= reduced_reg_2(17);

  delayMatch27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch27_reg(0) <= X"00000000";
        delayMatch27_reg(1) <= X"00000000";
        delayMatch27_reg(2) <= X"00000000";
        delayMatch27_reg(3) <= X"00000000";
        delayMatch27_reg(4) <= X"00000000";
        delayMatch27_reg(5) <= X"00000000";
        delayMatch27_reg(6) <= X"00000000";
        delayMatch27_reg(7) <= X"00000000";
        delayMatch27_reg(8) <= X"00000000";
        delayMatch27_reg(9) <= X"00000000";
        delayMatch27_reg(10) <= X"00000000";
        delayMatch27_reg(11) <= X"00000000";
        delayMatch27_reg(12) <= X"00000000";
        delayMatch27_reg(13) <= X"00000000";
        delayMatch27_reg(14) <= X"00000000";
        delayMatch27_reg(15) <= X"00000000";
        delayMatch27_reg(16) <= X"00000000";
        delayMatch27_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch27_reg(0) <= delayMatch27_reg_next(0);
        delayMatch27_reg(1) <= delayMatch27_reg_next(1);
        delayMatch27_reg(2) <= delayMatch27_reg_next(2);
        delayMatch27_reg(3) <= delayMatch27_reg_next(3);
        delayMatch27_reg(4) <= delayMatch27_reg_next(4);
        delayMatch27_reg(5) <= delayMatch27_reg_next(5);
        delayMatch27_reg(6) <= delayMatch27_reg_next(6);
        delayMatch27_reg(7) <= delayMatch27_reg_next(7);
        delayMatch27_reg(8) <= delayMatch27_reg_next(8);
        delayMatch27_reg(9) <= delayMatch27_reg_next(9);
        delayMatch27_reg(10) <= delayMatch27_reg_next(10);
        delayMatch27_reg(11) <= delayMatch27_reg_next(11);
        delayMatch27_reg(12) <= delayMatch27_reg_next(12);
        delayMatch27_reg(13) <= delayMatch27_reg_next(13);
        delayMatch27_reg(14) <= delayMatch27_reg_next(14);
        delayMatch27_reg(15) <= delayMatch27_reg_next(15);
        delayMatch27_reg(16) <= delayMatch27_reg_next(16);
        delayMatch27_reg(17) <= delayMatch27_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch27_process;

  SampleTime_div_Lx_1 <= delayMatch27_reg(17);
  delayMatch27_reg_next(0) <= SampleTime_div_Lx;
  delayMatch27_reg_next(1) <= delayMatch27_reg(0);
  delayMatch27_reg_next(2) <= delayMatch27_reg(1);
  delayMatch27_reg_next(3) <= delayMatch27_reg(2);
  delayMatch27_reg_next(4) <= delayMatch27_reg(3);
  delayMatch27_reg_next(5) <= delayMatch27_reg(4);
  delayMatch27_reg_next(6) <= delayMatch27_reg(5);
  delayMatch27_reg_next(7) <= delayMatch27_reg(6);
  delayMatch27_reg_next(8) <= delayMatch27_reg(7);
  delayMatch27_reg_next(9) <= delayMatch27_reg(8);
  delayMatch27_reg_next(10) <= delayMatch27_reg(9);
  delayMatch27_reg_next(11) <= delayMatch27_reg(10);
  delayMatch27_reg_next(12) <= delayMatch27_reg(11);
  delayMatch27_reg_next(13) <= delayMatch27_reg(12);
  delayMatch27_reg_next(14) <= delayMatch27_reg(13);
  delayMatch27_reg_next(15) <= delayMatch27_reg(14);
  delayMatch27_reg_next(16) <= delayMatch27_reg(15);
  delayMatch27_reg_next(17) <= delayMatch27_reg(16);

  last_applied_optimal_voltage_vector_2 <= last_applied_optimal_voltage_vector(2);

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= X"00000000";
        delayMatch26_reg(1) <= X"00000000";
        delayMatch26_reg(2) <= X"00000000";
        delayMatch26_reg(3) <= X"00000000";
        delayMatch26_reg(4) <= X"00000000";
        delayMatch26_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
        delayMatch26_reg(3) <= delayMatch26_reg_next(3);
        delayMatch26_reg(4) <= delayMatch26_reg_next(4);
        delayMatch26_reg(5) <= delayMatch26_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  out0_17 <= delayMatch26_reg(5);
  delayMatch26_reg_next(0) <= last_applied_optimal_voltage_vector_2;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);
  delayMatch26_reg_next(3) <= delayMatch26_reg(2);
  delayMatch26_reg_next(4) <= delayMatch26_reg(3);
  delayMatch26_reg_next(5) <= delayMatch26_reg(4);

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch28_reg(0) <= X"00000000";
        delayMatch28_reg(1) <= X"00000000";
        delayMatch28_reg(2) <= X"00000000";
        delayMatch28_reg(3) <= X"00000000";
        delayMatch28_reg(4) <= X"00000000";
        delayMatch28_reg(5) <= X"00000000";
        delayMatch28_reg(6) <= X"00000000";
        delayMatch28_reg(7) <= X"00000000";
        delayMatch28_reg(8) <= X"00000000";
        delayMatch28_reg(9) <= X"00000000";
        delayMatch28_reg(10) <= X"00000000";
        delayMatch28_reg(11) <= X"00000000";
        delayMatch28_reg(12) <= X"00000000";
        delayMatch28_reg(13) <= X"00000000";
        delayMatch28_reg(14) <= X"00000000";
        delayMatch28_reg(15) <= X"00000000";
        delayMatch28_reg(16) <= X"00000000";
        delayMatch28_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch28_reg(0) <= delayMatch28_reg_next(0);
        delayMatch28_reg(1) <= delayMatch28_reg_next(1);
        delayMatch28_reg(2) <= delayMatch28_reg_next(2);
        delayMatch28_reg(3) <= delayMatch28_reg_next(3);
        delayMatch28_reg(4) <= delayMatch28_reg_next(4);
        delayMatch28_reg(5) <= delayMatch28_reg_next(5);
        delayMatch28_reg(6) <= delayMatch28_reg_next(6);
        delayMatch28_reg(7) <= delayMatch28_reg_next(7);
        delayMatch28_reg(8) <= delayMatch28_reg_next(8);
        delayMatch28_reg(9) <= delayMatch28_reg_next(9);
        delayMatch28_reg(10) <= delayMatch28_reg_next(10);
        delayMatch28_reg(11) <= delayMatch28_reg_next(11);
        delayMatch28_reg(12) <= delayMatch28_reg_next(12);
        delayMatch28_reg(13) <= delayMatch28_reg_next(13);
        delayMatch28_reg(14) <= delayMatch28_reg_next(14);
        delayMatch28_reg(15) <= delayMatch28_reg_next(15);
        delayMatch28_reg(16) <= delayMatch28_reg_next(16);
        delayMatch28_reg(17) <= delayMatch28_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  ix_measured_1 <= delayMatch28_reg(17);
  delayMatch28_reg_next(0) <= ix_measured;
  delayMatch28_reg_next(1) <= delayMatch28_reg(0);
  delayMatch28_reg_next(2) <= delayMatch28_reg(1);
  delayMatch28_reg_next(3) <= delayMatch28_reg(2);
  delayMatch28_reg_next(4) <= delayMatch28_reg(3);
  delayMatch28_reg_next(5) <= delayMatch28_reg(4);
  delayMatch28_reg_next(6) <= delayMatch28_reg(5);
  delayMatch28_reg_next(7) <= delayMatch28_reg(6);
  delayMatch28_reg_next(8) <= delayMatch28_reg(7);
  delayMatch28_reg_next(9) <= delayMatch28_reg(8);
  delayMatch28_reg_next(10) <= delayMatch28_reg(9);
  delayMatch28_reg_next(11) <= delayMatch28_reg(10);
  delayMatch28_reg_next(12) <= delayMatch28_reg(11);
  delayMatch28_reg_next(13) <= delayMatch28_reg(12);
  delayMatch28_reg_next(14) <= delayMatch28_reg(13);
  delayMatch28_reg_next(15) <= delayMatch28_reg(14);
  delayMatch28_reg_next(16) <= delayMatch28_reg(15);
  delayMatch28_reg_next(17) <= delayMatch28_reg(16);

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch31_reg(0) <= X"00000000";
        delayMatch31_reg(1) <= X"00000000";
        delayMatch31_reg(2) <= X"00000000";
        delayMatch31_reg(3) <= X"00000000";
        delayMatch31_reg(4) <= X"00000000";
        delayMatch31_reg(5) <= X"00000000";
        delayMatch31_reg(6) <= X"00000000";
        delayMatch31_reg(7) <= X"00000000";
        delayMatch31_reg(8) <= X"00000000";
        delayMatch31_reg(9) <= X"00000000";
        delayMatch31_reg(10) <= X"00000000";
        delayMatch31_reg(11) <= X"00000000";
        delayMatch31_reg(12) <= X"00000000";
        delayMatch31_reg(13) <= X"00000000";
        delayMatch31_reg(14) <= X"00000000";
        delayMatch31_reg(15) <= X"00000000";
        delayMatch31_reg(16) <= X"00000000";
        delayMatch31_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch31_reg(0) <= delayMatch31_reg_next(0);
        delayMatch31_reg(1) <= delayMatch31_reg_next(1);
        delayMatch31_reg(2) <= delayMatch31_reg_next(2);
        delayMatch31_reg(3) <= delayMatch31_reg_next(3);
        delayMatch31_reg(4) <= delayMatch31_reg_next(4);
        delayMatch31_reg(5) <= delayMatch31_reg_next(5);
        delayMatch31_reg(6) <= delayMatch31_reg_next(6);
        delayMatch31_reg(7) <= delayMatch31_reg_next(7);
        delayMatch31_reg(8) <= delayMatch31_reg_next(8);
        delayMatch31_reg(9) <= delayMatch31_reg_next(9);
        delayMatch31_reg(10) <= delayMatch31_reg_next(10);
        delayMatch31_reg(11) <= delayMatch31_reg_next(11);
        delayMatch31_reg(12) <= delayMatch31_reg_next(12);
        delayMatch31_reg(13) <= delayMatch31_reg_next(13);
        delayMatch31_reg(14) <= delayMatch31_reg_next(14);
        delayMatch31_reg(15) <= delayMatch31_reg_next(15);
        delayMatch31_reg(16) <= delayMatch31_reg_next(16);
        delayMatch31_reg(17) <= delayMatch31_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch31_process;

  SampleTime_div_Ly_1 <= delayMatch31_reg(17);
  delayMatch31_reg_next(0) <= SampleTime_div_Ly;
  delayMatch31_reg_next(1) <= delayMatch31_reg(0);
  delayMatch31_reg_next(2) <= delayMatch31_reg(1);
  delayMatch31_reg_next(3) <= delayMatch31_reg(2);
  delayMatch31_reg_next(4) <= delayMatch31_reg(3);
  delayMatch31_reg_next(5) <= delayMatch31_reg(4);
  delayMatch31_reg_next(6) <= delayMatch31_reg(5);
  delayMatch31_reg_next(7) <= delayMatch31_reg(6);
  delayMatch31_reg_next(8) <= delayMatch31_reg(7);
  delayMatch31_reg_next(9) <= delayMatch31_reg(8);
  delayMatch31_reg_next(10) <= delayMatch31_reg(9);
  delayMatch31_reg_next(11) <= delayMatch31_reg(10);
  delayMatch31_reg_next(12) <= delayMatch31_reg(11);
  delayMatch31_reg_next(13) <= delayMatch31_reg(12);
  delayMatch31_reg_next(14) <= delayMatch31_reg(13);
  delayMatch31_reg_next(15) <= delayMatch31_reg(14);
  delayMatch31_reg_next(16) <= delayMatch31_reg(15);
  delayMatch31_reg_next(17) <= delayMatch31_reg(16);

  last_applied_optimal_voltage_vector_3 <= last_applied_optimal_voltage_vector(3);

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch30_reg(0) <= X"00000000";
        delayMatch30_reg(1) <= X"00000000";
        delayMatch30_reg(2) <= X"00000000";
        delayMatch30_reg(3) <= X"00000000";
        delayMatch30_reg(4) <= X"00000000";
        delayMatch30_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch30_reg(0) <= delayMatch30_reg_next(0);
        delayMatch30_reg(1) <= delayMatch30_reg_next(1);
        delayMatch30_reg(2) <= delayMatch30_reg_next(2);
        delayMatch30_reg(3) <= delayMatch30_reg_next(3);
        delayMatch30_reg(4) <= delayMatch30_reg_next(4);
        delayMatch30_reg(5) <= delayMatch30_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch30_process;

  out0_21 <= delayMatch30_reg(5);
  delayMatch30_reg_next(0) <= last_applied_optimal_voltage_vector_3;
  delayMatch30_reg_next(1) <= delayMatch30_reg(0);
  delayMatch30_reg_next(2) <= delayMatch30_reg(1);
  delayMatch30_reg_next(3) <= delayMatch30_reg(2);
  delayMatch30_reg_next(4) <= delayMatch30_reg(3);
  delayMatch30_reg_next(5) <= delayMatch30_reg(4);

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch32_reg(0) <= X"00000000";
        delayMatch32_reg(1) <= X"00000000";
        delayMatch32_reg(2) <= X"00000000";
        delayMatch32_reg(3) <= X"00000000";
        delayMatch32_reg(4) <= X"00000000";
        delayMatch32_reg(5) <= X"00000000";
        delayMatch32_reg(6) <= X"00000000";
        delayMatch32_reg(7) <= X"00000000";
        delayMatch32_reg(8) <= X"00000000";
        delayMatch32_reg(9) <= X"00000000";
        delayMatch32_reg(10) <= X"00000000";
        delayMatch32_reg(11) <= X"00000000";
        delayMatch32_reg(12) <= X"00000000";
        delayMatch32_reg(13) <= X"00000000";
        delayMatch32_reg(14) <= X"00000000";
        delayMatch32_reg(15) <= X"00000000";
        delayMatch32_reg(16) <= X"00000000";
        delayMatch32_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch32_reg(0) <= delayMatch32_reg_next(0);
        delayMatch32_reg(1) <= delayMatch32_reg_next(1);
        delayMatch32_reg(2) <= delayMatch32_reg_next(2);
        delayMatch32_reg(3) <= delayMatch32_reg_next(3);
        delayMatch32_reg(4) <= delayMatch32_reg_next(4);
        delayMatch32_reg(5) <= delayMatch32_reg_next(5);
        delayMatch32_reg(6) <= delayMatch32_reg_next(6);
        delayMatch32_reg(7) <= delayMatch32_reg_next(7);
        delayMatch32_reg(8) <= delayMatch32_reg_next(8);
        delayMatch32_reg(9) <= delayMatch32_reg_next(9);
        delayMatch32_reg(10) <= delayMatch32_reg_next(10);
        delayMatch32_reg(11) <= delayMatch32_reg_next(11);
        delayMatch32_reg(12) <= delayMatch32_reg_next(12);
        delayMatch32_reg(13) <= delayMatch32_reg_next(13);
        delayMatch32_reg(14) <= delayMatch32_reg_next(14);
        delayMatch32_reg(15) <= delayMatch32_reg_next(15);
        delayMatch32_reg(16) <= delayMatch32_reg_next(16);
        delayMatch32_reg(17) <= delayMatch32_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch32_process;

  iy_measured_1 <= delayMatch32_reg(17);
  delayMatch32_reg_next(0) <= iy_measured;
  delayMatch32_reg_next(1) <= delayMatch32_reg(0);
  delayMatch32_reg_next(2) <= delayMatch32_reg(1);
  delayMatch32_reg_next(3) <= delayMatch32_reg(2);
  delayMatch32_reg_next(4) <= delayMatch32_reg(3);
  delayMatch32_reg_next(5) <= delayMatch32_reg(4);
  delayMatch32_reg_next(6) <= delayMatch32_reg(5);
  delayMatch32_reg_next(7) <= delayMatch32_reg(6);
  delayMatch32_reg_next(8) <= delayMatch32_reg(7);
  delayMatch32_reg_next(9) <= delayMatch32_reg(8);
  delayMatch32_reg_next(10) <= delayMatch32_reg(9);
  delayMatch32_reg_next(11) <= delayMatch32_reg(10);
  delayMatch32_reg_next(12) <= delayMatch32_reg(11);
  delayMatch32_reg_next(13) <= delayMatch32_reg(12);
  delayMatch32_reg_next(14) <= delayMatch32_reg(13);
  delayMatch32_reg_next(15) <= delayMatch32_reg(14);
  delayMatch32_reg_next(16) <= delayMatch32_reg(15);
  delayMatch32_reg_next(17) <= delayMatch32_reg(16);

END rtl;

