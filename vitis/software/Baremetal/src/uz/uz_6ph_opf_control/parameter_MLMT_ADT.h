#ifndef PARAMETER_MLMT_ADT_H
#define PARAMETER_MLMT_ADT_H



/*
header-file for the parameter of ML- and MT-Control strategy for
open phase faults in asymmetric dual three-phase machines
*/


struct kparameter{
    float k1;
    float k2;
    float k3;
    float k4;
    float k5;
    float k6;
    float k7;
    float k8;
};

typedef struct kparameter kparameter;

int get_index_OPF_2(int p1, int p2);
int get_index_OPF_3(int p1, int p2, int p3);
kparameter get_k_parameter(int p1, int p2, int p3, int num_OPF, int N1N2, int ML, float* a, int* error);


//////////////////////////////////////////////////////////////////////////////////////////////////////
const kparameter k_1OPF_2N_ML[6] = {
	{ -1.000000 , 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ -0.250000 , 0.433013, -0.433013, 0.750000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ -0.250000 , -0.433013, 0.433013, 0.750000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.750000 , 0.433013, -0.433013, -0.250000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.750000 , -0.433013, 0.433013, -0.250000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.000000 , 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000 }
};
const float a_1OPF_2N_ML[6] = { 0.554700, 0.554700, 0.554700, 0.554700, 0.554700, 0.554700};


const kparameter k_1OPF_2N_MT[6] = {
	{ -1.000000 , 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.500000 , 0.866025, -0.866025, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.500000 , -0.866025, 0.866025, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.500000 , 0.866025, -0.866025, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 0.500000 , -0.866025, 0.866025, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ -1.000000 , 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000 }
};
const float a_1OPF_2N_MT[6] = { 0.577350, 0.577350, 0.577350, 0.577350, 0.577350, 0.577350};


const kparameter k_2OPF_2N[15] = {
	{ -0.999998 , 0.000001, -0.000000, 0.999999, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -1.000000 , 0.000000, 0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -1.000000 , 0.000000, -3.464102, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -1.000000 , -0.000000, 3.464102, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -0.999998 , 0.000000, -0.000000, -0.999998, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -1.000000 , 0.000000, 0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 0.500000 , 0.866025, -0.866025, 0.500000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 2.000000 , -1.732051, -1.732051, 2.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -1.000000 , 3.464102, 0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 2.000000 , 1.732051, 1.732051, 2.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 0.500000 , -0.866025, 0.866025, 0.500000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ -1.000000 , -3.464102, 0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 1.000000 , -0.000000, 0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 0.999997 , 0.000000, 0.000000, -0.999998, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 1.000000 , -0.000000, 0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000 }
};
const float a_2OPF_2N[15] = { 0.500000, 0.500000, 0.288675, 0.288675, 0.577351, 0.500000, 0.577350, 0.288675, 0.288675, 0.288675, 0.577350, 0.288675, 0.500000, 0.500001, 0.500000};


const kparameter k_3OPF_2N[2] = {
	{ -1.000000 , 0.000000, -0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000 },
	{ 0.999995 , -0.000000, 0.000001, -0.999994, -0.000000, -0.000000, -0.000000, -0.000000 }
};
const float a_3OPF_2N[2] = { 0.500000, 0.500001};


const kparameter k_1OPF_1N_ML[6] = {
	{ -0.666821 , 0.000481, -0.002871, -0.001444, -0.333179, -0.000481, 0.333179, 0.000481 },
	{ -0.167711 , 0.289506, -0.289004, 0.499848, 0.165860, -0.288392, -0.165860, 0.288392 },
	{ -0.166735 , -0.288963, 0.288448, 0.499928, 0.166829, 0.288594, -0.166829, -0.288594 },
	{ 0.500187 , 0.289220, -0.287740, -0.166981, 0.288981, 0.166038, -0.288981, -0.166038 },
	{ 0.499209 , -0.287775, 0.289765, -0.167781, -0.288815, 0.166889, 0.288815, -0.166889 },
	{ 0.003219 , -0.001715, -0.004516, -0.669753, 0.004516, -0.330247, -0.004516, 0.330247 }
};
const float a_1OPF_1N_ML[6] = { 0.542257, 0.541664, 0.541841, 0.541659, 0.541497, 0.542072};


const kparameter k_2OPF_1N_ML[15] = {
	{ -0.833478 , 0.288738, -0.288424, 0.499892, -0.166522, -0.288738, 0.166522, 0.288737 },
	{ -0.833166 , -0.288603, 0.288965, 0.500125, -0.166834, 0.288603, 0.166834, -0.288603 },
	{ -1.014528 , -0.106289, -3.460207, -0.971518, 0.014528, 0.106289, -0.014529, -0.106290 },
	{ -0.177706 , -0.220624, 0.395259, -0.176620, -0.822294, 0.220624, 0.822294, -0.220624 },
	{ -0.747780 , 0.251349, 0.252220, -0.748651, -0.252220, -0.251349, 0.252220, 0.251349 },
	{ -0.334081 , -0.000891, 0.000000, 1.000000, 0.332960, -0.000445, -0.332959, 0.000445 },
	{ 0.374728 , 0.899328, -0.398504, 0.375713, 0.342250, -0.090984, -0.342250, 0.090984 },
	{ 1.973558 , -1.780755, -1.758492, 1.951295, -0.036120, -0.066531, 0.036120, 0.066531 },
	{ -0.176431 , 0.393821, -0.220675, -0.177321, 0.220675, -0.822679, -0.220675, 0.822679 },
	{ 0.354513 , 0.086415, 0.086563, 0.354364, 0.602290, 0.602345, -0.602290, -0.602345 },
	{ 0.374688 , -0.398566, 0.899602, 0.374744, -0.091734, 0.342204, 0.091735, -0.342204 },
	{ -0.979744 , -3.468940, -0.075595, -0.981937, 0.075595, -0.018063, -0.075595, 0.018063 },
	{ 1.000000 , -0.000000, -0.000087, -0.334460, -0.000044, 0.332770, 0.000044, -0.332770 },
	{ 0.500026 , 0.289064, -0.288660, -0.833109, 0.288660, -0.166891, -0.288660, 0.166891 },
	{ 0.499405 , -0.288764, 0.289019, -0.833282, -0.289019, -0.166718, 0.289019, 0.166718 }
};
const float a_2OPF_1N_ML[15] = { 0.493160, 0.493153, 0.281764, 0.481851, 0.526690, 0.493319, 0.526942, 0.284478, 0.481999, 0.482049, 0.526996, 0.286248, 0.493230, 0.493145, 0.493153};


const kparameter k_1OPF_1N_MT[6] = {
	{ -0.641117 , -0.208882, -0.754233, -0.295465, -0.358883, 0.208883, 0.358883, -0.208883 },
	{ 0.297353 , -0.212224, -0.750520, 0.643197, -0.001293, -0.415113, 0.001293, 0.415112 },
	{ -0.174961 , -1.023221, 0.060481, 0.170875, 0.360141, 0.206433, -0.360142, -0.206433 },
	{ 0.170830 , 0.060320, -1.023459, -0.174804, 0.206353, 0.360359, -0.206353, -0.360359 },
	{ 0.643161 , -0.750576, -0.212217, 0.297355, -0.415138, -0.001342, 0.415139, 0.001341 },
	{ -0.295475 , -0.754235, -0.208902, -0.641112, 0.208902, -0.358887, -0.208902, 0.358888 }
};
const float a_1OPF_1N_MT[6] = { 0.694443, 0.694394, 0.694394, 0.694444, 0.694397, 0.694444};


const kparameter k_2OPF_1N_MT[15] = {
	{ -0.535288 , 0.268576, -0.804906, 0.534813, -0.464713, -0.268575, 0.464717, 0.268574 },
	{ -0.998740 , -0.540374, 0.002182, 0.064046, -0.001260, 0.540373, 0.001259, -0.540373 },
	{ -1.000000 , 0.000000, -3.464100, -1.000000, -0.000000, -0.000000, -0.000000, 0.000000 },
	{ -0.000002 , -0.267948, -0.267941, -0.000002, -0.999998, 0.267949, 0.999998, -0.267949 },
	{ -1.000000 , -0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ -0.102523 , -0.527411, 0.000000, 1.000000, 0.448739, -0.263706, -0.448739, 0.263706 },
	{ 0.500000 , 0.866025, -0.866025, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000 },
	{ 2.000000 , -1.732050, -1.732051, 2.000000, -0.000001, 0.000000, 0.000001, -0.000001 },
	{ -0.000000 , -0.267949, -0.267949, -0.000000, 0.267949, -1.000000, -0.267949, 1.000000 },
	{ 0.000007 , -0.267947, -0.267941, 0.000002, 0.732048, 0.732050, -0.732048, -0.732050 },
	{ 0.500000 , -0.866025, 0.866025, 0.500000, -0.000000, 0.000000, 0.000000, 0.000000 },
	{ -1.000000 , -3.464101, -0.000000, -1.000000, 0.000000, -0.000000, -0.000000, 0.000000 },
	{ 1.000001 , 0.000000, -0.535656, -0.072665, -0.267823, 0.463677, 0.267827, -0.463668 },
	{ 0.071864 , 0.000001, -0.535860, -0.999999, 0.535860, 0.000000, -0.535859, 0.000000 },
	{ 0.543655 , -0.796037, 0.263471, -0.540408, -0.263470, -0.459594, 0.263471, 0.459593 }
};
const float a_2OPF_1N_MT[15] = { 0.557675, 0.557658, 0.288675, 0.557676, 0.577350, 0.557617, 0.577350, 0.288675, 0.557677, 0.557676, 0.577350, 0.288675, 0.557673, 0.557675, 0.557668};


const kparameter k_3OPF_1N[20] = {
	{ -1.000000 , 0.000000, -0.000000, 1.000000, -0.000000, -0.000000, 0.000000, 0.000000 },
	{ 1.365513 , 1.365738, -4.097203, -1.365591, -2.365422, -1.365743, 2.365222, 1.365630 },
	{ 0.732048 , -0.999997, -2.999995, 2.732041, -1.732047, 0.999994, 1.732049, -0.999996 },
	{ -1.000000 , 0.732051, 0.000000, -0.267949, -0.000000, -0.732051, 0.000000, 0.732051 },
	{ -2.732039 , -0.999999, -2.999980, -0.732047, 1.732039, 0.999997, -1.732049, -1.000001 },
	{ -0.366022 , -0.366027, 1.098080, 0.366021, -0.633977, 0.366027, 0.633969, -0.366025 },
	{ -1.000007 , -2.731989, -0.000008, -3.731943, 0.000008, 2.731987, -0.000010, -2.731948 },
	{ 1.000000 , -0.000009, -3.999997, -0.999945, -2.000000, 0.000016, 1.999999, -0.000028 },
	{ -3.731982 , -0.000226, -2.732008, -1.000133, 2.731989, 0.000215, -2.732007, -0.000140 },
	{ -0.267951 , 0.000000, 0.732052, -0.999998, -0.732050, -0.000001, 0.732052, 0.000000 },
	{ 0.267951 , 0.732053, 0.000000, 0.999999, 0.633976, 0.366026, -0.633973, -0.366022 },
	{ 3.731965 , -2.732013, 0.000002, 1.000000, 2.365977, -1.366002, -2.365960, 1.365996 },
	{ -0.999993 , -3.999996, -0.000000, 0.999999, 0.000004, -1.999999, -0.000002, 1.999999 },
	{ 1.000008 , 0.000011, -2.732013, 3.731965, -1.365990, 2.365975, 1.365998, -2.365989 },
	{ 0.366026 , 1.098077, -0.366025, -0.366025, 0.366026, -0.633974, -0.366026, 0.633975 },
	{ 2.732038 , -2.999994, -0.999993, 0.732047, 0.999999, -1.732051, -0.999993, 1.732048 },
	{ 0.999998 , -0.000001, 0.732052, 0.267951, 0.366023, 0.633972, -0.366025, -0.633974 },
	{ -0.732066 , -2.999950, -1.000012, -2.732018, 1.000005, 1.732042, -1.000009, -1.732023 },
	{ -1.366017 , -4.098054, 1.366019, 1.366011, -1.366016, -2.366004, 1.366020, 2.366010 },
	{ 1.000000 , 0.000000, -0.000000, -1.000000, 0.000000, 0.000000, -0.000000, -0.000000 }
};
const float a_3OPF_1N[20] = { 0.500000, 0.122035, 0.149430, 0.408248, 0.149430, 0.408249, 0.122011, 0.149430, 0.122010, 0.408249, 0.408249, 0.122011, 0.149429, 0.122011, 0.408248, 0.149430, 0.408249, 0.149430, 0.122009, 0.500000};





///////////////////////////////////////////////////////////

kparameter get_k_parameter(int p1, int p2, int p3, int num_OPF, int N1N2, int ML, float* a, int* error){

//check input values
kparameter k = {0};
int i = 0;
*error = 0;

// check parameter:

if(num_OPF == 0){
	*a = 1.0f;
	return k;
}

if(N1N2 == 2){
    if(num_OPF == 1){
            if(ML){
                k = k_1OPF_2N_ML[p1-1];
                *a = a_1OPF_2N_ML[p1-1];
            }
            else{   //MT
                k = k_1OPF_2N_MT[p1-1];
                *a = a_1OPF_2N_MT[p1-1];
            }
    }
    else if(num_OPF == 2){
    	i = get_index_OPF_2(p1, p2);
        k = k_2OPF_2N[i];
        *a = a_2OPF_2N[i];
    }
    else if(num_OPF == 3){
        if( (p1 == 1) && (p2 == 2) && (p3 == 3) ){
            k = k_3OPF_2N[0];
            *a = a_3OPF_2N[0];
        }
        else if( (p1 == 4) && (p2 == 5) && (p3 == 6) ){
            k = k_3OPF_2N[1];
            *a = a_3OPF_2N[1];
        }
    }
    else{
        //error
    	*error = -1;
    }
}
else if( N1N2 ==1){
    if( num_OPF == 1){
            if(ML){
                k = k_1OPF_1N_ML[p1-1];
                *a = a_1OPF_1N_ML[p1-1];
            }
            else{   //MT
                k = k_1OPF_1N_MT[p1-1];
                *a = a_1OPF_1N_MT[p1-1];
            }
    }
    else if(num_OPF == 2){
            if(ML){
            	i =get_index_OPF_2(p1, p2);
                k = k_2OPF_1N_ML[i];
                *a = a_2OPF_1N_ML[i];
            }
            else{   //MT
            	i = get_index_OPF_2(p1, p2);
                k = k_2OPF_1N_MT[i];
                *a = a_2OPF_1N_MT[i];
            }
    }
    else if(num_OPF == 3){
    			i = get_index_OPF_3(p1,p2,p3);
                k = k_3OPF_1N[i];
                *a = a_3OPF_1N[i];
    }
    else{
        //error
    	*error = -1;
    }
}
return k;
}


int get_index_OPF_2(int p1, int p2){
    int index = 0;

        if(p1 == 1){
             if(p2 == 2){
                    index = 0;   // 1-2
            }
            else if (p2 == 3){
                    index = 1;   // 1-3
            }
            else if(p2 == 4){
                    index = 2;   // 1-4
            }
            else if(p2 == 5){
                    index = 3;   // 1-5
            }
            else if(p2 == 6){
                    index = 4;   // 1-6
            }
        }
        else if(p1 == 2){
            if(p2 == 3){
                    index = 5;   // 2-3
            }
            else if(p2 == 4){
                    index = 6;   // 2-4
            }
            else if(p2 == 5){
                    index = 7;   // 2-5
            }
            else if(p2 == 6){
                    index = 8;   // 2-6
            }
        }
        else if(p1 == 3){
            if(p2 == 4){
                    index = 9;   // 3-4
            }
            else if(p2 == 5){
                    index = 10;  // 3-5
            }
            else if (p2 == 6){
                    index = 11;  // 3-6
            }
        }
        else if(p1 == 4){
            if(p2 == 5){
                    index = 12;  // 4-5
            }
            else if(p2 == 6){
                    index = 13;  // 4-6
            }
        }
        else if (p1 == 5 && p2 == 6){   // 5-6
                    index = 14;
        }
    return index;
}

int get_index_OPF_3(int p1, int p2, int p3){
    int index = 0;

        if(p1 == 1){
             if(p2 == 2){
                    if(p3 == 3){
                            index = 0;   // 1-2-3
                    }
                    else if(p3 == 4){
                            index = 1;   // 1-2-4
                    }
                    else if(p3 == 5){
                            index = 2;   // 1-2-5
                    }
                    else if(p3 == 6){
                            index = 3;   // 1-2-6
                    }
            }
            else if (p2 == 3){
                    if(p3 == 4){
                            index = 4;   // 1-3-4
                    }
                    else if(p3 == 5){
                            index = 5;   // 1-3-5
                    }
                    else if(p3 == 6){
                            index = 6;   // 1-3-6
                    }
            }
            else if(p2 == 4){
                    if(p3 == 5){
                            index = 7;   // 1-4-5
                    }
                    else if(p3 == 6){
                            index = 8;   // 1-4-6
                    }
            }
            else if((p2 == 5) && (p3 == 6)){
                            index = 9;  // 1-5-6
            }
        }
        else if(p1 == 2){
            if(p2 == 3){
                    if(p3 == 4){
                            index = 10;   // 2-3-4
                    }
                    else if(p3 == 5){
                            index = 11;   // 2-3-5
                    }
                    else if(p3 == 6){
                            index = 12;   // 2-3-6
                    }
            }
            else if(p2 == 4){
                    if(p3 == 5){
                            index = 13;   // 2-4-5
                    }
                    else if(p3 == 6){
                            index = 14;   // 2-4-6
                    }
            }
            else if((p2 == 5)&& (p3 == 6) ){
                            index = 15;   // 2-5-6
            }
        }
        else if(p1 == 3){
            if(p2 == 4){
                    if(p3 == 5){
                            index = 16;  // 3-4-5
                    }
                    else if (p3 == 6){
                            index = 17;  // 3-4-6
                    }
            }
            else if((p2 == 5) && (p3 == 6) ){
                            index = 18;  // 3-5-6
            }
        }
        else if((p1 == 4) && (p2 == 5) && (p3 == 6) ) {
            if(p2 == 5){
                            index = 19;  // 4-5-6
            }
        }
    return index;
}
#endif // PARAMETER_MLMT_ADT_H
