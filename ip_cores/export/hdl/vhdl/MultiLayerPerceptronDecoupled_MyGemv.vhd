-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MultiLayerPerceptronDecoupled_MyGemv is
port (
    weights_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_0_we0 : OUT STD_LOGIC;
    weights_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_0_ce1 : OUT STD_LOGIC;
    weights_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_0_we1 : OUT STD_LOGIC;
    weights_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_1_ce0 : OUT STD_LOGIC;
    weights_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_we0 : OUT STD_LOGIC;
    weights_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_1_ce1 : OUT STD_LOGIC;
    weights_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_we1 : OUT STD_LOGIC;
    weights_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_2_ce0 : OUT STD_LOGIC;
    weights_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_2_we0 : OUT STD_LOGIC;
    weights_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_2_ce1 : OUT STD_LOGIC;
    weights_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_2_we1 : OUT STD_LOGIC;
    weights_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_3_ce0 : OUT STD_LOGIC;
    weights_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_3_we0 : OUT STD_LOGIC;
    weights_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_3_ce1 : OUT STD_LOGIC;
    weights_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_3_we1 : OUT STD_LOGIC;
    weights_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_4_ce0 : OUT STD_LOGIC;
    weights_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_4_we0 : OUT STD_LOGIC;
    weights_4_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_4_ce1 : OUT STD_LOGIC;
    weights_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_4_we1 : OUT STD_LOGIC;
    weights_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_5_ce0 : OUT STD_LOGIC;
    weights_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_5_we0 : OUT STD_LOGIC;
    weights_5_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_5_ce1 : OUT STD_LOGIC;
    weights_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_5_we1 : OUT STD_LOGIC;
    weights_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_6_ce0 : OUT STD_LOGIC;
    weights_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_6_we0 : OUT STD_LOGIC;
    weights_6_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_6_ce1 : OUT STD_LOGIC;
    weights_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_6_we1 : OUT STD_LOGIC;
    weights_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_7_ce0 : OUT STD_LOGIC;
    weights_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_7_we0 : OUT STD_LOGIC;
    weights_7_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_7_ce1 : OUT STD_LOGIC;
    weights_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    weights_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_7_we1 : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we0 : OUT STD_LOGIC;
    input_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we1 : OUT STD_LOGIC;
    bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_we0 : OUT STD_LOGIC;
    bias_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bias_ce1 : OUT STD_LOGIC;
    bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_we1 : OUT STD_LOGIC;
    outputPort_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    outputPort_ce0 : OUT STD_LOGIC;
    outputPort_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputPort_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputPort_we0 : OUT STD_LOGIC;
    outputPort_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    outputPort_ce1 : OUT STD_LOGIC;
    outputPort_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputPort_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputPort_we1 : OUT STD_LOGIC;
    p_n : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_n_ap_vld : IN STD_LOGIC;
    p_k_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of MultiLayerPerceptronDecoupled_MyGemv is 
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal MyGemv_entry75_U0_ap_start : STD_LOGIC;
    signal MyGemv_entry75_U0_ap_done : STD_LOGIC;
    signal MyGemv_entry75_U0_ap_continue : STD_LOGIC;
    signal MyGemv_entry75_U0_ap_idle : STD_LOGIC;
    signal MyGemv_entry75_U0_ap_ready : STD_LOGIC;
    signal MyGemv_entry75_U0_p_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal MyGemv_entry75_U0_p_n_out_write : STD_LOGIC;
    signal MyGemv_entry75_U0_p_n_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal MyGemv_entry75_U0_p_n_out1_write : STD_LOGIC;
    signal MyGemv_entry75_U0_p_n_out2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal MyGemv_entry75_U0_p_n_out2_write : STD_LOGIC;
    signal MyGemv_entry75_U0_p_k_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal MyGemv_entry75_U0_p_k_out_write : STD_LOGIC;
    signal MyGemv_entry75_U0_p_k_out3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal MyGemv_entry75_U0_p_k_out3_write : STD_LOGIC;
    signal gem2Stream_float_8u_U0_ap_start : STD_LOGIC;
    signal gem2Stream_float_8u_U0_ap_done : STD_LOGIC;
    signal gem2Stream_float_8u_U0_ap_continue : STD_LOGIC;
    signal gem2Stream_float_8u_U0_ap_idle : STD_LOGIC;
    signal gem2Stream_float_8u_U0_ap_ready : STD_LOGIC;
    signal gem2Stream_float_8u_U0_start_out : STD_LOGIC;
    signal gem2Stream_float_8u_U0_start_write : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_out_din : STD_LOGIC_VECTOR (255 downto 0);
    signal gem2Stream_float_8u_U0_p_out_write : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_m_read : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_n_read : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_0_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_1_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_2_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_3_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_4_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_4_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_5_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_6_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_6_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_in_7_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gem2Stream_float_8u_U0_p_in_7_ce0 : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gem2Stream_float_8u_U0_p_m_out_write : STD_LOGIC;
    signal gem2Stream_float_8u_U0_p_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gem2Stream_float_8u_U0_p_n_out_write : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_ap_start : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_ap_done : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_ap_continue : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_ap_idle : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_ap_ready : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_p_out_din : STD_LOGIC_VECTOR (255 downto 0);
    signal vec2GemStream_float_8u_1_U0_p_out_write : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_p_m_read : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_p_n_read : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_p_in_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal vec2GemStream_float_8u_1_U0_p_in_ce0 : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_p_in_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal vec2GemStream_float_8u_1_U0_p_in_ce1 : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_start : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_done : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_continue : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_idle : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_ready : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readVec2Stream_float_1u_U0_p_out_write : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_in_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readVec2Stream_float_1u_U0_p_in_ce0 : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_p_n_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_ap_start : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_start_out : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_start_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_l_strWeights5_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_l_strInput6_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_l_strBias9_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_l_strMv8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_U0_l_strMv8_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_p_m_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_p_n_read : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_p_m_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gemv_float_3u_unsigned_int_U0_p_m_out_write : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_ap_done : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_ap_idle : STD_LOGIC;
    signal gemv_float_3u_unsigned_int_U0_ap_continue : STD_LOGIC;
    signal FcnActivation_U0_ap_start : STD_LOGIC;
    signal FcnActivation_U0_ap_done : STD_LOGIC;
    signal FcnActivation_U0_ap_continue : STD_LOGIC;
    signal FcnActivation_U0_ap_idle : STD_LOGIC;
    signal FcnActivation_U0_ap_ready : STD_LOGIC;
    signal FcnActivation_U0_start_out : STD_LOGIC;
    signal FcnActivation_U0_start_write : STD_LOGIC;
    signal FcnActivation_U0_l_strMv8_read : STD_LOGIC;
    signal FcnActivation_U0_l_strOutput7_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FcnActivation_U0_l_strOutput7_write : STD_LOGIC;
    signal FcnActivation_U0_p_n_read : STD_LOGIC;
    signal FcnActivation_U0_p_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FcnActivation_U0_p_n_out_write : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_start : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_done : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_continue : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_idle : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_ap_ready : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_in_read : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_n_read : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_out_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal writeStream2Vec_float_1u_U0_p_out_ce0 : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_out_we0 : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_p_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal p_n_c_full_n : STD_LOGIC;
    signal p_n_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c_empty_n : STD_LOGIC;
    signal p_n_c15_full_n : STD_LOGIC;
    signal p_n_c15_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c15_empty_n : STD_LOGIC;
    signal p_n_c16_full_n : STD_LOGIC;
    signal p_n_c16_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c16_empty_n : STD_LOGIC;
    signal p_k_c_full_n : STD_LOGIC;
    signal p_k_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_c_empty_n : STD_LOGIC;
    signal p_k_c17_full_n : STD_LOGIC;
    signal p_k_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_c17_empty_n : STD_LOGIC;
    signal l_strWeights_full_n : STD_LOGIC;
    signal l_strWeights_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal l_strWeights_empty_n : STD_LOGIC;
    signal p_n_c18_full_n : STD_LOGIC;
    signal p_n_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c18_empty_n : STD_LOGIC;
    signal p_k_c19_full_n : STD_LOGIC;
    signal p_k_c19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_c19_empty_n : STD_LOGIC;
    signal l_strInput_full_n : STD_LOGIC;
    signal l_strInput_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal l_strInput_empty_n : STD_LOGIC;
    signal l_strBias_full_n : STD_LOGIC;
    signal l_strBias_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_strBias_empty_n : STD_LOGIC;
    signal l_strMv_full_n : STD_LOGIC;
    signal l_strMv_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_strMv_empty_n : STD_LOGIC;
    signal p_n_c20_full_n : STD_LOGIC;
    signal p_n_c20_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c20_empty_n : STD_LOGIC;
    signal l_strOutput_full_n : STD_LOGIC;
    signal l_strOutput_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal l_strOutput_empty_n : STD_LOGIC;
    signal p_n_c21_full_n : STD_LOGIC;
    signal p_n_c21_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_n_c21_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_MyGemv_entry75_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_MyGemv_entry75_U0_ap_ready : STD_LOGIC;
    signal MyGemv_entry75_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_gem2Stream_float_8u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_gem2Stream_float_8u_U0_ap_ready : STD_LOGIC;
    signal gem2Stream_float_8u_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_vec2GemStream_float_8u_1_U0_ap_ready : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readVec2Stream_float_1u_U0_ap_ready : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MyGemv_entry75_U0_start_full_n : STD_LOGIC;
    signal MyGemv_entry75_U0_start_write : STD_LOGIC;
    signal start_for_gemv_float_3u_unsigned_int_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gemv_float_3u_unsigned_int_U0_full_n : STD_LOGIC;
    signal start_for_gemv_float_3u_unsigned_int_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gemv_float_3u_unsigned_int_U0_empty_n : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_start_full_n : STD_LOGIC;
    signal vec2GemStream_float_8u_1_U0_start_write : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_start_full_n : STD_LOGIC;
    signal readVec2Stream_float_1u_U0_start_write : STD_LOGIC;
    signal start_for_FcnActivation_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FcnActivation_U0_full_n : STD_LOGIC;
    signal start_for_FcnActivation_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FcnActivation_U0_empty_n : STD_LOGIC;
    signal start_for_writeStream2Vec_float_1u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeStream2Vec_float_1u_U0_full_n : STD_LOGIC;
    signal start_for_writeStream2Vec_float_1u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeStream2Vec_float_1u_U0_empty_n : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_start_full_n : STD_LOGIC;
    signal writeStream2Vec_float_1u_U0_start_write : STD_LOGIC;

    component MultiLayerPerceptronDecoupled_MyGemv_entry75 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_n : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_full_n : IN STD_LOGIC;
        p_n_out_write : OUT STD_LOGIC;
        p_n_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out1_full_n : IN STD_LOGIC;
        p_n_out1_write : OUT STD_LOGIC;
        p_n_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out2_full_n : IN STD_LOGIC;
        p_n_out2_write : OUT STD_LOGIC;
        p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_k_out_full_n : IN STD_LOGIC;
        p_k_out_write : OUT STD_LOGIC;
        p_k_out3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_k_out3_full_n : IN STD_LOGIC;
        p_k_out3_write : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_gem2Stream_float_8u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_in_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_0_ce0 : OUT STD_LOGIC;
        p_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_1_ce0 : OUT STD_LOGIC;
        p_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_2_ce0 : OUT STD_LOGIC;
        p_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_3_ce0 : OUT STD_LOGIC;
        p_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_4_ce0 : OUT STD_LOGIC;
        p_in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_5_ce0 : OUT STD_LOGIC;
        p_in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_6_ce0 : OUT STD_LOGIC;
        p_in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_in_7_ce0 : OUT STD_LOGIC;
        p_in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_full_n : IN STD_LOGIC;
        p_n_out_write : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_vec2GemStream_float_8u_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_in_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        p_in_ce0 : OUT STD_LOGIC;
        p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        p_in_ce1 : OUT STD_LOGIC;
        p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_readVec2Stream_float_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_in_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_in_ce0 : OUT STD_LOGIC;
        p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_s IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        l_strWeights5_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        l_strWeights5_empty_n : IN STD_LOGIC;
        l_strWeights5_read : OUT STD_LOGIC;
        l_strInput6_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        l_strInput6_empty_n : IN STD_LOGIC;
        l_strInput6_read : OUT STD_LOGIC;
        l_strBias9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        l_strBias9_empty_n : IN STD_LOGIC;
        l_strBias9_read : OUT STD_LOGIC;
        l_strMv8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        l_strMv8_full_n : IN STD_LOGIC;
        l_strMv8_write : OUT STD_LOGIC;
        p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_m_empty_n : IN STD_LOGIC;
        p_m_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_m_out_full_n : IN STD_LOGIC;
        p_m_out_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_FcnActivation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        l_strMv8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        l_strMv8_empty_n : IN STD_LOGIC;
        l_strMv8_read : OUT STD_LOGIC;
        l_strOutput7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        l_strOutput7_full_n : IN STD_LOGIC;
        l_strOutput7_write : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_n_out_full_n : IN STD_LOGIC;
        p_n_out_write : OUT STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_writeStream2Vec_float_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in_empty_n : IN STD_LOGIC;
        p_in_read : OUT STD_LOGIC;
        p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_n_empty_n : IN STD_LOGIC;
        p_n_read : OUT STD_LOGIC;
        p_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        p_out_ce0 : OUT STD_LOGIC;
        p_out_we0 : OUT STD_LOGIC;
        p_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_fifo_w256_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_start_for_gemv_float_3u_unsigned_int_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_start_for_FcnActivation_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component MultiLayerPerceptronDecoupled_start_for_writeStream2Vec_float_1u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    MyGemv_entry75_U0 : component MultiLayerPerceptronDecoupled_MyGemv_entry75
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => MyGemv_entry75_U0_ap_start,
        ap_done => MyGemv_entry75_U0_ap_done,
        ap_continue => MyGemv_entry75_U0_ap_continue,
        ap_idle => MyGemv_entry75_U0_ap_idle,
        ap_ready => MyGemv_entry75_U0_ap_ready,
        p_n => p_n,
        p_k => p_k,
        p_n_out_din => MyGemv_entry75_U0_p_n_out_din,
        p_n_out_full_n => p_n_c_full_n,
        p_n_out_write => MyGemv_entry75_U0_p_n_out_write,
        p_n_out1_din => MyGemv_entry75_U0_p_n_out1_din,
        p_n_out1_full_n => p_n_c15_full_n,
        p_n_out1_write => MyGemv_entry75_U0_p_n_out1_write,
        p_n_out2_din => MyGemv_entry75_U0_p_n_out2_din,
        p_n_out2_full_n => p_n_c16_full_n,
        p_n_out2_write => MyGemv_entry75_U0_p_n_out2_write,
        p_k_out_din => MyGemv_entry75_U0_p_k_out_din,
        p_k_out_full_n => p_k_c_full_n,
        p_k_out_write => MyGemv_entry75_U0_p_k_out_write,
        p_k_out3_din => MyGemv_entry75_U0_p_k_out3_din,
        p_k_out3_full_n => p_k_c17_full_n,
        p_k_out3_write => MyGemv_entry75_U0_p_k_out3_write);

    gem2Stream_float_8u_U0 : component MultiLayerPerceptronDecoupled_gem2Stream_float_8u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gem2Stream_float_8u_U0_ap_start,
        start_full_n => start_for_gemv_float_3u_unsigned_int_U0_full_n,
        ap_done => gem2Stream_float_8u_U0_ap_done,
        ap_continue => gem2Stream_float_8u_U0_ap_continue,
        ap_idle => gem2Stream_float_8u_U0_ap_idle,
        ap_ready => gem2Stream_float_8u_U0_ap_ready,
        start_out => gem2Stream_float_8u_U0_start_out,
        start_write => gem2Stream_float_8u_U0_start_write,
        p_out_din => gem2Stream_float_8u_U0_p_out_din,
        p_out_full_n => l_strWeights_full_n,
        p_out_write => gem2Stream_float_8u_U0_p_out_write,
        p_m_dout => p_n_c_dout,
        p_m_empty_n => p_n_c_empty_n,
        p_m_read => gem2Stream_float_8u_U0_p_m_read,
        p_n_dout => p_k_c_dout,
        p_n_empty_n => p_k_c_empty_n,
        p_n_read => gem2Stream_float_8u_U0_p_n_read,
        p_in_0_address0 => gem2Stream_float_8u_U0_p_in_0_address0,
        p_in_0_ce0 => gem2Stream_float_8u_U0_p_in_0_ce0,
        p_in_0_q0 => weights_0_q0,
        p_in_1_address0 => gem2Stream_float_8u_U0_p_in_1_address0,
        p_in_1_ce0 => gem2Stream_float_8u_U0_p_in_1_ce0,
        p_in_1_q0 => weights_1_q0,
        p_in_2_address0 => gem2Stream_float_8u_U0_p_in_2_address0,
        p_in_2_ce0 => gem2Stream_float_8u_U0_p_in_2_ce0,
        p_in_2_q0 => weights_2_q0,
        p_in_3_address0 => gem2Stream_float_8u_U0_p_in_3_address0,
        p_in_3_ce0 => gem2Stream_float_8u_U0_p_in_3_ce0,
        p_in_3_q0 => weights_3_q0,
        p_in_4_address0 => gem2Stream_float_8u_U0_p_in_4_address0,
        p_in_4_ce0 => gem2Stream_float_8u_U0_p_in_4_ce0,
        p_in_4_q0 => weights_4_q0,
        p_in_5_address0 => gem2Stream_float_8u_U0_p_in_5_address0,
        p_in_5_ce0 => gem2Stream_float_8u_U0_p_in_5_ce0,
        p_in_5_q0 => weights_5_q0,
        p_in_6_address0 => gem2Stream_float_8u_U0_p_in_6_address0,
        p_in_6_ce0 => gem2Stream_float_8u_U0_p_in_6_ce0,
        p_in_6_q0 => weights_6_q0,
        p_in_7_address0 => gem2Stream_float_8u_U0_p_in_7_address0,
        p_in_7_ce0 => gem2Stream_float_8u_U0_p_in_7_ce0,
        p_in_7_q0 => weights_7_q0,
        p_m_out_din => gem2Stream_float_8u_U0_p_m_out_din,
        p_m_out_full_n => p_n_c18_full_n,
        p_m_out_write => gem2Stream_float_8u_U0_p_m_out_write,
        p_n_out_din => gem2Stream_float_8u_U0_p_n_out_din,
        p_n_out_full_n => p_k_c19_full_n,
        p_n_out_write => gem2Stream_float_8u_U0_p_n_out_write);

    vec2GemStream_float_8u_1_U0 : component MultiLayerPerceptronDecoupled_vec2GemStream_float_8u_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => vec2GemStream_float_8u_1_U0_ap_start,
        ap_done => vec2GemStream_float_8u_1_U0_ap_done,
        ap_continue => vec2GemStream_float_8u_1_U0_ap_continue,
        ap_idle => vec2GemStream_float_8u_1_U0_ap_idle,
        ap_ready => vec2GemStream_float_8u_1_U0_ap_ready,
        p_out_din => vec2GemStream_float_8u_1_U0_p_out_din,
        p_out_full_n => l_strInput_full_n,
        p_out_write => vec2GemStream_float_8u_1_U0_p_out_write,
        p_m_dout => p_n_c15_dout,
        p_m_empty_n => p_n_c15_empty_n,
        p_m_read => vec2GemStream_float_8u_1_U0_p_m_read,
        p_n_dout => p_k_c17_dout,
        p_n_empty_n => p_k_c17_empty_n,
        p_n_read => vec2GemStream_float_8u_1_U0_p_n_read,
        p_in_address0 => vec2GemStream_float_8u_1_U0_p_in_address0,
        p_in_ce0 => vec2GemStream_float_8u_1_U0_p_in_ce0,
        p_in_q0 => input_r_q0,
        p_in_address1 => vec2GemStream_float_8u_1_U0_p_in_address1,
        p_in_ce1 => vec2GemStream_float_8u_1_U0_p_in_ce1,
        p_in_q1 => input_r_q1);

    readVec2Stream_float_1u_U0 : component MultiLayerPerceptronDecoupled_readVec2Stream_float_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readVec2Stream_float_1u_U0_ap_start,
        ap_done => readVec2Stream_float_1u_U0_ap_done,
        ap_continue => readVec2Stream_float_1u_U0_ap_continue,
        ap_idle => readVec2Stream_float_1u_U0_ap_idle,
        ap_ready => readVec2Stream_float_1u_U0_ap_ready,
        p_out_din => readVec2Stream_float_1u_U0_p_out_din,
        p_out_full_n => l_strBias_full_n,
        p_out_write => readVec2Stream_float_1u_U0_p_out_write,
        p_in_address0 => readVec2Stream_float_1u_U0_p_in_address0,
        p_in_ce0 => readVec2Stream_float_1u_U0_p_in_ce0,
        p_in_q0 => bias_q0,
        p_n_dout => p_n_c16_dout,
        p_n_empty_n => p_n_c16_empty_n,
        p_n_read => readVec2Stream_float_1u_U0_p_n_read);

    gemv_float_3u_unsigned_int_U0 : component MultiLayerPerceptronDecoupled_gemv_float_3u_unsigned_int_s
    port map (
        ap_start => gemv_float_3u_unsigned_int_U0_ap_start,
        start_full_n => start_for_FcnActivation_U0_full_n,
        start_out => gemv_float_3u_unsigned_int_U0_start_out,
        start_write => gemv_float_3u_unsigned_int_U0_start_write,
        l_strWeights5_dout => l_strWeights_dout,
        l_strWeights5_empty_n => l_strWeights_empty_n,
        l_strWeights5_read => gemv_float_3u_unsigned_int_U0_l_strWeights5_read,
        l_strInput6_dout => l_strInput_dout,
        l_strInput6_empty_n => l_strInput_empty_n,
        l_strInput6_read => gemv_float_3u_unsigned_int_U0_l_strInput6_read,
        l_strBias9_dout => l_strBias_dout,
        l_strBias9_empty_n => l_strBias_empty_n,
        l_strBias9_read => gemv_float_3u_unsigned_int_U0_l_strBias9_read,
        l_strMv8_din => gemv_float_3u_unsigned_int_U0_l_strMv8_din,
        l_strMv8_full_n => l_strMv_full_n,
        l_strMv8_write => gemv_float_3u_unsigned_int_U0_l_strMv8_write,
        p_m_dout => p_n_c18_dout,
        p_m_empty_n => p_n_c18_empty_n,
        p_m_read => gemv_float_3u_unsigned_int_U0_p_m_read,
        p_n_dout => p_k_c19_dout,
        p_n_empty_n => p_k_c19_empty_n,
        p_n_read => gemv_float_3u_unsigned_int_U0_p_n_read,
        p_m_out_din => gemv_float_3u_unsigned_int_U0_p_m_out_din,
        p_m_out_full_n => p_n_c20_full_n,
        p_m_out_write => gemv_float_3u_unsigned_int_U0_p_m_out_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => gemv_float_3u_unsigned_int_U0_ap_done,
        ap_ready => gemv_float_3u_unsigned_int_U0_ap_ready,
        ap_idle => gemv_float_3u_unsigned_int_U0_ap_idle,
        ap_continue => gemv_float_3u_unsigned_int_U0_ap_continue);

    FcnActivation_U0 : component MultiLayerPerceptronDecoupled_FcnActivation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => FcnActivation_U0_ap_start,
        start_full_n => start_for_writeStream2Vec_float_1u_U0_full_n,
        ap_done => FcnActivation_U0_ap_done,
        ap_continue => FcnActivation_U0_ap_continue,
        ap_idle => FcnActivation_U0_ap_idle,
        ap_ready => FcnActivation_U0_ap_ready,
        start_out => FcnActivation_U0_start_out,
        start_write => FcnActivation_U0_start_write,
        l_strMv8_dout => l_strMv_dout,
        l_strMv8_empty_n => l_strMv_empty_n,
        l_strMv8_read => FcnActivation_U0_l_strMv8_read,
        l_strOutput7_din => FcnActivation_U0_l_strOutput7_din,
        l_strOutput7_full_n => l_strOutput_full_n,
        l_strOutput7_write => FcnActivation_U0_l_strOutput7_write,
        p_n_dout => p_n_c20_dout,
        p_n_empty_n => p_n_c20_empty_n,
        p_n_read => FcnActivation_U0_p_n_read,
        p_n_out_din => FcnActivation_U0_p_n_out_din,
        p_n_out_full_n => p_n_c21_full_n,
        p_n_out_write => FcnActivation_U0_p_n_out_write);

    writeStream2Vec_float_1u_U0 : component MultiLayerPerceptronDecoupled_writeStream2Vec_float_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeStream2Vec_float_1u_U0_ap_start,
        ap_done => writeStream2Vec_float_1u_U0_ap_done,
        ap_continue => writeStream2Vec_float_1u_U0_ap_continue,
        ap_idle => writeStream2Vec_float_1u_U0_ap_idle,
        ap_ready => writeStream2Vec_float_1u_U0_ap_ready,
        p_in_dout => l_strOutput_dout,
        p_in_empty_n => l_strOutput_empty_n,
        p_in_read => writeStream2Vec_float_1u_U0_p_in_read,
        p_n_dout => p_n_c21_dout,
        p_n_empty_n => p_n_c21_empty_n,
        p_n_read => writeStream2Vec_float_1u_U0_p_n_read,
        p_out_address0 => writeStream2Vec_float_1u_U0_p_out_address0,
        p_out_ce0 => writeStream2Vec_float_1u_U0_p_out_ce0,
        p_out_we0 => writeStream2Vec_float_1u_U0_p_out_we0,
        p_out_d0 => writeStream2Vec_float_1u_U0_p_out_d0);

    p_n_c_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MyGemv_entry75_U0_p_n_out_din,
        if_full_n => p_n_c_full_n,
        if_write => MyGemv_entry75_U0_p_n_out_write,
        if_dout => p_n_c_dout,
        if_empty_n => p_n_c_empty_n,
        if_read => gem2Stream_float_8u_U0_p_m_read);

    p_n_c15_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MyGemv_entry75_U0_p_n_out1_din,
        if_full_n => p_n_c15_full_n,
        if_write => MyGemv_entry75_U0_p_n_out1_write,
        if_dout => p_n_c15_dout,
        if_empty_n => p_n_c15_empty_n,
        if_read => vec2GemStream_float_8u_1_U0_p_m_read);

    p_n_c16_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MyGemv_entry75_U0_p_n_out2_din,
        if_full_n => p_n_c16_full_n,
        if_write => MyGemv_entry75_U0_p_n_out2_write,
        if_dout => p_n_c16_dout,
        if_empty_n => p_n_c16_empty_n,
        if_read => readVec2Stream_float_1u_U0_p_n_read);

    p_k_c_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MyGemv_entry75_U0_p_k_out_din,
        if_full_n => p_k_c_full_n,
        if_write => MyGemv_entry75_U0_p_k_out_write,
        if_dout => p_k_c_dout,
        if_empty_n => p_k_c_empty_n,
        if_read => gem2Stream_float_8u_U0_p_n_read);

    p_k_c17_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MyGemv_entry75_U0_p_k_out3_din,
        if_full_n => p_k_c17_full_n,
        if_write => MyGemv_entry75_U0_p_k_out3_write,
        if_dout => p_k_c17_dout,
        if_empty_n => p_k_c17_empty_n,
        if_read => vec2GemStream_float_8u_1_U0_p_n_read);

    l_strWeights_U : component MultiLayerPerceptronDecoupled_fifo_w256_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gem2Stream_float_8u_U0_p_out_din,
        if_full_n => l_strWeights_full_n,
        if_write => gem2Stream_float_8u_U0_p_out_write,
        if_dout => l_strWeights_dout,
        if_empty_n => l_strWeights_empty_n,
        if_read => gemv_float_3u_unsigned_int_U0_l_strWeights5_read);

    p_n_c18_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gem2Stream_float_8u_U0_p_m_out_din,
        if_full_n => p_n_c18_full_n,
        if_write => gem2Stream_float_8u_U0_p_m_out_write,
        if_dout => p_n_c18_dout,
        if_empty_n => p_n_c18_empty_n,
        if_read => gemv_float_3u_unsigned_int_U0_p_m_read);

    p_k_c19_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gem2Stream_float_8u_U0_p_n_out_din,
        if_full_n => p_k_c19_full_n,
        if_write => gem2Stream_float_8u_U0_p_n_out_write,
        if_dout => p_k_c19_dout,
        if_empty_n => p_k_c19_empty_n,
        if_read => gemv_float_3u_unsigned_int_U0_p_n_read);

    l_strInput_U : component MultiLayerPerceptronDecoupled_fifo_w256_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => vec2GemStream_float_8u_1_U0_p_out_din,
        if_full_n => l_strInput_full_n,
        if_write => vec2GemStream_float_8u_1_U0_p_out_write,
        if_dout => l_strInput_dout,
        if_empty_n => l_strInput_empty_n,
        if_read => gemv_float_3u_unsigned_int_U0_l_strInput6_read);

    l_strBias_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readVec2Stream_float_1u_U0_p_out_din,
        if_full_n => l_strBias_full_n,
        if_write => readVec2Stream_float_1u_U0_p_out_write,
        if_dout => l_strBias_dout,
        if_empty_n => l_strBias_empty_n,
        if_read => gemv_float_3u_unsigned_int_U0_l_strBias9_read);

    l_strMv_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_U0_l_strMv8_din,
        if_full_n => l_strMv_full_n,
        if_write => gemv_float_3u_unsigned_int_U0_l_strMv8_write,
        if_dout => l_strMv_dout,
        if_empty_n => l_strMv_empty_n,
        if_read => FcnActivation_U0_l_strMv8_read);

    p_n_c20_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemv_float_3u_unsigned_int_U0_p_m_out_din,
        if_full_n => p_n_c20_full_n,
        if_write => gemv_float_3u_unsigned_int_U0_p_m_out_write,
        if_dout => p_n_c20_dout,
        if_empty_n => p_n_c20_empty_n,
        if_read => FcnActivation_U0_p_n_read);

    l_strOutput_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FcnActivation_U0_l_strOutput7_din,
        if_full_n => l_strOutput_full_n,
        if_write => FcnActivation_U0_l_strOutput7_write,
        if_dout => l_strOutput_dout,
        if_empty_n => l_strOutput_empty_n,
        if_read => writeStream2Vec_float_1u_U0_p_in_read);

    p_n_c21_U : component MultiLayerPerceptronDecoupled_fifo_w32_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FcnActivation_U0_p_n_out_din,
        if_full_n => p_n_c21_full_n,
        if_write => FcnActivation_U0_p_n_out_write,
        if_dout => p_n_c21_dout,
        if_empty_n => p_n_c21_empty_n,
        if_read => writeStream2Vec_float_1u_U0_p_n_read);

    start_for_gemv_float_3u_unsigned_int_U0_U : component MultiLayerPerceptronDecoupled_start_for_gemv_float_3u_unsigned_int_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gemv_float_3u_unsigned_int_U0_din,
        if_full_n => start_for_gemv_float_3u_unsigned_int_U0_full_n,
        if_write => gem2Stream_float_8u_U0_start_write,
        if_dout => start_for_gemv_float_3u_unsigned_int_U0_dout,
        if_empty_n => start_for_gemv_float_3u_unsigned_int_U0_empty_n,
        if_read => gemv_float_3u_unsigned_int_U0_ap_ready);

    start_for_FcnActivation_U0_U : component MultiLayerPerceptronDecoupled_start_for_FcnActivation_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FcnActivation_U0_din,
        if_full_n => start_for_FcnActivation_U0_full_n,
        if_write => gemv_float_3u_unsigned_int_U0_start_write,
        if_dout => start_for_FcnActivation_U0_dout,
        if_empty_n => start_for_FcnActivation_U0_empty_n,
        if_read => FcnActivation_U0_ap_ready);

    start_for_writeStream2Vec_float_1u_U0_U : component MultiLayerPerceptronDecoupled_start_for_writeStream2Vec_float_1u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_writeStream2Vec_float_1u_U0_din,
        if_full_n => start_for_writeStream2Vec_float_1u_U0_full_n,
        if_write => FcnActivation_U0_start_write,
        if_dout => start_for_writeStream2Vec_float_1u_U0_dout,
        if_empty_n => start_for_writeStream2Vec_float_1u_U0_empty_n,
        if_read => writeStream2Vec_float_1u_U0_ap_ready);





    ap_sync_reg_MyGemv_entry75_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_MyGemv_entry75_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_MyGemv_entry75_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_MyGemv_entry75_U0_ap_ready <= ap_sync_MyGemv_entry75_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_gem2Stream_float_8u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_gem2Stream_float_8u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_gem2Stream_float_8u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_gem2Stream_float_8u_U0_ap_ready <= ap_sync_gem2Stream_float_8u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready <= ap_sync_readVec2Stream_float_1u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready <= ap_sync_vec2GemStream_float_8u_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    MyGemv_entry75_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = MyGemv_entry75_U0_ap_ready))) then 
                MyGemv_entry75_U0_ap_ready_count <= std_logic_vector(unsigned(MyGemv_entry75_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = MyGemv_entry75_U0_ap_ready))) then 
                MyGemv_entry75_U0_ap_ready_count <= std_logic_vector(unsigned(MyGemv_entry75_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    gem2Stream_float_8u_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (gem2Stream_float_8u_U0_ap_ready = ap_const_logic_0))) then 
                gem2Stream_float_8u_U0_ap_ready_count <= std_logic_vector(unsigned(gem2Stream_float_8u_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (gem2Stream_float_8u_U0_ap_ready = ap_const_logic_1))) then 
                gem2Stream_float_8u_U0_ap_ready_count <= std_logic_vector(unsigned(gem2Stream_float_8u_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    readVec2Stream_float_1u_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (readVec2Stream_float_1u_U0_ap_ready = ap_const_logic_0))) then 
                readVec2Stream_float_1u_U0_ap_ready_count <= std_logic_vector(unsigned(readVec2Stream_float_1u_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (readVec2Stream_float_1u_U0_ap_ready = ap_const_logic_1))) then 
                readVec2Stream_float_1u_U0_ap_ready_count <= std_logic_vector(unsigned(readVec2Stream_float_1u_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    vec2GemStream_float_8u_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (vec2GemStream_float_8u_1_U0_ap_ready = ap_const_logic_0))) then 
                vec2GemStream_float_8u_1_U0_ap_ready_count <= std_logic_vector(unsigned(vec2GemStream_float_8u_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (vec2GemStream_float_8u_1_U0_ap_ready = ap_const_logic_1))) then 
                vec2GemStream_float_8u_1_U0_ap_ready_count <= std_logic_vector(unsigned(vec2GemStream_float_8u_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    FcnActivation_U0_ap_continue <= ap_const_logic_1;
    FcnActivation_U0_ap_start <= start_for_FcnActivation_U0_empty_n;
    MyGemv_entry75_U0_ap_continue <= ap_const_logic_1;
    MyGemv_entry75_U0_ap_start <= ((ap_sync_reg_MyGemv_entry75_U0_ap_ready xor ap_const_logic_1) and ap_start);
    MyGemv_entry75_U0_start_full_n <= ap_const_logic_1;
    MyGemv_entry75_U0_start_write <= ap_const_logic_0;
    ap_done <= writeStream2Vec_float_1u_U0_ap_done;
    ap_idle <= (writeStream2Vec_float_1u_U0_ap_idle and vec2GemStream_float_8u_1_U0_ap_idle and readVec2Stream_float_1u_U0_ap_idle and gemv_float_3u_unsigned_int_U0_ap_idle and gem2Stream_float_8u_U0_ap_idle and MyGemv_entry75_U0_ap_idle and FcnActivation_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_MyGemv_entry75_U0_ap_ready <= (ap_sync_reg_MyGemv_entry75_U0_ap_ready or MyGemv_entry75_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= writeStream2Vec_float_1u_U0_ap_done;
    ap_sync_gem2Stream_float_8u_U0_ap_ready <= (gem2Stream_float_8u_U0_ap_ready or ap_sync_reg_gem2Stream_float_8u_U0_ap_ready);
    ap_sync_readVec2Stream_float_1u_U0_ap_ready <= (readVec2Stream_float_1u_U0_ap_ready or ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready);
    ap_sync_ready <= (ap_sync_vec2GemStream_float_8u_1_U0_ap_ready and ap_sync_readVec2Stream_float_1u_U0_ap_ready and ap_sync_gem2Stream_float_8u_U0_ap_ready and ap_sync_MyGemv_entry75_U0_ap_ready);
    ap_sync_vec2GemStream_float_8u_1_U0_ap_ready <= (vec2GemStream_float_8u_1_U0_ap_ready or ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready);
    bias_address0 <= readVec2Stream_float_1u_U0_p_in_address0;
    bias_address1 <= ap_const_lv8_0;
    bias_ce0 <= readVec2Stream_float_1u_U0_p_in_ce0;
    bias_ce1 <= ap_const_logic_0;
    bias_d0 <= ap_const_lv32_0;
    bias_d1 <= ap_const_lv32_0;
    bias_we0 <= ap_const_logic_0;
    bias_we1 <= ap_const_logic_0;
    gem2Stream_float_8u_U0_ap_continue <= ap_const_logic_1;
    gem2Stream_float_8u_U0_ap_start <= ((ap_sync_reg_gem2Stream_float_8u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    gemv_float_3u_unsigned_int_U0_ap_continue <= ap_const_logic_1;
    gemv_float_3u_unsigned_int_U0_ap_start <= start_for_gemv_float_3u_unsigned_int_U0_empty_n;
    input_r_address0 <= vec2GemStream_float_8u_1_U0_p_in_address0;
    input_r_address1 <= vec2GemStream_float_8u_1_U0_p_in_address1;
    input_r_ce0 <= vec2GemStream_float_8u_1_U0_p_in_ce0;
    input_r_ce1 <= vec2GemStream_float_8u_1_U0_p_in_ce1;
    input_r_d0 <= ap_const_lv32_0;
    input_r_d1 <= ap_const_lv32_0;
    input_r_we0 <= ap_const_logic_0;
    input_r_we1 <= ap_const_logic_0;
    outputPort_address0 <= writeStream2Vec_float_1u_U0_p_out_address0;
    outputPort_address1 <= ap_const_lv5_0;
    outputPort_ce0 <= writeStream2Vec_float_1u_U0_p_out_ce0;
    outputPort_ce1 <= ap_const_logic_0;
    outputPort_d0 <= writeStream2Vec_float_1u_U0_p_out_d0;
    outputPort_d1 <= ap_const_lv32_0;
    outputPort_we0 <= writeStream2Vec_float_1u_U0_p_out_we0;
    outputPort_we1 <= ap_const_logic_0;
    readVec2Stream_float_1u_U0_ap_continue <= ap_const_logic_1;
    readVec2Stream_float_1u_U0_ap_start <= ((ap_sync_reg_readVec2Stream_float_1u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readVec2Stream_float_1u_U0_start_full_n <= ap_const_logic_1;
    readVec2Stream_float_1u_U0_start_write <= ap_const_logic_0;
    start_for_FcnActivation_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gemv_float_3u_unsigned_int_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_writeStream2Vec_float_1u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    vec2GemStream_float_8u_1_U0_ap_continue <= ap_const_logic_1;
    vec2GemStream_float_8u_1_U0_ap_start <= ((ap_sync_reg_vec2GemStream_float_8u_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    vec2GemStream_float_8u_1_U0_start_full_n <= ap_const_logic_1;
    vec2GemStream_float_8u_1_U0_start_write <= ap_const_logic_0;
    weights_0_address0 <= gem2Stream_float_8u_U0_p_in_0_address0;
    weights_0_address1 <= ap_const_lv9_0;
    weights_0_ce0 <= gem2Stream_float_8u_U0_p_in_0_ce0;
    weights_0_ce1 <= ap_const_logic_0;
    weights_0_d0 <= ap_const_lv32_0;
    weights_0_d1 <= ap_const_lv32_0;
    weights_0_we0 <= ap_const_logic_0;
    weights_0_we1 <= ap_const_logic_0;
    weights_1_address0 <= gem2Stream_float_8u_U0_p_in_1_address0;
    weights_1_address1 <= ap_const_lv9_0;
    weights_1_ce0 <= gem2Stream_float_8u_U0_p_in_1_ce0;
    weights_1_ce1 <= ap_const_logic_0;
    weights_1_d0 <= ap_const_lv32_0;
    weights_1_d1 <= ap_const_lv32_0;
    weights_1_we0 <= ap_const_logic_0;
    weights_1_we1 <= ap_const_logic_0;
    weights_2_address0 <= gem2Stream_float_8u_U0_p_in_2_address0;
    weights_2_address1 <= ap_const_lv9_0;
    weights_2_ce0 <= gem2Stream_float_8u_U0_p_in_2_ce0;
    weights_2_ce1 <= ap_const_logic_0;
    weights_2_d0 <= ap_const_lv32_0;
    weights_2_d1 <= ap_const_lv32_0;
    weights_2_we0 <= ap_const_logic_0;
    weights_2_we1 <= ap_const_logic_0;
    weights_3_address0 <= gem2Stream_float_8u_U0_p_in_3_address0;
    weights_3_address1 <= ap_const_lv9_0;
    weights_3_ce0 <= gem2Stream_float_8u_U0_p_in_3_ce0;
    weights_3_ce1 <= ap_const_logic_0;
    weights_3_d0 <= ap_const_lv32_0;
    weights_3_d1 <= ap_const_lv32_0;
    weights_3_we0 <= ap_const_logic_0;
    weights_3_we1 <= ap_const_logic_0;
    weights_4_address0 <= gem2Stream_float_8u_U0_p_in_4_address0;
    weights_4_address1 <= ap_const_lv9_0;
    weights_4_ce0 <= gem2Stream_float_8u_U0_p_in_4_ce0;
    weights_4_ce1 <= ap_const_logic_0;
    weights_4_d0 <= ap_const_lv32_0;
    weights_4_d1 <= ap_const_lv32_0;
    weights_4_we0 <= ap_const_logic_0;
    weights_4_we1 <= ap_const_logic_0;
    weights_5_address0 <= gem2Stream_float_8u_U0_p_in_5_address0;
    weights_5_address1 <= ap_const_lv9_0;
    weights_5_ce0 <= gem2Stream_float_8u_U0_p_in_5_ce0;
    weights_5_ce1 <= ap_const_logic_0;
    weights_5_d0 <= ap_const_lv32_0;
    weights_5_d1 <= ap_const_lv32_0;
    weights_5_we0 <= ap_const_logic_0;
    weights_5_we1 <= ap_const_logic_0;
    weights_6_address0 <= gem2Stream_float_8u_U0_p_in_6_address0;
    weights_6_address1 <= ap_const_lv9_0;
    weights_6_ce0 <= gem2Stream_float_8u_U0_p_in_6_ce0;
    weights_6_ce1 <= ap_const_logic_0;
    weights_6_d0 <= ap_const_lv32_0;
    weights_6_d1 <= ap_const_lv32_0;
    weights_6_we0 <= ap_const_logic_0;
    weights_6_we1 <= ap_const_logic_0;
    weights_7_address0 <= gem2Stream_float_8u_U0_p_in_7_address0;
    weights_7_address1 <= ap_const_lv9_0;
    weights_7_ce0 <= gem2Stream_float_8u_U0_p_in_7_ce0;
    weights_7_ce1 <= ap_const_logic_0;
    weights_7_d0 <= ap_const_lv32_0;
    weights_7_d1 <= ap_const_lv32_0;
    weights_7_we0 <= ap_const_logic_0;
    weights_7_we1 <= ap_const_logic_0;
    writeStream2Vec_float_1u_U0_ap_continue <= ap_continue;
    writeStream2Vec_float_1u_U0_ap_start <= start_for_writeStream2Vec_float_1u_U0_empty_n;
    writeStream2Vec_float_1u_U0_start_full_n <= ap_const_logic_1;
    writeStream2Vec_float_1u_U0_start_write <= ap_const_logic_0;
end behav;
