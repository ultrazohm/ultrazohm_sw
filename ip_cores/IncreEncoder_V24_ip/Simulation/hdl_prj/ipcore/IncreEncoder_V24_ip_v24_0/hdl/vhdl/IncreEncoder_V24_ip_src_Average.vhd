-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Encoder_Zynq_V24\IncreEncoder_V24_ip_src_Average.vhd
-- Created: 2020-06-12 11:54:06
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IncreEncoder_V24_ip_src_Average
-- Source Path: Encoder_Zynq_V24/IncreEncoder_V24/Average
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IncreEncoder_V24_ip_src_Average IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_83900_0                     :   IN    std_logic;
        OmegaIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        NewMeasurement                    :   IN    std_logic;
        SamplingFactorInv                 :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
        SamplingFactor                    :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        OmegaOut                          :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En11
        );
END IncreEncoder_V24_ip_src_Average;


ARCHITECTURE rtl OF IncreEncoder_V24_ip_src_Average IS

  -- Signals
  SIGNAL OmegaIn_signed                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL SamplingFactor_unsigned          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant1_out1                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL NewSpeed_out1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL hold_out1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Ask1_out1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL NewSpeed1_out1                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL hold1_out1                       : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Ask2_out1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL NewSpeed2_out1                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL hold2_out1                       : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Ask3_out1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL NewSpeed3_out1                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL hold3_out1                       : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Ask4_out1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL NewSpeed4_out1                   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL hold4_out1                       : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Ask5_out1                        : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Add_add_cast                     : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_cast_1                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_temp                     : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_cast_2                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_temp_1                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_cast_3                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_temp_2                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_cast_4                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_temp_3                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_cast_5                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_add_temp_4                   : signed(25 DOWNTO 0);  -- sfix26_En11
  SIGNAL Add_out1                         : signed(24 DOWNTO 0);  -- sfix25_En11
  SIGNAL SamplingFactorInv_unsigned       : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL Product_cast                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product_mul_temp                 : signed(41 DOWNTO 0);  -- sfix42_En26
  SIGNAL Product_cast_1                   : signed(40 DOWNTO 0);  -- sfix41_En26
  SIGNAL Product_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11

BEGIN
  -- Maximum of the OverSampling is 6

  OmegaIn_signed <= signed(OmegaIn);

  SamplingFactor_unsigned <= unsigned(SamplingFactor);

  
  switch_compare_1 <= '1' WHEN SamplingFactor_unsigned >= to_unsigned(16#0002#, 16) ELSE
      '0';

  Constant1_out1 <= to_signed(16#000000#, 24);

  hold_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hold_out1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_83900_0 = '1' THEN
        hold_out1 <= NewSpeed_out1;
      END IF;
    END IF;
  END PROCESS hold_process;


  
  NewSpeed_out1 <= hold_out1 WHEN NewMeasurement = '0' ELSE
      OmegaIn_signed;

  
  Ask1_out1 <= Constant1_out1 WHEN switch_compare_1 = '0' ELSE
      NewSpeed_out1;

  
  switch_compare_1_1 <= '1' WHEN SamplingFactor_unsigned >= to_unsigned(16#0003#, 16) ELSE
      '0';

  hold1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hold1_out1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_83900_0 = '1' THEN
        hold1_out1 <= NewSpeed1_out1;
      END IF;
    END IF;
  END PROCESS hold1_process;


  
  NewSpeed1_out1 <= hold1_out1 WHEN NewMeasurement = '0' ELSE
      hold_out1;

  
  Ask2_out1 <= Constant1_out1 WHEN switch_compare_1_1 = '0' ELSE
      NewSpeed1_out1;

  
  switch_compare_1_2 <= '1' WHEN SamplingFactor_unsigned >= to_unsigned(16#0004#, 16) ELSE
      '0';

  hold2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hold2_out1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_83900_0 = '1' THEN
        hold2_out1 <= NewSpeed2_out1;
      END IF;
    END IF;
  END PROCESS hold2_process;


  
  NewSpeed2_out1 <= hold2_out1 WHEN NewMeasurement = '0' ELSE
      hold1_out1;

  
  Ask3_out1 <= Constant1_out1 WHEN switch_compare_1_2 = '0' ELSE
      NewSpeed2_out1;

  
  switch_compare_1_3 <= '1' WHEN SamplingFactor_unsigned >= to_unsigned(16#0005#, 16) ELSE
      '0';

  hold3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hold3_out1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_83900_0 = '1' THEN
        hold3_out1 <= NewSpeed3_out1;
      END IF;
    END IF;
  END PROCESS hold3_process;


  
  NewSpeed3_out1 <= hold3_out1 WHEN NewMeasurement = '0' ELSE
      hold2_out1;

  
  Ask4_out1 <= Constant1_out1 WHEN switch_compare_1_3 = '0' ELSE
      NewSpeed3_out1;

  
  switch_compare_1_4 <= '1' WHEN SamplingFactor_unsigned >= to_unsigned(16#0006#, 16) ELSE
      '0';

  hold4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hold4_out1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_83900_0 = '1' THEN
        hold4_out1 <= NewSpeed4_out1;
      END IF;
    END IF;
  END PROCESS hold4_process;


  
  NewSpeed4_out1 <= hold4_out1 WHEN NewMeasurement = '0' ELSE
      hold3_out1;

  
  Ask5_out1 <= Constant1_out1 WHEN switch_compare_1_4 = '0' ELSE
      NewSpeed4_out1;

  Add_add_cast <= resize(OmegaIn_signed, 26);
  Add_add_cast_1 <= resize(Ask1_out1, 26);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(Ask2_out1, 26);
  Add_add_temp_1 <= Add_add_temp + Add_add_cast_2;
  Add_add_cast_3 <= resize(Ask3_out1, 26);
  Add_add_temp_2 <= Add_add_temp_1 + Add_add_cast_3;
  Add_add_cast_4 <= resize(Ask4_out1, 26);
  Add_add_temp_3 <= Add_add_temp_2 + Add_add_cast_4;
  Add_add_cast_5 <= resize(Ask5_out1, 26);
  Add_add_temp_4 <= Add_add_temp_3 + Add_add_cast_5;
  Add_out1 <= Add_add_temp_4(24 DOWNTO 0);

  SamplingFactorInv_unsigned <= unsigned(SamplingFactorInv);

  Product_cast <= signed(resize(SamplingFactorInv_unsigned, 17));
  Product_mul_temp <= Add_out1 * Product_cast;
  Product_cast_1 <= Product_mul_temp(40 DOWNTO 0);
  Product_out1 <= Product_cast_1(38 DOWNTO 15);

  OmegaOut <= std_logic_vector(Product_out1);

END rtl;

