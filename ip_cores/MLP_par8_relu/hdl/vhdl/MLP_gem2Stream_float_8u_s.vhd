-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_gem2Stream_float_8u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_m_empty_n : IN STD_LOGIC;
    p_m_read : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_in_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_in_ce0 : OUT STD_LOGIC;
    p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_offset_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_in_offset_empty_n : IN STD_LOGIC;
    p_in_offset_read : OUT STD_LOGIC;
    p_m_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_m_out_full_n : IN STD_LOGIC;
    p_m_out_write : OUT STD_LOGIC;
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC );
end;


architecture behav of MLP_gem2Stream_float_8u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln55_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_m_blk_n : STD_LOGIC;
    signal p_n_blk_n : STD_LOGIC;
    signal p_in_offset_blk_n : STD_LOGIC;
    signal p_m_out_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal i_reg_196 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_in_offset_read_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_reg_421 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln55_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln55_fu_228_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln55_reg_430 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_9_fu_238_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_in_load_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_in_load_36_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_37_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal p_in_load_38_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_load_39_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal p_in_load_40_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_200_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln60_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_15_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_16_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln60_17_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_18_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln60_19_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_20_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln60_21_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln54_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_234_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln60_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_fu_256_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_8_fu_262_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_13_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_9_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_14_fu_287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_10_fu_292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_15_fu_302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_11_fu_307_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_16_fu_317_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_12_fu_322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_17_fu_332_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_13_fu_337_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln60_18_fu_347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_14_fu_352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_v_63_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_62_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_61_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_60_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_59_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_58_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_57_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component MLP_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U353 : component MLP_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_n_dout,
        din1 => p_m_dout,
        dout => mul_ln54_fu_207_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_196 <= ap_const_lv29_0;
            elsif (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_196 <= add_ln55_reg_430;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln55_reg_430 <= add_ln55_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln55_reg_426 <= icmp_ln55_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                p_in_load_36_reg_460 <= p_in_q0;
                p_in_load_reg_455 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                p_in_load_37_reg_475 <= p_in_q1;
                p_in_load_38_reg_480 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                p_in_load_39_reg_495 <= p_in_q1;
                p_in_load_40_reg_500 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_in_offset_read_reg_409 <= p_in_offset_dout;
                trunc_ln_reg_421 <= mul_ln54_fu_207_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln55_fu_223_p2 = ap_const_lv1_0))) then
                    tmp_9_reg_435(15 downto 3) <= tmp_9_fu_238_p3(15 downto 3);
            end if;
        end if;
    end process;
    tmp_9_reg_435(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n, icmp_ln55_fu_223_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln55_fu_223_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln55_fu_223_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln55_fu_228_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_200_p4) + unsigned(ap_const_lv29_1));
    add_ln60_10_fu_292_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_14_fu_287_p2));
    add_ln60_11_fu_307_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_15_fu_302_p2));
    add_ln60_12_fu_322_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_16_fu_317_p2));
    add_ln60_13_fu_337_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_17_fu_332_p2));
    add_ln60_14_fu_352_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_18_fu_347_p2));
    add_ln60_8_fu_262_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_fu_256_p2));
    add_ln60_9_fu_277_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(or_ln60_13_fu_272_p2));
    add_ln60_fu_246_p2 <= std_logic_vector(unsigned(p_in_offset_read_reg_409) + unsigned(tmp_9_fu_238_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln55_reg_426)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln55_reg_426)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln55_reg_426)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n)
    begin
                ap_block_state1 <= ((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(p_out_full_n, icmp_ln55_reg_426)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln55_reg_426 = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln55_fu_223_p2)
    begin
        if ((icmp_ln55_fu_223_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_200_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln55_reg_426, i_reg_196, add_ln55_reg_430)
    begin
        if (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_200_p4 <= add_ln55_reg_430;
        else 
            ap_phi_mux_i_phi_fu_200_p4 <= i_reg_196;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    empty_fu_234_p1 <= ap_phi_mux_i_phi_fu_200_p4(13 - 1 downto 0);
    icmp_ln55_fu_223_p2 <= "1" when (ap_phi_mux_i_phi_fu_200_p4 = trunc_ln_reg_421) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_v_57_fu_365_p1 <= p_in_load_36_reg_460;
    l_v_58_fu_368_p1 <= p_in_load_37_reg_475;
    l_v_59_fu_371_p1 <= p_in_load_38_reg_480;
    l_v_60_fu_374_p1 <= p_in_load_39_reg_495;
    l_v_61_fu_377_p1 <= p_in_load_40_reg_500;
    l_v_62_fu_380_p1 <= p_in_q1;
    l_v_63_fu_384_p1 <= p_in_q0;
    l_v_fu_362_p1 <= p_in_load_reg_455;
    or_ln60_13_fu_272_p2 <= (tmp_9_reg_435 or ap_const_lv16_2);
    or_ln60_14_fu_287_p2 <= (tmp_9_reg_435 or ap_const_lv16_3);
    or_ln60_15_fu_302_p2 <= (tmp_9_reg_435 or ap_const_lv16_4);
    or_ln60_16_fu_317_p2 <= (tmp_9_reg_435 or ap_const_lv16_5);
    or_ln60_17_fu_332_p2 <= (tmp_9_reg_435 or ap_const_lv16_6);
    or_ln60_18_fu_347_p2 <= (tmp_9_reg_435 or ap_const_lv16_7);
    or_ln60_fu_256_p2 <= (tmp_9_fu_238_p3 or ap_const_lv16_1);

    p_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln60_15_fu_267_p1, ap_block_pp0_stage1, zext_ln60_17_fu_297_p1, ap_block_pp0_stage2, zext_ln60_19_fu_327_p1, ap_block_pp0_stage3, zext_ln60_21_fu_357_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_in_address0 <= zext_ln60_21_fu_357_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_in_address0 <= zext_ln60_19_fu_327_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_in_address0 <= zext_ln60_17_fu_297_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_in_address0 <= zext_ln60_15_fu_267_p1(16 - 1 downto 0);
            else 
                p_in_address0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            p_in_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln60_fu_251_p1, zext_ln60_16_fu_282_p1, ap_block_pp0_stage1, zext_ln60_18_fu_312_p1, ap_block_pp0_stage2, zext_ln60_20_fu_342_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_in_address1 <= zext_ln60_20_fu_342_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_in_address1 <= zext_ln60_18_fu_312_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_in_address1 <= zext_ln60_16_fu_282_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_in_address1 <= zext_ln60_fu_251_p1(16 - 1 downto 0);
            else 
                p_in_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            p_in_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            p_in_ce0 <= ap_const_logic_1;
        else 
            p_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_blk_n <= p_in_offset_empty_n;
        else 
            p_in_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_in_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n)
    begin
        if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_read <= ap_const_logic_1;
        else 
            p_in_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    p_m_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_blk_n <= p_m_empty_n;
        else 
            p_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_m_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_out_blk_n <= p_m_out_full_n;
        else 
            p_m_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_m_out_din <= p_m_dout;

    p_m_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n)
    begin
        if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_out_write <= ap_const_logic_1;
        else 
            p_m_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_m_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n)
    begin
        if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_m_read <= ap_const_logic_1;
        else 
            p_m_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n)
    begin
        if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_m_empty_n, p_n_empty_n, p_in_offset_empty_n, p_m_out_full_n, p_n_out_full_n)
    begin
        if ((not(((p_n_out_full_n = ap_const_logic_0) or (p_m_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (p_m_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln55_reg_426)
    begin
        if (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((((((l_v_63_fu_384_p1 & l_v_62_fu_380_p1) & l_v_61_fu_377_p1) & l_v_60_fu_374_p1) & l_v_59_fu_371_p1) & l_v_58_fu_368_p1) & l_v_57_fu_365_p1) & l_v_fu_362_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_reg_426, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln55_reg_426 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_9_fu_238_p3 <= (empty_fu_234_p1 & ap_const_lv3_0);
    zext_ln60_15_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_8_fu_262_p2),64));
    zext_ln60_16_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_9_fu_277_p2),64));
    zext_ln60_17_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_10_fu_292_p2),64));
    zext_ln60_18_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_11_fu_307_p2),64));
    zext_ln60_19_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_12_fu_322_p2),64));
    zext_ln60_20_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_13_fu_337_p2),64));
    zext_ln60_21_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_14_fu_352_p2),64));
    zext_ln60_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_fu_246_p2),64));
end behav;
