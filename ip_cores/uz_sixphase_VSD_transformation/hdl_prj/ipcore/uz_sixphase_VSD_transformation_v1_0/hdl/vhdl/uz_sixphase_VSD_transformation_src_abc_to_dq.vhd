-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_sixphase_VSD_transformation\hdl_prj\hdlsrc\uz_sixphase_VSD_transformation\uz_sixphase_VSD_transformation_src_abc_to_dq.vhd
-- Created: 2022-10-17 10:15:35
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 100x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- theta_el_axi                  ce_out        1e-06
-- x_abc_out_axi_0               ce_out        1e-06
-- x_abc_out_axi_1               ce_out        1e-06
-- x_abc_out_axi_2               ce_out        1e-06
-- x_abc_out_axi_3               ce_out        1e-06
-- x_abc_out_axi_4               ce_out        1e-06
-- x_abc_out_axi_5               ce_out        1e-06
-- x_abc_1_0                     ce_out        1e-06
-- x_abc_1_1                     ce_out        1e-06
-- x_abc_1_2                     ce_out        1e-06
-- x_abc_2_0                     ce_out        1e-06
-- x_abc_2_1                     ce_out        1e-06
-- x_abc_2_2                     ce_out        1e-06
-- x_out_dq_0                    ce_out        1e-06
-- x_out_dq_1                    ce_out        1e-06
-- x_out_dq_2                    ce_out        1e-06
-- x_out_dq_3                    ce_out        1e-06
-- x_out_dq_4                    ce_out        1e-06
-- x_out_dq_5                    ce_out        1e-06
-- refresh_values                ce_out        1e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_sixphase_VSD_transformation_src_abc_to_dq
-- Source Path: uz_sixphase_VSD_transformation/abc_to_dq
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_sixphase_VSD_transformation_src_abc_to_dq_pkg.ALL;

ENTITY uz_sixphase_VSD_transformation_src_abc_to_dq IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in_dq_0                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_in_dq_1                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_in_dq_2                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_in_dq_3                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_in_dq_4                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_in_dq_5                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        theta_el                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        trigger_new_values                :   IN    std_logic;
        x_abc1_ll_pl_0                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc1_ll_pl_1                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc1_ll_pl_2                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc2_ll_pl_0                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc2_ll_pl_1                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_abc2_ll_pl_2                    :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        ce_out                            :   OUT   std_logic;
        theta_el_axi                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
        x_abc_out_axi_0                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_1                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_2                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_3                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_4                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_out_axi_5                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_1_0                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_1_1                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_1_2                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_2_0                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_2_1                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_abc_2_2                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        x_out_dq_0                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_out_dq_1                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_out_dq_2                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_out_dq_3                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_out_dq_4                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        x_out_dq_5                        :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
        refresh_values                    :   OUT   std_logic
        );
END uz_sixphase_VSD_transformation_src_abc_to_dq;


ARCHITECTURE rtl OF uz_sixphase_VSD_transformation_src_abc_to_dq IS

  -- Component Declarations
  COMPONENT uz_sixphase_VSD_transformation_src_abc_to_dq_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_100_0                     :   OUT   std_logic;
          enb_1_100_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Gain_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En19
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Sine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          x                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          y                               :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide1_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide2_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide3_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_crp_temp_MAC
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 5);  -- sfix18_En16 [6]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 5);  -- sfix27_En18 [6]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_crp_temp_MAC_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 5);  -- sfix18_En16 [6]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 5);  -- sfix27_En18 [6]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_crp_temp_MAC_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 5);  -- sfix18_En16 [6]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 5);  -- sfix27_En18 [6]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_crp_temp_MAC_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 5);  -- sfix18_En16 [6]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 5);  -- sfix27_En18 [6]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_crp_temp_MAC_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 5);  -- sfix18_En16 [6]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 5);  -- sfix27_En18 [6]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_crp_temp_MAC_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 5);  -- sfix18_En16 [6]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 5);  -- sfix27_En18 [6]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En18
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Gain2_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector27(0 TO 2);  -- sfix27_En16 [3]
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector45(0 TO 2)  -- sfix45_En32 [3]
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 8);  -- sfix18_En16 [9]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 8);  -- sfix27_En16 [9]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector45(0 TO 8)  -- sfix45_En32 [9]
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 8);  -- sfix18_En16 [9]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 8);  -- sfix27_En16 [9]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector45(0 TO 8)  -- sfix45_En32 [9]
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Gain2_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector27(0 TO 2);  -- sfix27_En16 [3]
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector45(0 TO 2)  -- sfix45_En32 [3]
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_MMul_dot_product_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 8);  -- sfix18_En16 [9]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 8);  -- sfix27_En16 [9]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector45(0 TO 8)  -- sfix45_En32 [9]
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Product_nw_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector18(0 TO 8);  -- sfix18_En16 [9]
          in1                             :   IN    vector_of_std_logic_vector27(0 TO 8);  -- sfix27_En16 [9]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector45(0 TO 8)  -- sfix45_En32 [9]
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block17
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block19
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block20
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block21
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block23
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block24
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block25
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block26
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block27
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block29
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block30
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block31
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block32
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block33
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide1_nw
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide3_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_Divide2_nw_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En16
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block22
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block28
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  COMPONENT uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block34
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
          in1                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          in2                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En33
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_sixphase_VSD_transformation_src_abc_to_dq_tc
    USE ENTITY work.uz_sixphase_VSD_transformation_src_abc_to_dq_tc(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Gain_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Gain_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Sine_HDL_Optimized
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Sine_HDL_Optimized(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide1_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide1_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide2_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide2_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide3_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide3_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_crp_temp_MAC
    USE ENTITY work.uz_sixphase_VSD_transformation_src_crp_temp_MAC(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block4
    USE ENTITY work.uz_sixphase_VSD_transformation_src_crp_temp_MAC_block4(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_crp_temp_MAC_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block2
    USE ENTITY work.uz_sixphase_VSD_transformation_src_crp_temp_MAC_block2(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block1
    USE ENTITY work.uz_sixphase_VSD_transformation_src_crp_temp_MAC_block1(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block3
    USE ENTITY work.uz_sixphase_VSD_transformation_src_crp_temp_MAC_block3(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Gain2_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Gain2_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block1
    USE ENTITY work.uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block1(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block3
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block3(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block5
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block5(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block4
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block4(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block6
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block6(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block2
    USE ENTITY work.uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block2(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Gain2_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Gain2_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_MMul_dot_product_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block1
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block1(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Product_nw_block2
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Product_nw_block2(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block1
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block1(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block2
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block2(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block3
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block3(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block4
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block4(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block5
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block5(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block6
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block6(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block7
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block7(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block8
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block8(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block9
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block9(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block10
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block10(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block11
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block11(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block12
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block12(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block13
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block13(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block14
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block14(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block15
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block15(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block17
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block17(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block18
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block18(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block19
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block19(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block20
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block20(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block21
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block21(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block23
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block23(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block24
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block24(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block25
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block25(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block26
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block26(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block27
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block27(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block29
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block29(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block30
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block30(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block31
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block31(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block32
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block32(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block33
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block33(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide1_nw
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide1_nw(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide3_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide3_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_Divide2_nw_block
    USE ENTITY work.uz_sixphase_VSD_transformation_src_Divide2_nw_block(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block16
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block16(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block22
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block22(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block28
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block28(rtl);

  FOR ALL : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block34
    USE ENTITY work.uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block34(rtl);

  -- Signals
  SIGNAL enb_1_100_0                      : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_100_1                      : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL theta_el_signed                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch1_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch1_out1_1                   : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Switch1_out1_2                   : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Unit_Delay_out1_1                : std_logic;
  SIGNAL c1_Constant1_out1                : vector_of_signed18(0 TO 35);  -- sfix18_En16 [36]
  SIGNAL Constant1_out1                   : matrix_of_signed18(0 TO 5, 0 TO 5);  -- sfix18_En16 [6x6]
  SIGNAL Constant1_out1t                  : matrix_of_signed18(0 TO 5, 0 TO 5);  -- sfix18_En16 [6x6]
  SIGNAL Constant1_out1t_0                : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL delayMatch10_reg                 : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL delayMatch10_reg_next            : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_0_1              : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_0_2              : vector_of_std_logic_vector18(0 TO 5);  -- ufix18 [6]
  SIGNAL kconst                           : signed(17 DOWNTO 0);  -- sfix18_En19
  SIGNAL From_out1                        : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay1_out1                      : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL ctr_99_sig                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL crp_temp_enb_phase_0_2           : std_logic;
  SIGNAL Gain_out1                        : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Sine                             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Cosine                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL x_in_dq                          : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL x_in_dq_6                        : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL x_in_dq_7                        : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL x_in_dq_0_1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Cosine_1                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Cosine_2                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL i_d                              : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL enb_counter_ge_3_1               : std_logic;
  SIGNAL enb_counter_le_5_1               : std_logic;
  SIGNAL crp_temp_enb_phase_3_2           : std_logic;
  SIGNAL x_in_dq_1_1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Sine_1                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine_2                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL i_q                              : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Sine_3                           : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Sine_4                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL i_d_1                            : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Cosine_3                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Cosine_4                         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL i_q_1                            : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide_out1                      : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide_out1_signed               : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide1_out1                     : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide1_out1_signed              : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Add_out1                         : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide2_out1                     : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide2_out1_signed              : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Divide3_out1                     : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide3_out1_signed              : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Add1_out1                        : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL x_in_dq_2_1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Demux1_out3                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL x_in_dq_3_1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Demux1_out4                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL x_in_dq_4_1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Demux1_out5                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL x_in_dq_5_1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Demux1_out6                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Mux_out1                         : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Mux_out1_1                       : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL enb_counter_ge_5_1               : std_logic;
  SIGNAL enb_counter_le_10_1              : std_logic;
  SIGNAL crp_temp_enb_phase_5_5           : std_logic;
  SIGNAL Constant1_out1t_1                : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL delayMatch11_reg                 : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL delayMatch11_reg_next            : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_1_1              : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_1_2              : vector_of_std_logic_vector18(0 TO 5);  -- ufix18 [6]
  SIGNAL Mux_out1_2                       : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL Constant1_out1t_2                : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL delayMatch12_reg                 : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL delayMatch12_reg_next            : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_2_1              : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_2_2              : vector_of_std_logic_vector18(0 TO 5);  -- ufix18 [6]
  SIGNAL Mux_out1_3                       : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL Constant1_out1t_3                : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL delayMatch13_reg                 : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL delayMatch13_reg_next            : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_3_1              : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_3_2              : vector_of_std_logic_vector18(0 TO 5);  -- ufix18 [6]
  SIGNAL Mux_out1_4                       : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL Constant1_out1t_4                : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL delayMatch14_reg                 : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL delayMatch14_reg_next            : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_4_1              : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_4_2              : vector_of_std_logic_vector18(0 TO 5);  -- ufix18 [6]
  SIGNAL Mux_out1_5                       : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL Constant1_out1t_5                : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL delayMatch15_reg                 : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL delayMatch15_reg_next            : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_5_1              : vector_of_signed18(0 TO 5);  -- sfix18_En16 [6]
  SIGNAL Constant1_out1t_5_2              : vector_of_std_logic_vector18(0 TO 5);  -- ufix18 [6]
  SIGNAL Mux_out1_6                       : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL colTemp_0                        : vector_of_std_logic_vector27(0 TO 5);  -- ufix27 [6]
  SIGNAL colTemp_0_1                      : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL MatrixMultiply_out1              : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Switch_out1                      : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Delay9_bypass_reg                : vector_of_signed27(0 TO 5);  -- sfix27 [6]
  SIGNAL Delay9_bypass_reg_next           : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Switch_out1_1                    : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Delay9_out1                      : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Switch_out1_2                    : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL t35_bypass_reg                   : vector_of_signed27(0 TO 5);  -- sfix27 [6]
  SIGNAL t35_bypass_reg_next              : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Switch_out1_3                    : vector_of_signed27(0 TO 5);  -- sfix27_En18 [6]
  SIGNAL Demux1_out1                      : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Demux1_out1_2                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL t33_bypass_reg                   : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL t33_bypass_reg_next              : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Demux1_out1_3                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Demux1_out2                      : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Demux1_out2_2                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL t34_bypass_reg                   : vector_of_signed27(0 TO 2);  -- sfix27 [3]
  SIGNAL t34_bypass_reg_next              : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL Demux1_out2_3                    : vector_of_signed27(0 TO 2);  -- sfix27_En18 [3]
  SIGNAL c19_Constant1_out1               : vector_of_signed18(0 TO 35);  -- sfix18_En17 [36]
  SIGNAL Constant1_out1_1                 : matrix_of_signed18(0 TO 5, 0 TO 5);  -- sfix18_En17 [6x6]
  SIGNAL Constant1_out1t_6                : matrix_of_signed18(0 TO 5, 0 TO 5);  -- sfix18_En17 [6x6]
  SIGNAL Constant1_out1t_0_5              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL c203_kconst                      : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL kconst_1                         : matrix_of_signed18(0 TO 2, 0 TO 2);  -- sfix18_En16 [3x3]
  SIGNAL s                                : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out                     : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_1                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL c187_kconst                      : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL kconst_2                         : matrix_of_signed18(0 TO 2, 0 TO 2);  -- sfix18_En16 [3x3]
  SIGNAL s_2                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out_1                   : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_3                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL alpha_0                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_1                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_2                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_3                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_4                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_5                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_6                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_7                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_8                          : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_1               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_1_reg               : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_out_2               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_3               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_4               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_5               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_6               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_7               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_8               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_out_9               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch22_1_reg_1             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_2             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_3             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_4             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_5             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_6             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_7             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_8             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch22_1_reg_next          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_1        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_2        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_3        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_4        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_5        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_6        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_7        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch22_1_reg_next_8        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL x_abc2_ll_pl                     : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL x_abc2_ll_pl_3                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL x_abc2_ll_pl_4                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL x_abc2_ll_pl_5                   : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL kconst_3                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1                       : vector_of_std_logic_vector45(0 TO 2);  -- ufix45 [3]
  SIGNAL Gain2_out1_signed                : vector_of_signed45(0 TO 2);  -- sfix45_En32 [3]
  SIGNAL Gain2_out1_1                     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL s_4                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL in0                              : vector_of_std_logic_vector18(0 TO 8);  -- ufix18 [9]
  SIGNAL selector_out_2                   : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL s_5                              : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL in1                              : vector_of_std_logic_vector27(0 TO 8);  -- ufix27 [9]
  SIGNAL enb_counter_ge_2_1               : std_logic;
  SIGNAL enb_counter_le_4_1               : std_logic;
  SIGNAL crp_temp_enb_phase_2_2           : std_logic;
  SIGNAL MMul_dot_product_out             : vector_of_std_logic_vector45(0 TO 8);  -- ufix45 [9]
  SIGNAL MMul_dot_product_out_signed      : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL MMul_dot_product_out_1           : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL reshape_out                      : matrix_of_signed27(0 TO 2, 0 TO 2);  -- sfix27_En16 [3x3]
  SIGNAL selector_out_3                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_4                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_012_add_cast            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_cast_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_temp            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_cast_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_cast_3          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_temp_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_cast_4          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_cast_5          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_012_add_temp_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_out                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_5                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_122_add_cast            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_cast_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_temp            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_cast_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_cast_3          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_temp_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_cast_4          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_cast_5          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_122_add_temp_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL s_6                              : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Gain4_out1                       : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Constant1_out1_re                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Constant1_out1_im                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_A        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL enb_counter_ge_4_1               : std_logic;
  SIGNAL enb_counter_le_6_1               : std_logic;
  SIGNAL crp_temp_enb_phase_4_2           : std_logic;
  SIGNAL Product_C2ReIm_2_C2ReIm_B        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_B_1      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_A_1      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_Re_AC                    : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Re_AC_signed             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Re_BD                    : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Re_BD_signed             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL mulOutput                        : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Im_AD                    : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Im_AD_signed             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Im_BC                    : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Im_BC_signed             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL mulOutput_1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant_out1                    : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL delayMatch27_reg                 : vector_of_signed18(0 TO 8);  -- sfix18 [9]
  SIGNAL delayMatch27_reg_next            : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_7                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL in0_1                            : vector_of_std_logic_vector18(0 TO 8);  -- ufix18 [9]
  SIGNAL selector_out_6                   : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL s_8                              : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL in1_1                            : vector_of_std_logic_vector27(0 TO 8);  -- ufix27 [9]
  SIGNAL enb_counter_ge_6_1               : std_logic;
  SIGNAL enb_counter_le_8_1               : std_logic;
  SIGNAL crp_temp_enb_phase_6_2           : std_logic;
  SIGNAL MMul_dot_product_out_2           : vector_of_std_logic_vector45(0 TO 8);  -- ufix45 [9]
  SIGNAL MMul_dot_product_out_signed_1    : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL MMul_dot_product_out_3           : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL reshape_out_1                    : matrix_of_signed27(0 TO 2, 0 TO 2);  -- sfix27_En16 [3x3]
  SIGNAL selector_out_7                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_8                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_013_add_cast            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_cast_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_temp            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_cast_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_cast_3          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_temp_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_cast_4          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_cast_5          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_013_add_temp_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_out_1                : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_9                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_123_add_cast            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_cast_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_temp            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_cast_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_cast_3          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_temp_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_cast_4          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_cast_5          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_123_add_temp_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL s_9                              : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Gain4_out1_1                     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Constant1_out1t_0_4              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_0_3              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_0_2_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL c171_kconst                      : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL kconst_4                         : matrix_of_signed18(0 TO 2, 0 TO 2);  -- sfix18_En16 [3x3]
  SIGNAL s_10                             : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out_10                  : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_11                             : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL c155_kconst                      : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL kconst_5                         : matrix_of_signed18(0 TO 2, 0 TO 2);  -- sfix18_En16 [3x3]
  SIGNAL s_12                             : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out_11                  : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_13                             : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL alpha_0_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_1_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_2_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_3_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_4_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_5_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_6_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_7_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL alpha_8_1                        : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_1               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_1_reg               : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_out_2               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_3               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_4               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_5               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_6               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_7               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_8               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_out_9               : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL delayMatch16_1_reg_1             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_2             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_3             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_4             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_5             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_6             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_7             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_8             : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL delayMatch16_1_reg_next          : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_1        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_2        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_3        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_4        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_5        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_6        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_7        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL delayMatch16_1_reg_next_8        : vector_of_signed18(0 TO 1);  -- sfix18_En16 [2]
  SIGNAL x_abc1_ll_pl                     : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL x_abc1_ll_pl_3                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL x_abc1_ll_pl_4                   : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL x_abc1_ll_pl_5                   : vector_of_std_logic_vector27(0 TO 2);  -- ufix27 [3]
  SIGNAL kconst_6                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1_2                     : vector_of_std_logic_vector45(0 TO 2);  -- ufix45 [3]
  SIGNAL Gain2_out1_signed_1              : vector_of_signed45(0 TO 2);  -- sfix45_En32 [3]
  SIGNAL Gain2_out1_3                     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL s_14                             : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL in0_2                            : vector_of_std_logic_vector18(0 TO 8);  -- ufix18 [9]
  SIGNAL selector_out_12                  : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL s_15                             : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL in1_2                            : vector_of_std_logic_vector27(0 TO 8);  -- ufix27 [9]
  SIGNAL MMul_dot_product_out_4           : vector_of_std_logic_vector45(0 TO 8);  -- ufix45 [9]
  SIGNAL MMul_dot_product_out_signed_2    : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL MMul_dot_product_out_5           : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL reshape_out_2                    : matrix_of_signed27(0 TO 2, 0 TO 2);  -- sfix27_En16 [3x3]
  SIGNAL selector_out_13                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_14                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_01_add_cast             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_temp             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_3           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_temp_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_4           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_cast_5           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_add_temp_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_out_2                : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_15                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_12_add_cast             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_temp             : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_3           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_temp_1           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_4           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_cast_5           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_12_add_temp_2           : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL s_16                             : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Gain4_out1_2                     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Constant1_out1_re_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Constant1_out1_im_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_A_2      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_B_2      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_B_3      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_C2ReIm_2_C2ReIm_A_3      : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Product_Re_AC_1                  : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Re_AC_signed_1           : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Re_BD_1                  : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Re_BD_signed_1           : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL mulOutput_2                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Im_AD_1                  : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Im_AD_signed_1           : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Product_Im_BC_1                  : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Product_Im_BC_signed_1           : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL mulOutput_3                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant_out1_1                  : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL delayMatch21_reg                 : vector_of_signed18(0 TO 8);  -- sfix18 [9]
  SIGNAL delayMatch21_reg_next            : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_17                             : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL in0_3                            : vector_of_std_logic_vector18(0 TO 8);  -- ufix18 [9]
  SIGNAL selector_out_16                  : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL s_18                             : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL in1_3                            : vector_of_std_logic_vector27(0 TO 8);  -- ufix27 [9]
  SIGNAL MMul_dot_product_out_6           : vector_of_std_logic_vector45(0 TO 8);  -- ufix45 [9]
  SIGNAL MMul_dot_product_out_signed_3    : vector_of_signed45(0 TO 8);  -- sfix45_En32 [9]
  SIGNAL MMul_dot_product_out_7           : vector_of_signed27(0 TO 8);  -- sfix27_En16 [9]
  SIGNAL reshape_out_3                    : matrix_of_signed27(0 TO 2, 0 TO 2);  -- sfix27_En16 [3x3]
  SIGNAL selector_out_17                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_18                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_011_add_cast            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_cast_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_temp            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_cast_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_cast_3          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_temp_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_cast_4          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_cast_5          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_011_add_temp_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_01_out_3                : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL selector_out_19                  : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL MMul_add_121_add_cast            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_cast_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_temp            : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_cast_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_cast_3          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_temp_1          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_cast_4          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_cast_5          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL MMul_add_121_add_temp_2          : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL s_19                             : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Gain4_out1_3                     : vector_of_signed27(0 TO 2);  -- sfix27_En16 [3]
  SIGNAL Constant1_out1t_0_1_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_0_0              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_0_6              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_0_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_8_1               : std_logic;
  SIGNAL enb_counter_le_11_1              : std_logic;
  SIGNAL crp_temp_enb_phase_8_3           : std_logic;
  SIGNAL Constant1_out1t_0_7              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_0_0_2             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_0_0_signed        : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_0_0_3             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_11_1              : std_logic;
  SIGNAL enb_counter_le_14_1              : std_logic;
  SIGNAL crp_temp_enb_phase_11_3          : std_logic;
  SIGNAL Constant1_out1t_0_8              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_0_0_4             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_0_0_signed_1      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_0_0_5             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_14_1              : std_logic;
  SIGNAL enb_counter_le_17_1              : std_logic;
  SIGNAL crp_temp_enb_phase_14_3          : std_logic;
  SIGNAL Constant1_out1t_0_9              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_0_0_6             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_0_0_signed_2      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_0_0_7             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_17_1              : std_logic;
  SIGNAL enb_counter_le_20_1              : std_logic;
  SIGNAL crp_temp_enb_phase_17_3          : std_logic;
  SIGNAL Constant1_out1t_0_10             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_0_0_8             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_0_0_signed_3      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_0_0_9             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_20_1              : std_logic;
  SIGNAL enb_counter_le_23_1              : std_logic;
  SIGNAL crp_temp_enb_phase_20_3          : std_logic;
  SIGNAL Constant1_out1t_0_11             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_0_0_10            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_0_0_signed_4      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_0_0_11            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_23_1              : std_logic;
  SIGNAL enb_counter_le_26_1              : std_logic;
  SIGNAL crp_temp_enb_phase_23_3          : std_logic;
  SIGNAL MatrixMultiply_0_0_12            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_0_0_signed_5      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_0_0_13            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL enb_counter_ge_26_1              : std_logic;
  SIGNAL enb_counter_le_28_1              : std_logic;
  SIGNAL crp_temp_enb_phase_26_2          : std_logic;
  SIGNAL Constant1_out1t_1_5              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_1_4              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_1_3              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_1_2_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_1_1_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_1_0              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_1_6              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_1_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_1_7              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_1_0_2             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_1_0_signed        : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_1_0_3             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_1_8              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_1_0_4             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_1_0_signed_1      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_1_0_5             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_1_9              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_1_0_6             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_1_0_signed_2      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_1_0_7             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_1_10             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_1_0_8             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_1_0_signed_3      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_1_0_9             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_1_11             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_1_0_10            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_1_0_signed_4      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_1_0_11            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL MatrixMultiply_1_0_12            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_1_0_signed_5      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_1_0_13            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL u_beta                           : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL u_alpha                          : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_2_5              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_2_4              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_2_3              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_2_2_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_2_1_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_2_0              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_2_6              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_2_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_2_7              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_2_0_2             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_2_0_signed        : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_2_0_3             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_2_8              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_2_0_4             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_2_0_signed_1      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_2_0_5             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_2_9              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_2_0_6             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_2_0_signed_2      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_2_0_7             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_2_10             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_2_0_8             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_2_0_signed_3      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_2_0_9             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_2_11             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_2_0_10            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_2_0_signed_4      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_2_0_11            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_3_5              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_3_4              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_3_3              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_3_2_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_3_1_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_3_0              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_3_6              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_3_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_3_7              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_3_0_2             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_3_0_signed        : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_3_0_3             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_3_8              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_3_0_4             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_3_0_signed_1      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_3_0_5             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_3_9              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_3_0_6             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_3_0_signed_2      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_3_0_7             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_3_10             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_3_0_8             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_3_0_signed_3      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_3_0_9             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_3_11             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_3_0_10            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_3_0_signed_4      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_3_0_11            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_4_5              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_4_4              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_4_3              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_4_2_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_4_1_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_4_0              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_4_6              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_4_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_4_7              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_4_0_2             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_4_0_signed        : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_4_0_3             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_4_8              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_4_0_4             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_4_0_signed_1      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_4_0_5             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_4_9              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_4_0_6             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_4_0_signed_2      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_4_0_7             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_4_10             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_4_0_8             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_4_0_signed_3      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_4_0_9             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_4_11             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_4_0_10            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_4_0_signed_4      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_4_0_11            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_5_5              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_5_4              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_5_3              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_5_2_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_5_1_1            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_5_0              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL Constant1_out1t_5_6              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_5_0_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_5_7              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_5_0_2             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_5_0_signed        : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_5_0_3             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_5_8              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_5_0_4             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_5_0_signed_1      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_5_0_5             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_5_9              : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_5_0_6             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_5_0_signed_2      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_5_0_7             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_5_10             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_5_0_8             : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_5_0_signed_3      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_5_0_9             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Constant1_out1t_5_11             : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL MatrixMultiply_5_0_10            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_5_0_signed_4      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_5_0_11            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Divide_out1_1                    : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide_out1_signed_1             : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Divide1_out1_1                   : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide1_out1_signed_1            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add_out1_1                       : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Divide3_out1_1                   : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide3_out1_signed_1            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Divide2_out1_1                   : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Divide2_out1_signed_1            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL Add1_out1_1                      : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL MatrixMultiply_2_0_12            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_2_0_signed_5      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_2_0_13            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL MatrixMultiply_3_0_12            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_3_0_signed_5      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_3_0_13            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL MatrixMultiply_4_0_12            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_4_0_signed_5      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_4_0_13            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL MatrixMultiply_5_0_12            : std_logic_vector(45 DOWNTO 0);  -- ufix46
  SIGNAL MatrixMultiply_5_0_signed_5      : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL MatrixMultiply_5_0_13            : signed(26 DOWNTO 0);  -- sfix27_En16
  SIGNAL trafo_out                        : vector_of_signed27(0 TO 5);  -- sfix27_En16 [6]
  SIGNAL Transformation_out1_1            : vector_of_signed27(0 TO 5);  -- sfix27_En16 [6]
  SIGNAL t36_bypass_reg                   : vector_of_signed27(0 TO 5);  -- sfix27 [6]
  SIGNAL t36_bypass_reg_next              : vector_of_signed27(0 TO 5);  -- sfix27_En16 [6]
  SIGNAL Transformation_out1_2            : vector_of_signed27(0 TO 5);  -- sfix27_En16 [6]
  SIGNAL Unit_Delay_out1_2                : std_logic;

BEGIN
  -- VSD and Park inverse transformation
  -- 
  -- VSD and Park transformation
  -- 
  -- sin/cos calculation
  -- 
  -- Trigger Output

  u_abc_to_dq_tc : uz_sixphase_VSD_transformation_src_abc_to_dq_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_100_0 => enb_1_100_0,
              enb_1_100_1 => enb_1_100_1
              );

  u_Gain : uz_sixphase_VSD_transformation_src_Gain_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(kconst),  -- sfix18_En19
              in1 => Delay1_out1,  -- sfix18_En14
              globalSchedule => crp_temp_enb_phase_0_2,
              out0 => Gain_out1  -- sfix18_En16
              );

  u_Sine_HDL_Optimized : uz_sixphase_VSD_transformation_src_Sine_HDL_Optimized
    PORT MAP( clk => clk,
              enb => enb,
              u => Gain_out1,  -- sfix18_En16
              x => Sine,  -- sfix18_En16
              y => Cosine  -- sfix18_En16
              );

  u_Divide4 : uz_sixphase_VSD_transformation_src_Divide_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Cosine_2,  -- sfix18_En16
              in1 => std_logic_vector(i_d),  -- sfix27_En18
              globalSchedule => crp_temp_enb_phase_3_2,
              out0 => Divide_out1  -- sfix27_En18
              );

  u_Divide11 : uz_sixphase_VSD_transformation_src_Divide1_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Sine_2,  -- sfix18_En16
              in1 => std_logic_vector(i_q),  -- sfix27_En18
              globalSchedule => crp_temp_enb_phase_3_2,
              out0 => Divide1_out1  -- sfix27_En18
              );

  u_Divide2 : uz_sixphase_VSD_transformation_src_Divide2_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Sine_4,  -- sfix18_En16
              in1 => std_logic_vector(i_d_1),  -- sfix27_En18
              globalSchedule => crp_temp_enb_phase_3_2,
              out0 => Divide2_out1  -- sfix27_En18
              );

  u_Divide3 : uz_sixphase_VSD_transformation_src_Divide3_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Cosine_4,  -- sfix18_En16
              in1 => std_logic_vector(i_q_1),  -- sfix27_En18
              globalSchedule => crp_temp_enb_phase_3_2,
              out0 => Divide3_out1  -- sfix27_En18
              );

  u_crp_temp_MAC : uz_sixphase_VSD_transformation_src_crp_temp_MAC
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Constant1_out1t_0_2,  -- sfix18_En16 [6]
              in1 => Mux_out1_1,  -- sfix27_En18 [6]
              globalSchedule => crp_temp_enb_phase_5_5,
              out0 => colTemp_0(0)  -- sfix27_En18
              );

  u_crp_temp_MAC5 : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Constant1_out1t_1_2,  -- sfix18_En16 [6]
              in1 => Mux_out1_2,  -- sfix27_En18 [6]
              globalSchedule => crp_temp_enb_phase_5_5,
              out0 => colTemp_0(1)  -- sfix27_En18
              );

  u_crp_temp_MAC1 : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Constant1_out1t_2_2,  -- sfix18_En16 [6]
              in1 => Mux_out1_3,  -- sfix27_En18 [6]
              globalSchedule => crp_temp_enb_phase_5_5,
              out0 => colTemp_0(2)  -- sfix27_En18
              );

  u_crp_temp_MAC3 : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Constant1_out1t_3_2,  -- sfix18_En16 [6]
              in1 => Mux_out1_4,  -- sfix27_En18 [6]
              globalSchedule => crp_temp_enb_phase_5_5,
              out0 => colTemp_0(3)  -- sfix27_En18
              );

  u_crp_temp_MAC2 : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Constant1_out1t_4_2,  -- sfix18_En16 [6]
              in1 => Mux_out1_5,  -- sfix27_En18 [6]
              globalSchedule => crp_temp_enb_phase_5_5,
              out0 => colTemp_0(4)  -- sfix27_En18
              );

  u_crp_temp_MAC4 : uz_sixphase_VSD_transformation_src_crp_temp_MAC_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Constant1_out1t_5_2,  -- sfix18_En16 [6]
              in1 => Mux_out1_6,  -- sfix27_En18 [6]
              globalSchedule => crp_temp_enb_phase_5_5,
              out0 => colTemp_0(5)  -- sfix27_En18
              );

  u_Gain21 : uz_sixphase_VSD_transformation_src_Gain2_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => x_abc2_ll_pl_5,  -- sfix27_En16 [3]
              in1 => std_logic_vector(kconst_3),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_0_2,
              out0 => Gain2_out1  -- sfix45_En32 [3]
              );

  u_MMul_dot_product2 : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => in0,  -- sfix18_En16 [9]
              in1 => in1,  -- sfix27_En16 [9]
              globalSchedule => crp_temp_enb_phase_2_2,
              out0 => MMul_dot_product_out  -- sfix45_En32 [9]
              );

  u_Product4 : uz_sixphase_VSD_transformation_src_Product_nw_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1(0)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_A),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Re_AC  -- sfix27_En16
              );

  u_Product6 : uz_sixphase_VSD_transformation_src_Product_nw_block5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1(1)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_B),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Re_BD  -- sfix27_En16
              );

  u_Product5 : uz_sixphase_VSD_transformation_src_Product_nw_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1(0)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_B_1),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Im_AD  -- sfix27_En16
              );

  u_Product7 : uz_sixphase_VSD_transformation_src_Product_nw_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1(1)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_A_1),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Im_BC  -- sfix27_En16
              );

  u_MMul_dot_product3 : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => in0_1,  -- sfix18_En16 [9]
              in1 => in1_1,  -- sfix27_En16 [9]
              globalSchedule => crp_temp_enb_phase_6_2,
              out0 => MMul_dot_product_out_2  -- sfix45_En32 [9]
              );

  u_Gain2 : uz_sixphase_VSD_transformation_src_Gain2_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => x_abc1_ll_pl_5,  -- sfix27_En16 [3]
              in1 => std_logic_vector(kconst_6),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_0_2,
              out0 => Gain2_out1_2  -- sfix45_En32 [3]
              );

  u_MMul_dot_product : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => in0_2,  -- sfix18_En16 [9]
              in1 => in1_2,  -- sfix27_En16 [9]
              globalSchedule => crp_temp_enb_phase_2_2,
              out0 => MMul_dot_product_out_4  -- sfix45_En32 [9]
              );

  u_Product : uz_sixphase_VSD_transformation_src_Product_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1_2(0)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_A_2),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Re_AC_1  -- sfix27_En16
              );

  u_Product2 : uz_sixphase_VSD_transformation_src_Product_nw_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1_2(1)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_B_2),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Re_BD_1  -- sfix27_En16
              );

  u_Product1 : uz_sixphase_VSD_transformation_src_Product_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1_2(0)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_B_3),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Im_AD_1  -- sfix27_En16
              );

  u_Product3 : uz_sixphase_VSD_transformation_src_Product_nw_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Gain4_out1_2(1)),  -- sfix27_En16
              in1 => std_logic_vector(Product_C2ReIm_2_C2ReIm_A_3),  -- sfix18_En16
              globalSchedule => crp_temp_enb_phase_4_2,
              out0 => Product_Im_BC_1  -- sfix27_En16
              );

  u_MMul_dot_product1 : uz_sixphase_VSD_transformation_src_MMul_dot_product_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => in0_3,  -- sfix18_En16 [9]
              in1 => in1_3,  -- sfix27_En16 [9]
              globalSchedule => crp_temp_enb_phase_6_2,
              out0 => MMul_dot_product_out_6  -- sfix45_En32 [9]
              );

  u_adder_MultiplyAdd : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_0_6),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_0_0_1),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_8_3,
              out0 => MatrixMultiply_0_0_2  -- sfix46_En33
              );

  u_adder_MultiplyAdd1 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_0_7),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_0_0_3),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_11_3,
              out0 => MatrixMultiply_0_0_4  -- sfix46_En33
              );

  u_adder_MultiplyAdd2 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_0_8),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_0_0_5),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_14_3,
              out0 => MatrixMultiply_0_0_6  -- sfix46_En33
              );

  u_adder_MultiplyAdd3 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_0_9),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_0_0_7),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_17_3,
              out0 => MatrixMultiply_0_0_8  -- sfix46_En33
              );

  u_adder_MultiplyAdd4 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_0_10),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_0_0_9),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_20_3,
              out0 => MatrixMultiply_0_0_10  -- sfix46_En33
              );

  u_adder_MultiplyAdd5 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_0_11),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_0_0_11),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_23_3,
              out0 => MatrixMultiply_0_0_12  -- sfix46_En33
              );

  u_adder_MultiplyAdd6 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_1_6),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_1_0_1),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_8_3,
              out0 => MatrixMultiply_1_0_2  -- sfix46_En33
              );

  u_adder_MultiplyAdd7 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_1_7),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_1_0_3),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_11_3,
              out0 => MatrixMultiply_1_0_4  -- sfix46_En33
              );

  u_adder_MultiplyAdd8 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block7
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_1_8),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_1_0_5),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_14_3,
              out0 => MatrixMultiply_1_0_6  -- sfix46_En33
              );

  u_adder_MultiplyAdd9 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_1_9),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_1_0_7),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_17_3,
              out0 => MatrixMultiply_1_0_8  -- sfix46_En33
              );

  u_adder_MultiplyAdd10 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block9
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_1_10),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_1_0_9),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_20_3,
              out0 => MatrixMultiply_1_0_10  -- sfix46_En33
              );

  u_adder_MultiplyAdd11 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block10
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_1_11),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_1_0_11),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_23_3,
              out0 => MatrixMultiply_1_0_12  -- sfix46_En33
              );

  u_adder_MultiplyAdd12 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block11
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_2_6),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_2_0_1),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_8_3,
              out0 => MatrixMultiply_2_0_2  -- sfix46_En33
              );

  u_adder_MultiplyAdd13 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_2_7),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_2_0_3),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_11_3,
              out0 => MatrixMultiply_2_0_4  -- sfix46_En33
              );

  u_adder_MultiplyAdd14 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_2_8),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_2_0_5),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_14_3,
              out0 => MatrixMultiply_2_0_6  -- sfix46_En33
              );

  u_adder_MultiplyAdd15 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_2_9),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_2_0_7),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_17_3,
              out0 => MatrixMultiply_2_0_8  -- sfix46_En33
              );

  u_adder_MultiplyAdd16 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block15
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_2_10),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_2_0_9),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_20_3,
              out0 => MatrixMultiply_2_0_10  -- sfix46_En33
              );

  u_adder_MultiplyAdd18 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block17
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_3_6),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_3_0_1),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_8_3,
              out0 => MatrixMultiply_3_0_2  -- sfix46_En33
              );

  u_adder_MultiplyAdd19 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block18
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_3_7),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_3_0_3),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_11_3,
              out0 => MatrixMultiply_3_0_4  -- sfix46_En33
              );

  u_adder_MultiplyAdd20 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block19
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_3_8),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_3_0_5),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_14_3,
              out0 => MatrixMultiply_3_0_6  -- sfix46_En33
              );

  u_adder_MultiplyAdd21 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block20
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_3_9),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_3_0_7),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_17_3,
              out0 => MatrixMultiply_3_0_8  -- sfix46_En33
              );

  u_adder_MultiplyAdd22 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block21
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_3_10),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_3_0_9),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_20_3,
              out0 => MatrixMultiply_3_0_10  -- sfix46_En33
              );

  u_adder_MultiplyAdd24 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block23
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_4_6),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_4_0_1),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_8_3,
              out0 => MatrixMultiply_4_0_2  -- sfix46_En33
              );

  u_adder_MultiplyAdd25 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block24
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_4_7),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_4_0_3),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_11_3,
              out0 => MatrixMultiply_4_0_4  -- sfix46_En33
              );

  u_adder_MultiplyAdd26 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block25
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_4_8),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_4_0_5),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_14_3,
              out0 => MatrixMultiply_4_0_6  -- sfix46_En33
              );

  u_adder_MultiplyAdd27 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block26
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_4_9),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_4_0_7),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_17_3,
              out0 => MatrixMultiply_4_0_8  -- sfix46_En33
              );

  u_adder_MultiplyAdd28 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block27
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_4_10),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_4_0_9),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_20_3,
              out0 => MatrixMultiply_4_0_10  -- sfix46_En33
              );

  u_adder_MultiplyAdd30 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block29
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_5_6),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_5_0_1),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_8_3,
              out0 => MatrixMultiply_5_0_2  -- sfix46_En33
              );

  u_adder_MultiplyAdd31 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block30
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_5_7),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_5_0_3),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_11_3,
              out0 => MatrixMultiply_5_0_4  -- sfix46_En33
              );

  u_adder_MultiplyAdd32 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block31
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_5_8),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_3(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_5_0_5),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_14_3,
              out0 => MatrixMultiply_5_0_6  -- sfix46_En33
              );

  u_adder_MultiplyAdd33 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block32
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_5_9),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(0)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_5_0_7),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_17_3,
              out0 => MatrixMultiply_5_0_8  -- sfix46_En33
              );

  u_adder_MultiplyAdd34 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block33
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_5_10),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(1)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_5_0_9),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_20_3,
              out0 => MatrixMultiply_5_0_10  -- sfix46_En33
              );

  u_Divide : uz_sixphase_VSD_transformation_src_Divide_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Cosine,  -- sfix18_En16
              in1 => std_logic_vector(MatrixMultiply_0_0_13),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_26_2,
              out0 => Divide_out1_1  -- sfix27_En16
              );

  u_Divide1 : uz_sixphase_VSD_transformation_src_Divide1_nw
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Sine,  -- sfix18_En16
              in1 => std_logic_vector(u_beta),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_26_2,
              out0 => Divide1_out1_1  -- sfix27_En16
              );

  u_Divide31 : uz_sixphase_VSD_transformation_src_Divide3_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Cosine,  -- sfix18_En16
              in1 => std_logic_vector(MatrixMultiply_1_0_13),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_26_2,
              out0 => Divide3_out1_1  -- sfix27_En16
              );

  u_Divide21 : uz_sixphase_VSD_transformation_src_Divide2_nw_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Sine,  -- sfix18_En16
              in1 => std_logic_vector(u_alpha),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_26_2,
              out0 => Divide2_out1_1  -- sfix27_En16
              );

  u_adder_MultiplyAdd17 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block16
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_2_11),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_2_0_11),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_23_3,
              out0 => MatrixMultiply_2_0_12  -- sfix46_En33
              );

  u_adder_MultiplyAdd23 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block22
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_3_11),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_3_0_11),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_23_3,
              out0 => MatrixMultiply_3_0_12  -- sfix46_En33
              );

  u_adder_MultiplyAdd29 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block28
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_4_11),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_4_0_11),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_23_3,
              out0 => MatrixMultiply_4_0_12  -- sfix46_En33
              );

  u_adder_MultiplyAdd35 : uz_sixphase_VSD_transformation_src_adder_MultiplyAdd_nw_block34
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Constant1_out1t_5_11),  -- sfix18_En17
              in1 => std_logic_vector(Gain4_out1_1(2)),  -- sfix27_En16
              in2 => std_logic_vector(MatrixMultiply_5_0_11),  -- sfix27_En16
              globalSchedule => crp_temp_enb_phase_23_3,
              out0 => MatrixMultiply_5_0_12  -- sfix46_En33
              );

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        Unit_Delay_out1 <= trigger_new_values;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  theta_el_signed <= signed(theta_el);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_0 = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Switch1_out1 <= Switch1_out1_1 WHEN Unit_Delay_out1 = '0' ELSE
      theta_el_signed;

  delayMatch64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch1_out1_2 <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_0 = '1' THEN
        Switch1_out1_2 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch64_process;


  theta_el_axi <= std_logic_vector(Switch1_out1_2);

  Unit_Delay_out1_1 <= Unit_Delay_out1;

  c1_Constant1_out1(0) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(1) <= to_signed(-16#08000#, 18);
  c1_Constant1_out1(2) <= to_signed(-16#08000#, 18);
  c1_Constant1_out1(3) <= to_signed(16#0DDB4#, 18);
  c1_Constant1_out1(4) <= to_signed(-16#0DDB4#, 18);
  c1_Constant1_out1(5) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(6) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(7) <= to_signed(16#0DDB4#, 18);
  c1_Constant1_out1(8) <= to_signed(-16#0DDB4#, 18);
  c1_Constant1_out1(9) <= to_signed(16#08000#, 18);
  c1_Constant1_out1(10) <= to_signed(16#08000#, 18);
  c1_Constant1_out1(11) <= to_signed(-16#10000#, 18);
  c1_Constant1_out1(12) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(13) <= to_signed(-16#08000#, 18);
  c1_Constant1_out1(14) <= to_signed(-16#08000#, 18);
  c1_Constant1_out1(15) <= to_signed(-16#0DDB4#, 18);
  c1_Constant1_out1(16) <= to_signed(16#0DDB4#, 18);
  c1_Constant1_out1(17) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(18) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(19) <= to_signed(-16#0DDB4#, 18);
  c1_Constant1_out1(20) <= to_signed(16#0DDB4#, 18);
  c1_Constant1_out1(21) <= to_signed(16#08000#, 18);
  c1_Constant1_out1(22) <= to_signed(16#08000#, 18);
  c1_Constant1_out1(23) <= to_signed(-16#10000#, 18);
  c1_Constant1_out1(24) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(25) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(26) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(27) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(28) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(29) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(30) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(31) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(32) <= to_signed(16#00000#, 18);
  c1_Constant1_out1(33) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(34) <= to_signed(16#10000#, 18);
  c1_Constant1_out1(35) <= to_signed(16#10000#, 18);

  Constant1_out1GEN_LABEL1: FOR d1 IN 0 TO 5 GENERATE
    Constant1_out1GEN_LABEL: FOR d0 IN 0 TO 5 GENERATE
      Constant1_out1(d0, d1) <= c1_Constant1_out1(d0 + (d1 * 6));
    END GENERATE;
  END GENERATE;

  t17_output : PROCESS (Constant1_out1)
  BEGIN
    Constant1_out1t(0, 0) <= Constant1_out1(0, 0);
    Constant1_out1t(1, 0) <= Constant1_out1(0, 1);
    Constant1_out1t(2, 0) <= Constant1_out1(0, 2);
    Constant1_out1t(3, 0) <= Constant1_out1(0, 3);
    Constant1_out1t(4, 0) <= Constant1_out1(0, 4);
    Constant1_out1t(5, 0) <= Constant1_out1(0, 5);
    Constant1_out1t(0, 1) <= Constant1_out1(1, 0);
    Constant1_out1t(1, 1) <= Constant1_out1(1, 1);
    Constant1_out1t(2, 1) <= Constant1_out1(1, 2);
    Constant1_out1t(3, 1) <= Constant1_out1(1, 3);
    Constant1_out1t(4, 1) <= Constant1_out1(1, 4);
    Constant1_out1t(5, 1) <= Constant1_out1(1, 5);
    Constant1_out1t(0, 2) <= Constant1_out1(2, 0);
    Constant1_out1t(1, 2) <= Constant1_out1(2, 1);
    Constant1_out1t(2, 2) <= Constant1_out1(2, 2);
    Constant1_out1t(3, 2) <= Constant1_out1(2, 3);
    Constant1_out1t(4, 2) <= Constant1_out1(2, 4);
    Constant1_out1t(5, 2) <= Constant1_out1(2, 5);
    Constant1_out1t(0, 3) <= Constant1_out1(3, 0);
    Constant1_out1t(1, 3) <= Constant1_out1(3, 1);
    Constant1_out1t(2, 3) <= Constant1_out1(3, 2);
    Constant1_out1t(3, 3) <= Constant1_out1(3, 3);
    Constant1_out1t(4, 3) <= Constant1_out1(3, 4);
    Constant1_out1t(5, 3) <= Constant1_out1(3, 5);
    Constant1_out1t(0, 4) <= Constant1_out1(4, 0);
    Constant1_out1t(1, 4) <= Constant1_out1(4, 1);
    Constant1_out1t(2, 4) <= Constant1_out1(4, 2);
    Constant1_out1t(3, 4) <= Constant1_out1(4, 3);
    Constant1_out1t(4, 4) <= Constant1_out1(4, 4);
    Constant1_out1t(5, 4) <= Constant1_out1(4, 5);
    Constant1_out1t(0, 5) <= Constant1_out1(5, 0);
    Constant1_out1t(1, 5) <= Constant1_out1(5, 1);
    Constant1_out1t(2, 5) <= Constant1_out1(5, 2);
    Constant1_out1t(3, 5) <= Constant1_out1(5, 3);
    Constant1_out1t(4, 5) <= Constant1_out1(5, 4);
    Constant1_out1t(5, 5) <= Constant1_out1(5, 5);
  END PROCESS t17_output;


  Constant1_out1t_0(0) <= Constant1_out1t(0, 0);
  Constant1_out1t_0(1) <= Constant1_out1t(1, 0);
  Constant1_out1t_0(2) <= Constant1_out1t(2, 0);
  Constant1_out1t_0(3) <= Constant1_out1t(3, 0);
  Constant1_out1t_0(4) <= Constant1_out1t(4, 0);
  Constant1_out1t_0(5) <= Constant1_out1t(5, 0);

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg(0) <= to_signed(16#00000#, 18);
        delayMatch10_reg(1) <= to_signed(16#00000#, 18);
        delayMatch10_reg(2) <= to_signed(16#00000#, 18);
        delayMatch10_reg(3) <= to_signed(16#00000#, 18);
        delayMatch10_reg(4) <= to_signed(16#00000#, 18);
        delayMatch10_reg(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
        delayMatch10_reg(5) <= delayMatch10_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Constant1_out1t_0_1(0) <= delayMatch10_reg(0);
  Constant1_out1t_0_1(1) <= delayMatch10_reg(1);
  Constant1_out1t_0_1(2) <= delayMatch10_reg(2);
  Constant1_out1t_0_1(3) <= delayMatch10_reg(3);
  Constant1_out1t_0_1(4) <= delayMatch10_reg(4);
  Constant1_out1t_0_1(5) <= delayMatch10_reg(5);
  delayMatch10_reg_next(0) <= Constant1_out1t_0(0);
  delayMatch10_reg_next(1) <= Constant1_out1t_0(1);
  delayMatch10_reg_next(2) <= Constant1_out1t_0(2);
  delayMatch10_reg_next(3) <= Constant1_out1t_0(3);
  delayMatch10_reg_next(4) <= Constant1_out1t_0(4);
  delayMatch10_reg_next(5) <= Constant1_out1t_0(5);

  outputgen31: FOR k IN 0 TO 5 GENERATE
    Constant1_out1t_0_2(k) <= std_logic_vector(Constant1_out1t_0_1(k));
  END GENERATE;

  kconst <= to_signed(16#145F3#, 18);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        From_out1 <= to_signed(16#00000#, 18);
      ELSIF enb_1_100_0 = '1' THEN
        From_out1 <= theta_el_signed;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Delay1_out1 <= std_logic_vector(From_out1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 99
  ctr_99_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        ctr_99_sig <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        IF ctr_99_sig >= to_unsigned(16#63#, 8) THEN 
          ctr_99_sig <= to_unsigned(16#00#, 8);
        ELSE 
          ctr_99_sig <= ctr_99_sig + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_99_process;


  
  crp_temp_enb_phase_0_2 <= '1' WHEN ctr_99_sig <= to_unsigned(16#02#, 8) ELSE
      '0';

  x_in_dq(0) <= x_in_dq_0;
  x_in_dq(1) <= x_in_dq_1;
  x_in_dq(2) <= x_in_dq_2;
  x_in_dq(3) <= x_in_dq_3;
  x_in_dq(4) <= x_in_dq_4;
  x_in_dq(5) <= x_in_dq_5;

  outputgen30: FOR k IN 0 TO 5 GENERATE
    x_in_dq_6(k) <= signed(x_in_dq(k));
  END GENERATE;

  x_in_dq_7 <= x_in_dq_6;

  x_in_dq_0_1 <= x_in_dq_7(0);

  Cosine_1 <= signed(Cosine);

  Cosine_2 <= std_logic_vector(Cosine_1);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_d <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        i_d <= x_in_dq_0_1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  
  enb_counter_ge_3_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#03#, 8) ELSE
      '0';

  
  enb_counter_le_5_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#05#, 8) ELSE
      '0';

  crp_temp_enb_phase_3_2 <= enb_counter_ge_3_1 AND enb_counter_le_5_1;

  x_in_dq_1_1 <= x_in_dq_7(1);

  Sine_1 <= signed(Sine);

  Sine_2 <= std_logic_vector(Sine_1);

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_q <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        i_q <= x_in_dq_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  Sine_3 <= signed(Sine);

  Sine_4 <= std_logic_vector(Sine_3);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_d_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        i_d_1 <= x_in_dq_0_1;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  Cosine_3 <= signed(Cosine);

  Cosine_4 <= std_logic_vector(Cosine_3);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_q_1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        i_q_1 <= x_in_dq_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  Divide_out1_signed <= signed(Divide_out1);

  Divide1_out1_signed <= signed(Divide1_out1);

  Add_out1 <= Divide_out1_signed - Divide1_out1_signed;

  Divide2_out1_signed <= signed(Divide2_out1);

  Divide3_out1_signed <= signed(Divide3_out1);

  Add1_out1 <= Divide2_out1_signed + Divide3_out1_signed;

  x_in_dq_2_1 <= x_in_dq_7(2);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out3 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux1_out3 <= x_in_dq_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  x_in_dq_3_1 <= x_in_dq_7(3);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out4 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux1_out4 <= x_in_dq_3_1;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  x_in_dq_4_1 <= x_in_dq_7(4);

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out5 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux1_out5 <= x_in_dq_4_1;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  x_in_dq_5_1 <= x_in_dq_7(5);

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out6 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux1_out6 <= x_in_dq_5_1;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  Mux_out1(0) <= Add_out1;
  Mux_out1(1) <= Add1_out1;
  Mux_out1(2) <= Demux1_out3;
  Mux_out1(3) <= Demux1_out4;
  Mux_out1(4) <= Demux1_out5;
  Mux_out1(5) <= Demux1_out6;

  outputgen29: FOR k IN 0 TO 5 GENERATE
    Mux_out1_1(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  
  enb_counter_ge_5_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#05#, 8) ELSE
      '0';

  
  enb_counter_le_10_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#0A#, 8) ELSE
      '0';

  crp_temp_enb_phase_5_5 <= enb_counter_ge_5_1 AND enb_counter_le_10_1;

  Constant1_out1t_1(0) <= Constant1_out1t(0, 1);
  Constant1_out1t_1(1) <= Constant1_out1t(1, 1);
  Constant1_out1t_1(2) <= Constant1_out1t(2, 1);
  Constant1_out1t_1(3) <= Constant1_out1t(3, 1);
  Constant1_out1t_1(4) <= Constant1_out1t(4, 1);
  Constant1_out1t_1(5) <= Constant1_out1t(5, 1);

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= to_signed(16#00000#, 18);
        delayMatch11_reg(1) <= to_signed(16#00000#, 18);
        delayMatch11_reg(2) <= to_signed(16#00000#, 18);
        delayMatch11_reg(3) <= to_signed(16#00000#, 18);
        delayMatch11_reg(4) <= to_signed(16#00000#, 18);
        delayMatch11_reg(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Constant1_out1t_1_1(0) <= delayMatch11_reg(0);
  Constant1_out1t_1_1(1) <= delayMatch11_reg(1);
  Constant1_out1t_1_1(2) <= delayMatch11_reg(2);
  Constant1_out1t_1_1(3) <= delayMatch11_reg(3);
  Constant1_out1t_1_1(4) <= delayMatch11_reg(4);
  Constant1_out1t_1_1(5) <= delayMatch11_reg(5);
  delayMatch11_reg_next(0) <= Constant1_out1t_1(0);
  delayMatch11_reg_next(1) <= Constant1_out1t_1(1);
  delayMatch11_reg_next(2) <= Constant1_out1t_1(2);
  delayMatch11_reg_next(3) <= Constant1_out1t_1(3);
  delayMatch11_reg_next(4) <= Constant1_out1t_1(4);
  delayMatch11_reg_next(5) <= Constant1_out1t_1(5);

  outputgen28: FOR k IN 0 TO 5 GENERATE
    Constant1_out1t_1_2(k) <= std_logic_vector(Constant1_out1t_1_1(k));
  END GENERATE;

  outputgen27: FOR k IN 0 TO 5 GENERATE
    Mux_out1_2(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  Constant1_out1t_2(0) <= Constant1_out1t(0, 2);
  Constant1_out1t_2(1) <= Constant1_out1t(1, 2);
  Constant1_out1t_2(2) <= Constant1_out1t(2, 2);
  Constant1_out1t_2(3) <= Constant1_out1t(3, 2);
  Constant1_out1t_2(4) <= Constant1_out1t(4, 2);
  Constant1_out1t_2(5) <= Constant1_out1t(5, 2);

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch12_reg(0) <= to_signed(16#00000#, 18);
        delayMatch12_reg(1) <= to_signed(16#00000#, 18);
        delayMatch12_reg(2) <= to_signed(16#00000#, 18);
        delayMatch12_reg(3) <= to_signed(16#00000#, 18);
        delayMatch12_reg(4) <= to_signed(16#00000#, 18);
        delayMatch12_reg(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
        delayMatch12_reg(5) <= delayMatch12_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  Constant1_out1t_2_1(0) <= delayMatch12_reg(0);
  Constant1_out1t_2_1(1) <= delayMatch12_reg(1);
  Constant1_out1t_2_1(2) <= delayMatch12_reg(2);
  Constant1_out1t_2_1(3) <= delayMatch12_reg(3);
  Constant1_out1t_2_1(4) <= delayMatch12_reg(4);
  Constant1_out1t_2_1(5) <= delayMatch12_reg(5);
  delayMatch12_reg_next(0) <= Constant1_out1t_2(0);
  delayMatch12_reg_next(1) <= Constant1_out1t_2(1);
  delayMatch12_reg_next(2) <= Constant1_out1t_2(2);
  delayMatch12_reg_next(3) <= Constant1_out1t_2(3);
  delayMatch12_reg_next(4) <= Constant1_out1t_2(4);
  delayMatch12_reg_next(5) <= Constant1_out1t_2(5);

  outputgen26: FOR k IN 0 TO 5 GENERATE
    Constant1_out1t_2_2(k) <= std_logic_vector(Constant1_out1t_2_1(k));
  END GENERATE;

  outputgen25: FOR k IN 0 TO 5 GENERATE
    Mux_out1_3(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  Constant1_out1t_3(0) <= Constant1_out1t(0, 3);
  Constant1_out1t_3(1) <= Constant1_out1t(1, 3);
  Constant1_out1t_3(2) <= Constant1_out1t(2, 3);
  Constant1_out1t_3(3) <= Constant1_out1t(3, 3);
  Constant1_out1t_3(4) <= Constant1_out1t(4, 3);
  Constant1_out1t_3(5) <= Constant1_out1t(5, 3);

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= to_signed(16#00000#, 18);
        delayMatch13_reg(1) <= to_signed(16#00000#, 18);
        delayMatch13_reg(2) <= to_signed(16#00000#, 18);
        delayMatch13_reg(3) <= to_signed(16#00000#, 18);
        delayMatch13_reg(4) <= to_signed(16#00000#, 18);
        delayMatch13_reg(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
        delayMatch13_reg(5) <= delayMatch13_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  Constant1_out1t_3_1(0) <= delayMatch13_reg(0);
  Constant1_out1t_3_1(1) <= delayMatch13_reg(1);
  Constant1_out1t_3_1(2) <= delayMatch13_reg(2);
  Constant1_out1t_3_1(3) <= delayMatch13_reg(3);
  Constant1_out1t_3_1(4) <= delayMatch13_reg(4);
  Constant1_out1t_3_1(5) <= delayMatch13_reg(5);
  delayMatch13_reg_next(0) <= Constant1_out1t_3(0);
  delayMatch13_reg_next(1) <= Constant1_out1t_3(1);
  delayMatch13_reg_next(2) <= Constant1_out1t_3(2);
  delayMatch13_reg_next(3) <= Constant1_out1t_3(3);
  delayMatch13_reg_next(4) <= Constant1_out1t_3(4);
  delayMatch13_reg_next(5) <= Constant1_out1t_3(5);

  outputgen24: FOR k IN 0 TO 5 GENERATE
    Constant1_out1t_3_2(k) <= std_logic_vector(Constant1_out1t_3_1(k));
  END GENERATE;

  outputgen23: FOR k IN 0 TO 5 GENERATE
    Mux_out1_4(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  Constant1_out1t_4(0) <= Constant1_out1t(0, 4);
  Constant1_out1t_4(1) <= Constant1_out1t(1, 4);
  Constant1_out1t_4(2) <= Constant1_out1t(2, 4);
  Constant1_out1t_4(3) <= Constant1_out1t(3, 4);
  Constant1_out1t_4(4) <= Constant1_out1t(4, 4);
  Constant1_out1t_4(5) <= Constant1_out1t(5, 4);

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= to_signed(16#00000#, 18);
        delayMatch14_reg(1) <= to_signed(16#00000#, 18);
        delayMatch14_reg(2) <= to_signed(16#00000#, 18);
        delayMatch14_reg(3) <= to_signed(16#00000#, 18);
        delayMatch14_reg(4) <= to_signed(16#00000#, 18);
        delayMatch14_reg(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
        delayMatch14_reg(4) <= delayMatch14_reg_next(4);
        delayMatch14_reg(5) <= delayMatch14_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  Constant1_out1t_4_1(0) <= delayMatch14_reg(0);
  Constant1_out1t_4_1(1) <= delayMatch14_reg(1);
  Constant1_out1t_4_1(2) <= delayMatch14_reg(2);
  Constant1_out1t_4_1(3) <= delayMatch14_reg(3);
  Constant1_out1t_4_1(4) <= delayMatch14_reg(4);
  Constant1_out1t_4_1(5) <= delayMatch14_reg(5);
  delayMatch14_reg_next(0) <= Constant1_out1t_4(0);
  delayMatch14_reg_next(1) <= Constant1_out1t_4(1);
  delayMatch14_reg_next(2) <= Constant1_out1t_4(2);
  delayMatch14_reg_next(3) <= Constant1_out1t_4(3);
  delayMatch14_reg_next(4) <= Constant1_out1t_4(4);
  delayMatch14_reg_next(5) <= Constant1_out1t_4(5);

  outputgen22: FOR k IN 0 TO 5 GENERATE
    Constant1_out1t_4_2(k) <= std_logic_vector(Constant1_out1t_4_1(k));
  END GENERATE;

  outputgen21: FOR k IN 0 TO 5 GENERATE
    Mux_out1_5(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  Constant1_out1t_5(0) <= Constant1_out1t(0, 5);
  Constant1_out1t_5(1) <= Constant1_out1t(1, 5);
  Constant1_out1t_5(2) <= Constant1_out1t(2, 5);
  Constant1_out1t_5(3) <= Constant1_out1t(3, 5);
  Constant1_out1t_5(4) <= Constant1_out1t(4, 5);
  Constant1_out1t_5(5) <= Constant1_out1t(5, 5);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= to_signed(16#00000#, 18);
        delayMatch15_reg(1) <= to_signed(16#00000#, 18);
        delayMatch15_reg(2) <= to_signed(16#00000#, 18);
        delayMatch15_reg(3) <= to_signed(16#00000#, 18);
        delayMatch15_reg(4) <= to_signed(16#00000#, 18);
        delayMatch15_reg(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  Constant1_out1t_5_1(0) <= delayMatch15_reg(0);
  Constant1_out1t_5_1(1) <= delayMatch15_reg(1);
  Constant1_out1t_5_1(2) <= delayMatch15_reg(2);
  Constant1_out1t_5_1(3) <= delayMatch15_reg(3);
  Constant1_out1t_5_1(4) <= delayMatch15_reg(4);
  Constant1_out1t_5_1(5) <= delayMatch15_reg(5);
  delayMatch15_reg_next(0) <= Constant1_out1t_5(0);
  delayMatch15_reg_next(1) <= Constant1_out1t_5(1);
  delayMatch15_reg_next(2) <= Constant1_out1t_5(2);
  delayMatch15_reg_next(3) <= Constant1_out1t_5(3);
  delayMatch15_reg_next(4) <= Constant1_out1t_5(4);
  delayMatch15_reg_next(5) <= Constant1_out1t_5(5);

  outputgen20: FOR k IN 0 TO 5 GENERATE
    Constant1_out1t_5_2(k) <= std_logic_vector(Constant1_out1t_5_1(k));
  END GENERATE;

  outputgen19: FOR k IN 0 TO 5 GENERATE
    Mux_out1_6(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;


  outputgen18: FOR k IN 0 TO 5 GENERATE
    colTemp_0_1(k) <= signed(colTemp_0(k));
  END GENERATE;

  MatrixMultiply_out1GEN_LABEL: FOR idx0 IN 0 TO 5 GENERATE
    MatrixMultiply_out1(idx0) <= colTemp_0_1(idx0);
  END GENERATE;

  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_bypass_reg(0) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(1) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(2) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(3) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(4) <= to_signed(16#0000000#, 27);
        Delay9_bypass_reg(5) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        Delay9_bypass_reg(0) <= Delay9_bypass_reg_next(0);
        Delay9_bypass_reg(1) <= Delay9_bypass_reg_next(1);
        Delay9_bypass_reg(2) <= Delay9_bypass_reg_next(2);
        Delay9_bypass_reg(3) <= Delay9_bypass_reg_next(3);
        Delay9_bypass_reg(4) <= Delay9_bypass_reg_next(4);
        Delay9_bypass_reg(5) <= Delay9_bypass_reg_next(5);
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;

  
  Switch_out1_1(0) <= Switch_out1(0) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(0);
  
  Switch_out1_1(1) <= Switch_out1(1) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(1);
  
  Switch_out1_1(2) <= Switch_out1(2) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(2);
  
  Switch_out1_1(3) <= Switch_out1(3) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(3);
  
  Switch_out1_1(4) <= Switch_out1(4) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(4);
  
  Switch_out1_1(5) <= Switch_out1(5) WHEN enb_1_100_1 = '1' ELSE
      Delay9_bypass_reg(5);
  Delay9_bypass_reg_next(0) <= Switch_out1(0);
  Delay9_bypass_reg_next(1) <= Switch_out1(1);
  Delay9_bypass_reg_next(2) <= Switch_out1(2);
  Delay9_bypass_reg_next(3) <= Switch_out1(3);
  Delay9_bypass_reg_next(4) <= Switch_out1(4);
  Delay9_bypass_reg_next(5) <= Switch_out1(5);

  Delay9_out1 <= Switch_out1_1;

  
  Switch_out1_2(0) <= Delay9_out1(0) WHEN Unit_Delay_out1_1 = '0' ELSE
      MatrixMultiply_out1(0);
  
  Switch_out1_2(1) <= Delay9_out1(1) WHEN Unit_Delay_out1_1 = '0' ELSE
      MatrixMultiply_out1(1);
  
  Switch_out1_2(2) <= Delay9_out1(2) WHEN Unit_Delay_out1_1 = '0' ELSE
      MatrixMultiply_out1(2);
  
  Switch_out1_2(3) <= Delay9_out1(3) WHEN Unit_Delay_out1_1 = '0' ELSE
      MatrixMultiply_out1(3);
  
  Switch_out1_2(4) <= Delay9_out1(4) WHEN Unit_Delay_out1_1 = '0' ELSE
      MatrixMultiply_out1(4);
  
  Switch_out1_2(5) <= Delay9_out1(5) WHEN Unit_Delay_out1_1 = '0' ELSE
      MatrixMultiply_out1(5);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Switch_out1(0) <= to_signed(16#0000000#, 27);
        Switch_out1(1) <= to_signed(16#0000000#, 27);
        Switch_out1(2) <= to_signed(16#0000000#, 27);
        Switch_out1(3) <= to_signed(16#0000000#, 27);
        Switch_out1(4) <= to_signed(16#0000000#, 27);
        Switch_out1(5) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Switch_out1(0) <= Switch_out1_2(0);
        Switch_out1(1) <= Switch_out1_2(1);
        Switch_out1(2) <= Switch_out1_2(2);
        Switch_out1(3) <= Switch_out1_2(3);
        Switch_out1(4) <= Switch_out1_2(4);
        Switch_out1(5) <= Switch_out1_2(5);
      END IF;
    END IF;
  END PROCESS reduced_process;


  t35_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t35_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t35_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t35_bypass_reg(2) <= to_signed(16#0000000#, 27);
        t35_bypass_reg(3) <= to_signed(16#0000000#, 27);
        t35_bypass_reg(4) <= to_signed(16#0000000#, 27);
        t35_bypass_reg(5) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t35_bypass_reg(0) <= t35_bypass_reg_next(0);
        t35_bypass_reg(1) <= t35_bypass_reg_next(1);
        t35_bypass_reg(2) <= t35_bypass_reg_next(2);
        t35_bypass_reg(3) <= t35_bypass_reg_next(3);
        t35_bypass_reg(4) <= t35_bypass_reg_next(4);
        t35_bypass_reg(5) <= t35_bypass_reg_next(5);
      END IF;
    END IF;
  END PROCESS t35_bypass_process;

  
  Switch_out1_3(0) <= Switch_out1(0) WHEN enb_1_100_1 = '1' ELSE
      t35_bypass_reg(0);
  
  Switch_out1_3(1) <= Switch_out1(1) WHEN enb_1_100_1 = '1' ELSE
      t35_bypass_reg(1);
  
  Switch_out1_3(2) <= Switch_out1(2) WHEN enb_1_100_1 = '1' ELSE
      t35_bypass_reg(2);
  
  Switch_out1_3(3) <= Switch_out1(3) WHEN enb_1_100_1 = '1' ELSE
      t35_bypass_reg(3);
  
  Switch_out1_3(4) <= Switch_out1(4) WHEN enb_1_100_1 = '1' ELSE
      t35_bypass_reg(4);
  
  Switch_out1_3(5) <= Switch_out1(5) WHEN enb_1_100_1 = '1' ELSE
      t35_bypass_reg(5);
  t35_bypass_reg_next(0) <= Switch_out1(0);
  t35_bypass_reg_next(1) <= Switch_out1(1);
  t35_bypass_reg_next(2) <= Switch_out1(2);
  t35_bypass_reg_next(3) <= Switch_out1(3);
  t35_bypass_reg_next(4) <= Switch_out1(4);
  t35_bypass_reg_next(5) <= Switch_out1(5);

  x_abc_out_axi_0 <= std_logic_vector(Switch_out1_3(0));

  x_abc_out_axi_1 <= std_logic_vector(Switch_out1_3(1));

  x_abc_out_axi_2 <= std_logic_vector(Switch_out1_3(2));

  x_abc_out_axi_3 <= std_logic_vector(Switch_out1_3(3));

  x_abc_out_axi_4 <= std_logic_vector(Switch_out1_3(4));

  x_abc_out_axi_5 <= std_logic_vector(Switch_out1_3(5));

  Demux1_out1(0) <= MatrixMultiply_out1(0);
  Demux1_out1(1) <= MatrixMultiply_out1(1);
  Demux1_out1(2) <= MatrixMultiply_out1(2);

  Demux1_out1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out1_2(0) <= to_signed(16#0000000#, 27);
        Demux1_out1_2(1) <= to_signed(16#0000000#, 27);
        Demux1_out1_2(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux1_out1_2(0) <= Demux1_out1(0);
        Demux1_out1_2(1) <= Demux1_out1(1);
        Demux1_out1_2(2) <= Demux1_out1(2);
      END IF;
    END IF;
  END PROCESS Demux1_out1_1_process;


  t33_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t33_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t33_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t33_bypass_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t33_bypass_reg(0) <= t33_bypass_reg_next(0);
        t33_bypass_reg(1) <= t33_bypass_reg_next(1);
        t33_bypass_reg(2) <= t33_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t33_bypass_process;

  
  Demux1_out1_3(0) <= Demux1_out1_2(0) WHEN enb_1_100_1 = '1' ELSE
      t33_bypass_reg(0);
  
  Demux1_out1_3(1) <= Demux1_out1_2(1) WHEN enb_1_100_1 = '1' ELSE
      t33_bypass_reg(1);
  
  Demux1_out1_3(2) <= Demux1_out1_2(2) WHEN enb_1_100_1 = '1' ELSE
      t33_bypass_reg(2);
  t33_bypass_reg_next(0) <= Demux1_out1_2(0);
  t33_bypass_reg_next(1) <= Demux1_out1_2(1);
  t33_bypass_reg_next(2) <= Demux1_out1_2(2);

  x_abc_1_0 <= std_logic_vector(Demux1_out1_3(0));

  x_abc_1_1 <= std_logic_vector(Demux1_out1_3(1));

  x_abc_1_2 <= std_logic_vector(Demux1_out1_3(2));

  Demux1_out2(0) <= MatrixMultiply_out1(3);
  Demux1_out2(1) <= MatrixMultiply_out1(4);
  Demux1_out2(2) <= MatrixMultiply_out1(5);

  Demux1_out2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Demux1_out2_2(0) <= to_signed(16#0000000#, 27);
        Demux1_out2_2(1) <= to_signed(16#0000000#, 27);
        Demux1_out2_2(2) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Demux1_out2_2(0) <= Demux1_out2(0);
        Demux1_out2_2(1) <= Demux1_out2(1);
        Demux1_out2_2(2) <= Demux1_out2(2);
      END IF;
    END IF;
  END PROCESS Demux1_out2_1_process;


  t34_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t34_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t34_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t34_bypass_reg(2) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t34_bypass_reg(0) <= t34_bypass_reg_next(0);
        t34_bypass_reg(1) <= t34_bypass_reg_next(1);
        t34_bypass_reg(2) <= t34_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t34_bypass_process;

  
  Demux1_out2_3(0) <= Demux1_out2_2(0) WHEN enb_1_100_1 = '1' ELSE
      t34_bypass_reg(0);
  
  Demux1_out2_3(1) <= Demux1_out2_2(1) WHEN enb_1_100_1 = '1' ELSE
      t34_bypass_reg(1);
  
  Demux1_out2_3(2) <= Demux1_out2_2(2) WHEN enb_1_100_1 = '1' ELSE
      t34_bypass_reg(2);
  t34_bypass_reg_next(0) <= Demux1_out2_2(0);
  t34_bypass_reg_next(1) <= Demux1_out2_2(1);
  t34_bypass_reg_next(2) <= Demux1_out2_2(2);

  x_abc_2_0 <= std_logic_vector(Demux1_out2_3(0));

  x_abc_2_1 <= std_logic_vector(Demux1_out2_3(1));

  x_abc_2_2 <= std_logic_vector(Demux1_out2_3(2));

  c19_Constant1_out1(0) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(1) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(2) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(3) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(4) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(5) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(6) <= to_signed(-16#05555#, 18);
  c19_Constant1_out1(7) <= to_signed(16#093CD#, 18);
  c19_Constant1_out1(8) <= to_signed(-16#05555#, 18);
  c19_Constant1_out1(9) <= to_signed(-16#093CD#, 18);
  c19_Constant1_out1(10) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(11) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(12) <= to_signed(-16#05555#, 18);
  c19_Constant1_out1(13) <= to_signed(-16#093CD#, 18);
  c19_Constant1_out1(14) <= to_signed(-16#05555#, 18);
  c19_Constant1_out1(15) <= to_signed(16#093CD#, 18);
  c19_Constant1_out1(16) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(17) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(18) <= to_signed(16#093CD#, 18);
  c19_Constant1_out1(19) <= to_signed(16#05555#, 18);
  c19_Constant1_out1(20) <= to_signed(-16#093CD#, 18);
  c19_Constant1_out1(21) <= to_signed(16#05555#, 18);
  c19_Constant1_out1(22) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(23) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(24) <= to_signed(-16#093CD#, 18);
  c19_Constant1_out1(25) <= to_signed(16#05555#, 18);
  c19_Constant1_out1(26) <= to_signed(16#093CD#, 18);
  c19_Constant1_out1(27) <= to_signed(16#05555#, 18);
  c19_Constant1_out1(28) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(29) <= to_signed(16#0AAAB#, 18);
  c19_Constant1_out1(30) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(31) <= to_signed(-16#0AAAB#, 18);
  c19_Constant1_out1(32) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(33) <= to_signed(-16#0AAAB#, 18);
  c19_Constant1_out1(34) <= to_signed(16#00000#, 18);
  c19_Constant1_out1(35) <= to_signed(16#0AAAB#, 18);

  Constant1_out1_1GEN_LABEL1: FOR d1 IN 0 TO 5 GENERATE
    Constant1_out1_1GEN_LABEL: FOR d0 IN 0 TO 5 GENERATE
      Constant1_out1_1(d0, d1) <= c19_Constant1_out1(d0 + (d1 * 6));
    END GENERATE;
  END GENERATE;

  t13_output : PROCESS (Constant1_out1_1)
  BEGIN
    Constant1_out1t_6(0, 0) <= Constant1_out1_1(0, 0);
    Constant1_out1t_6(1, 0) <= Constant1_out1_1(0, 1);
    Constant1_out1t_6(2, 0) <= Constant1_out1_1(0, 2);
    Constant1_out1t_6(3, 0) <= Constant1_out1_1(0, 3);
    Constant1_out1t_6(4, 0) <= Constant1_out1_1(0, 4);
    Constant1_out1t_6(5, 0) <= Constant1_out1_1(0, 5);
    Constant1_out1t_6(0, 1) <= Constant1_out1_1(1, 0);
    Constant1_out1t_6(1, 1) <= Constant1_out1_1(1, 1);
    Constant1_out1t_6(2, 1) <= Constant1_out1_1(1, 2);
    Constant1_out1t_6(3, 1) <= Constant1_out1_1(1, 3);
    Constant1_out1t_6(4, 1) <= Constant1_out1_1(1, 4);
    Constant1_out1t_6(5, 1) <= Constant1_out1_1(1, 5);
    Constant1_out1t_6(0, 2) <= Constant1_out1_1(2, 0);
    Constant1_out1t_6(1, 2) <= Constant1_out1_1(2, 1);
    Constant1_out1t_6(2, 2) <= Constant1_out1_1(2, 2);
    Constant1_out1t_6(3, 2) <= Constant1_out1_1(2, 3);
    Constant1_out1t_6(4, 2) <= Constant1_out1_1(2, 4);
    Constant1_out1t_6(5, 2) <= Constant1_out1_1(2, 5);
    Constant1_out1t_6(0, 3) <= Constant1_out1_1(3, 0);
    Constant1_out1t_6(1, 3) <= Constant1_out1_1(3, 1);
    Constant1_out1t_6(2, 3) <= Constant1_out1_1(3, 2);
    Constant1_out1t_6(3, 3) <= Constant1_out1_1(3, 3);
    Constant1_out1t_6(4, 3) <= Constant1_out1_1(3, 4);
    Constant1_out1t_6(5, 3) <= Constant1_out1_1(3, 5);
    Constant1_out1t_6(0, 4) <= Constant1_out1_1(4, 0);
    Constant1_out1t_6(1, 4) <= Constant1_out1_1(4, 1);
    Constant1_out1t_6(2, 4) <= Constant1_out1_1(4, 2);
    Constant1_out1t_6(3, 4) <= Constant1_out1_1(4, 3);
    Constant1_out1t_6(4, 4) <= Constant1_out1_1(4, 4);
    Constant1_out1t_6(5, 4) <= Constant1_out1_1(4, 5);
    Constant1_out1t_6(0, 5) <= Constant1_out1_1(5, 0);
    Constant1_out1t_6(1, 5) <= Constant1_out1_1(5, 1);
    Constant1_out1t_6(2, 5) <= Constant1_out1_1(5, 2);
    Constant1_out1t_6(3, 5) <= Constant1_out1_1(5, 3);
    Constant1_out1t_6(4, 5) <= Constant1_out1_1(5, 4);
    Constant1_out1t_6(5, 5) <= Constant1_out1_1(5, 5);
  END PROCESS t13_output;


  Constant1_out1t_0_5 <= Constant1_out1t_6(5, 0);

  c203_kconst(0) <= to_signed(16#10000#, 18);
  c203_kconst(1) <= to_signed(-16#08000#, 18);
  c203_kconst(2) <= to_signed(-16#08000#, 18);
  c203_kconst(3) <= to_signed(16#00000#, 18);
  c203_kconst(4) <= to_signed(16#0DDB4#, 18);
  c203_kconst(5) <= to_signed(-16#0DDB4#, 18);
  c203_kconst(6) <= to_signed(16#10000#, 18);
  c203_kconst(7) <= to_signed(16#10000#, 18);
  c203_kconst(8) <= to_signed(16#10000#, 18);

  kconst_1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconst_1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst_1(d0, d1) <= c203_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  sGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    sGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s(d0 + (d1 * 3)) <= kconst_1(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out(0) <= s(0);
  selector_out(1) <= s(3);
  selector_out(2) <= s(6);
  selector_out(3) <= s(1);
  selector_out(4) <= s(4);
  selector_out(5) <= s(7);
  selector_out(6) <= s(2);
  selector_out(7) <= s(5);
  selector_out(8) <= s(8);

  s_1GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_1(d0) <= selector_out(d0);
  END GENERATE;

  c187_kconst(0) <= to_signed(16#10000#, 18);
  c187_kconst(1) <= to_signed(16#00000#, 18);
  c187_kconst(2) <= to_signed(16#08000#, 18);
  c187_kconst(3) <= to_signed(-16#08000#, 18);
  c187_kconst(4) <= to_signed(16#0DDB4#, 18);
  c187_kconst(5) <= to_signed(16#08000#, 18);
  c187_kconst(6) <= to_signed(-16#08000#, 18);
  c187_kconst(7) <= to_signed(-16#0DDB4#, 18);
  c187_kconst(8) <= to_signed(16#08000#, 18);

  kconst_2GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconst_2GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst_2(d0, d1) <= c187_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  s_2GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    s_2GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s_2(d0 + (d1 * 3)) <= kconst_2(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out_1(0) <= s_2(0);
  selector_out_1(1) <= s_2(3);
  selector_out_1(2) <= s_2(6);
  selector_out_1(3) <= s_2(1);
  selector_out_1(4) <= s_2(4);
  selector_out_1(5) <= s_2(7);
  selector_out_1(6) <= s_2(2);
  selector_out_1(7) <= s_2(5);
  selector_out_1(8) <= s_2(8);

  s_3GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_3(d0) <= selector_out_1(d0);
  END GENERATE;

  alpha_0 <= s_3(0);

  delayMatch22_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_1_reg(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_1(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_1(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_2(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_2(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_3(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_3(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_4(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_4(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_5(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_5(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_6(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_6(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_7(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_7(1) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_8(0) <= to_signed(16#00000#, 18);
        delayMatch22_1_reg_8(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch22_1_reg(0) <= delayMatch22_1_reg_next(0);
        delayMatch22_1_reg(1) <= delayMatch22_1_reg_next(1);
        delayMatch22_1_reg_1(0) <= delayMatch22_1_reg_next_1(0);
        delayMatch22_1_reg_1(1) <= delayMatch22_1_reg_next_1(1);
        delayMatch22_1_reg_2(0) <= delayMatch22_1_reg_next_2(0);
        delayMatch22_1_reg_2(1) <= delayMatch22_1_reg_next_2(1);
        delayMatch22_1_reg_3(0) <= delayMatch22_1_reg_next_3(0);
        delayMatch22_1_reg_3(1) <= delayMatch22_1_reg_next_3(1);
        delayMatch22_1_reg_4(0) <= delayMatch22_1_reg_next_4(0);
        delayMatch22_1_reg_4(1) <= delayMatch22_1_reg_next_4(1);
        delayMatch22_1_reg_5(0) <= delayMatch22_1_reg_next_5(0);
        delayMatch22_1_reg_5(1) <= delayMatch22_1_reg_next_5(1);
        delayMatch22_1_reg_6(0) <= delayMatch22_1_reg_next_6(0);
        delayMatch22_1_reg_6(1) <= delayMatch22_1_reg_next_6(1);
        delayMatch22_1_reg_7(0) <= delayMatch22_1_reg_next_7(0);
        delayMatch22_1_reg_7(1) <= delayMatch22_1_reg_next_7(1);
        delayMatch22_1_reg_8(0) <= delayMatch22_1_reg_next_8(0);
        delayMatch22_1_reg_8(1) <= delayMatch22_1_reg_next_8(1);
      END IF;
    END IF;
  END PROCESS delayMatch22_1_process;

  delayMatch22_1_reg_next(0) <= alpha_0;
  delayMatch22_1_reg_next(1) <= delayMatch22_1_reg(0);
  delayMatch22_out_1 <= delayMatch22_1_reg(1);
  delayMatch22_1_reg_next_1(0) <= alpha_1;
  delayMatch22_1_reg_next_1(1) <= delayMatch22_1_reg_1(0);
  delayMatch22_out_2 <= delayMatch22_1_reg_1(1);
  delayMatch22_1_reg_next_2(0) <= alpha_2;
  delayMatch22_1_reg_next_2(1) <= delayMatch22_1_reg_2(0);
  delayMatch22_out_3 <= delayMatch22_1_reg_2(1);
  delayMatch22_1_reg_next_3(0) <= alpha_3;
  delayMatch22_1_reg_next_3(1) <= delayMatch22_1_reg_3(0);
  delayMatch22_out_4 <= delayMatch22_1_reg_3(1);
  delayMatch22_1_reg_next_4(0) <= alpha_4;
  delayMatch22_1_reg_next_4(1) <= delayMatch22_1_reg_4(0);
  delayMatch22_out_5 <= delayMatch22_1_reg_4(1);
  delayMatch22_1_reg_next_5(0) <= alpha_5;
  delayMatch22_1_reg_next_5(1) <= delayMatch22_1_reg_5(0);
  delayMatch22_out_6 <= delayMatch22_1_reg_5(1);
  delayMatch22_1_reg_next_6(0) <= alpha_6;
  delayMatch22_1_reg_next_6(1) <= delayMatch22_1_reg_6(0);
  delayMatch22_out_7 <= delayMatch22_1_reg_6(1);
  delayMatch22_1_reg_next_7(0) <= alpha_7;
  delayMatch22_1_reg_next_7(1) <= delayMatch22_1_reg_7(0);
  delayMatch22_out_8 <= delayMatch22_1_reg_7(1);
  delayMatch22_1_reg_next_8(0) <= alpha_8;
  delayMatch22_1_reg_next_8(1) <= delayMatch22_1_reg_8(0);
  delayMatch22_out_9 <= delayMatch22_1_reg_8(1);

  alpha_1 <= s_3(1);

  alpha_2 <= s_3(2);

  alpha_3 <= s_3(3);

  alpha_4 <= s_3(4);

  alpha_5 <= s_3(5);

  alpha_6 <= s_3(6);

  alpha_7 <= s_3(7);

  alpha_8 <= s_3(8);

  x_abc2_ll_pl(0) <= x_abc2_ll_pl_0;
  x_abc2_ll_pl(1) <= x_abc2_ll_pl_1;
  x_abc2_ll_pl(2) <= x_abc2_ll_pl_2;

  outputgen17: FOR k IN 0 TO 2 GENERATE
    x_abc2_ll_pl_3(k) <= signed(x_abc2_ll_pl(k));
  END GENERATE;

  x_abc2_ll_pl_4 <= x_abc2_ll_pl_3;

  outputgen16: FOR k IN 0 TO 2 GENERATE
    x_abc2_ll_pl_5(k) <= std_logic_vector(x_abc2_ll_pl_4(k));
  END GENERATE;

  kconst_3 <= to_signed(16#0AAAB#, 18);

  outputgen15: FOR k IN 0 TO 2 GENERATE
    Gain2_out1_signed(k) <= signed(Gain2_out1(k));
  END GENERATE;

  
  Gain2_out1_1(0) <= "011111111111111111111111111" WHEN (Gain2_out1_signed(0)(44) = '0') AND (Gain2_out1_signed(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_signed(0)(44) = '1') AND (Gain2_out1_signed(0)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_signed(0)(42 DOWNTO 16);
  
  Gain2_out1_1(1) <= "011111111111111111111111111" WHEN (Gain2_out1_signed(1)(44) = '0') AND (Gain2_out1_signed(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_signed(1)(44) = '1') AND (Gain2_out1_signed(1)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_signed(1)(42 DOWNTO 16);
  
  Gain2_out1_1(2) <= "011111111111111111111111111" WHEN (Gain2_out1_signed(2)(44) = '0') AND (Gain2_out1_signed(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_signed(2)(44) = '1') AND (Gain2_out1_signed(2)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_signed(2)(42 DOWNTO 16);

  s_4(0) <= delayMatch22_out_1;
  s_4(1) <= delayMatch22_out_2;
  s_4(2) <= delayMatch22_out_3;
  s_4(3) <= delayMatch22_out_4;
  s_4(4) <= delayMatch22_out_5;
  s_4(5) <= delayMatch22_out_6;
  s_4(6) <= delayMatch22_out_7;
  s_4(7) <= delayMatch22_out_8;
  s_4(8) <= delayMatch22_out_9;

  outputgen14: FOR k IN 0 TO 8 GENERATE
    in0(k) <= std_logic_vector(s_4(k));
  END GENERATE;

  selector_out_2(0) <= Gain2_out1_1(0);
  selector_out_2(1) <= Gain2_out1_1(1);
  selector_out_2(2) <= Gain2_out1_1(2);
  selector_out_2(3) <= Gain2_out1_1(0);
  selector_out_2(4) <= Gain2_out1_1(1);
  selector_out_2(5) <= Gain2_out1_1(2);
  selector_out_2(6) <= Gain2_out1_1(0);
  selector_out_2(7) <= Gain2_out1_1(1);
  selector_out_2(8) <= Gain2_out1_1(2);

  s_5GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_5(d0) <= selector_out_2(d0);
  END GENERATE;

  outputgen13: FOR k IN 0 TO 8 GENERATE
    in1(k) <= std_logic_vector(s_5(k));
  END GENERATE;

  
  enb_counter_ge_2_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#02#, 8) ELSE
      '0';

  
  enb_counter_le_4_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#04#, 8) ELSE
      '0';

  crp_temp_enb_phase_2_2 <= enb_counter_ge_2_1 AND enb_counter_le_4_1;

  outputgen12: FOR k IN 0 TO 8 GENERATE
    MMul_dot_product_out_signed(k) <= signed(MMul_dot_product_out(k));
  END GENERATE;

  
  MMul_dot_product_out_1(0) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(0)(44) = '0') AND (MMul_dot_product_out_signed(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(0)(44) = '1') AND (MMul_dot_product_out_signed(0)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(0)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(1) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(1)(44) = '0') AND (MMul_dot_product_out_signed(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(1)(44) = '1') AND (MMul_dot_product_out_signed(1)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(1)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(2) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(2)(44) = '0') AND (MMul_dot_product_out_signed(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(2)(44) = '1') AND (MMul_dot_product_out_signed(2)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(2)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(3) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(3)(44) = '0') AND (MMul_dot_product_out_signed(3)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(3)(44) = '1') AND (MMul_dot_product_out_signed(3)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(3)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(4) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(4)(44) = '0') AND (MMul_dot_product_out_signed(4)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(4)(44) = '1') AND (MMul_dot_product_out_signed(4)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(4)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(5) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(5)(44) = '0') AND (MMul_dot_product_out_signed(5)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(5)(44) = '1') AND (MMul_dot_product_out_signed(5)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(5)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(6) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(6)(44) = '0') AND (MMul_dot_product_out_signed(6)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(6)(44) = '1') AND (MMul_dot_product_out_signed(6)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(6)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(7) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(7)(44) = '0') AND (MMul_dot_product_out_signed(7)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(7)(44) = '1') AND (MMul_dot_product_out_signed(7)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(7)(42 DOWNTO 16);
  
  MMul_dot_product_out_1(8) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed(8)(44) = '0') AND (MMul_dot_product_out_signed(8)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed(8)(44) = '1') AND (MMul_dot_product_out_signed(8)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed(8)(42 DOWNTO 16);

  reshape_outGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_outGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out(d0, d1) <= MMul_dot_product_out_1(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_02_output : PROCESS (reshape_out)
  BEGIN
    selector_out_3(0) <= reshape_out(0, 0);
    selector_out_3(1) <= reshape_out(0, 1);
    selector_out_3(2) <= reshape_out(0, 2);
  END PROCESS select_02_output;


  select_12_output : PROCESS (reshape_out)
  BEGIN
    selector_out_4(0) <= reshape_out(1, 0);
    selector_out_4(1) <= reshape_out(1, 1);
    selector_out_4(2) <= reshape_out(1, 2);
  END PROCESS select_12_output;


  MMul_add_012_add_cast <= resize(selector_out_3(0), 28);
  MMul_add_012_add_cast_1 <= resize(selector_out_4(0), 28);
  MMul_add_012_add_temp <= MMul_add_012_add_cast + MMul_add_012_add_cast_1;
  
  MMul_add_01_out(0) <= "011111111111111111111111111" WHEN (MMul_add_012_add_temp(27) = '0') AND (MMul_add_012_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_012_add_temp(27) = '1') AND (MMul_add_012_add_temp(26) /= '1') ELSE
      MMul_add_012_add_temp(26 DOWNTO 0);
  MMul_add_012_add_cast_2 <= resize(selector_out_3(1), 28);
  MMul_add_012_add_cast_3 <= resize(selector_out_4(1), 28);
  MMul_add_012_add_temp_1 <= MMul_add_012_add_cast_2 + MMul_add_012_add_cast_3;
  
  MMul_add_01_out(1) <= "011111111111111111111111111" WHEN (MMul_add_012_add_temp_1(27) = '0') AND (MMul_add_012_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_012_add_temp_1(27) = '1') AND (MMul_add_012_add_temp_1(26) /= '1') ELSE
      MMul_add_012_add_temp_1(26 DOWNTO 0);
  MMul_add_012_add_cast_4 <= resize(selector_out_3(2), 28);
  MMul_add_012_add_cast_5 <= resize(selector_out_4(2), 28);
  MMul_add_012_add_temp_2 <= MMul_add_012_add_cast_4 + MMul_add_012_add_cast_5;
  
  MMul_add_01_out(2) <= "011111111111111111111111111" WHEN (MMul_add_012_add_temp_2(27) = '0') AND (MMul_add_012_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_012_add_temp_2(27) = '1') AND (MMul_add_012_add_temp_2(26) /= '1') ELSE
      MMul_add_012_add_temp_2(26 DOWNTO 0);

  select_22_output : PROCESS (reshape_out)
  BEGIN
    selector_out_5(0) <= reshape_out(2, 0);
    selector_out_5(1) <= reshape_out(2, 1);
    selector_out_5(2) <= reshape_out(2, 2);
  END PROCESS select_22_output;


  MMul_add_122_add_cast <= resize(MMul_add_01_out(0), 28);
  MMul_add_122_add_cast_1 <= resize(selector_out_5(0), 28);
  MMul_add_122_add_temp <= MMul_add_122_add_cast + MMul_add_122_add_cast_1;
  
  s_6(0) <= "011111111111111111111111111" WHEN (MMul_add_122_add_temp(27) = '0') AND (MMul_add_122_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_122_add_temp(27) = '1') AND (MMul_add_122_add_temp(26) /= '1') ELSE
      MMul_add_122_add_temp(26 DOWNTO 0);
  MMul_add_122_add_cast_2 <= resize(MMul_add_01_out(1), 28);
  MMul_add_122_add_cast_3 <= resize(selector_out_5(1), 28);
  MMul_add_122_add_temp_1 <= MMul_add_122_add_cast_2 + MMul_add_122_add_cast_3;
  
  s_6(1) <= "011111111111111111111111111" WHEN (MMul_add_122_add_temp_1(27) = '0') AND (MMul_add_122_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_122_add_temp_1(27) = '1') AND (MMul_add_122_add_temp_1(26) /= '1') ELSE
      MMul_add_122_add_temp_1(26 DOWNTO 0);
  MMul_add_122_add_cast_4 <= resize(MMul_add_01_out(2), 28);
  MMul_add_122_add_cast_5 <= resize(selector_out_5(2), 28);
  MMul_add_122_add_temp_2 <= MMul_add_122_add_cast_4 + MMul_add_122_add_cast_5;
  
  s_6(2) <= "011111111111111111111111111" WHEN (MMul_add_122_add_temp_2(27) = '0') AND (MMul_add_122_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_122_add_temp_2(27) = '1') AND (MMul_add_122_add_temp_2(26) /= '1') ELSE
      MMul_add_122_add_temp_2(26 DOWNTO 0);

  Gain4_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1(d0) <= s_6(d0);
  END GENERATE;

  Constant1_out1_re <= to_signed(16#08000#, 18);
  Constant1_out1_im <= to_signed(-16#049E7#, 18);

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_A <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_A <= Constant1_out1_re;
      END IF;
    END IF;
  END PROCESS delayMatch23_process;


  
  enb_counter_ge_4_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#04#, 8) ELSE
      '0';

  
  enb_counter_le_6_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#06#, 8) ELSE
      '0';

  crp_temp_enb_phase_4_2 <= enb_counter_ge_4_1 AND enb_counter_le_6_1;

  delayMatch25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_B <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_B <= Constant1_out1_im;
      END IF;
    END IF;
  END PROCESS delayMatch25_process;


  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_B_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_B_1 <= Constant1_out1_im;
      END IF;
    END IF;
  END PROCESS delayMatch24_process;


  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_A_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_A_1 <= Constant1_out1_re;
      END IF;
    END IF;
  END PROCESS delayMatch26_process;


  Product_Re_AC_signed <= signed(Product_Re_AC);

  Product_Re_BD_signed <= signed(Product_Re_BD);

  mulOutput <= Product_Re_AC_signed - Product_Re_BD_signed;

  Product_Im_AD_signed <= signed(Product_Im_AD);

  Product_Im_BC_signed <= signed(Product_Im_BC);

  mulOutput_1 <= Product_Im_AD_signed + Product_Im_BC_signed;

  Constant_out1 <= to_signed(16#0000000#, 27);

  delayMatch27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch27_reg(0) <= to_signed(16#00000#, 18);
        delayMatch27_reg(1) <= to_signed(16#00000#, 18);
        delayMatch27_reg(2) <= to_signed(16#00000#, 18);
        delayMatch27_reg(3) <= to_signed(16#00000#, 18);
        delayMatch27_reg(4) <= to_signed(16#00000#, 18);
        delayMatch27_reg(5) <= to_signed(16#00000#, 18);
        delayMatch27_reg(6) <= to_signed(16#00000#, 18);
        delayMatch27_reg(7) <= to_signed(16#00000#, 18);
        delayMatch27_reg(8) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch27_reg(0) <= delayMatch27_reg_next(0);
        delayMatch27_reg(1) <= delayMatch27_reg_next(1);
        delayMatch27_reg(2) <= delayMatch27_reg_next(2);
        delayMatch27_reg(3) <= delayMatch27_reg_next(3);
        delayMatch27_reg(4) <= delayMatch27_reg_next(4);
        delayMatch27_reg(5) <= delayMatch27_reg_next(5);
        delayMatch27_reg(6) <= delayMatch27_reg_next(6);
        delayMatch27_reg(7) <= delayMatch27_reg_next(7);
        delayMatch27_reg(8) <= delayMatch27_reg_next(8);
      END IF;
    END IF;
  END PROCESS delayMatch27_process;

  s_7(0) <= delayMatch27_reg(0);
  s_7(1) <= delayMatch27_reg(1);
  s_7(2) <= delayMatch27_reg(2);
  s_7(3) <= delayMatch27_reg(3);
  s_7(4) <= delayMatch27_reg(4);
  s_7(5) <= delayMatch27_reg(5);
  s_7(6) <= delayMatch27_reg(6);
  s_7(7) <= delayMatch27_reg(7);
  s_7(8) <= delayMatch27_reg(8);
  delayMatch27_reg_next(0) <= s_1(0);
  delayMatch27_reg_next(1) <= s_1(1);
  delayMatch27_reg_next(2) <= s_1(2);
  delayMatch27_reg_next(3) <= s_1(3);
  delayMatch27_reg_next(4) <= s_1(4);
  delayMatch27_reg_next(5) <= s_1(5);
  delayMatch27_reg_next(6) <= s_1(6);
  delayMatch27_reg_next(7) <= s_1(7);
  delayMatch27_reg_next(8) <= s_1(8);

  outputgen11: FOR k IN 0 TO 8 GENERATE
    in0_1(k) <= std_logic_vector(s_7(k));
  END GENERATE;

  selector_out_6(0) <= mulOutput;
  selector_out_6(1) <= mulOutput_1;
  selector_out_6(2) <= Constant_out1;
  selector_out_6(3) <= mulOutput;
  selector_out_6(4) <= mulOutput_1;
  selector_out_6(5) <= Constant_out1;
  selector_out_6(6) <= mulOutput;
  selector_out_6(7) <= mulOutput_1;
  selector_out_6(8) <= Constant_out1;

  s_8GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_8(d0) <= selector_out_6(d0);
  END GENERATE;

  outputgen10: FOR k IN 0 TO 8 GENERATE
    in1_1(k) <= std_logic_vector(s_8(k));
  END GENERATE;

  
  enb_counter_ge_6_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#06#, 8) ELSE
      '0';

  
  enb_counter_le_8_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#08#, 8) ELSE
      '0';

  crp_temp_enb_phase_6_2 <= enb_counter_ge_6_1 AND enb_counter_le_8_1;

  outputgen9: FOR k IN 0 TO 8 GENERATE
    MMul_dot_product_out_signed_1(k) <= signed(MMul_dot_product_out_2(k));
  END GENERATE;

  
  MMul_dot_product_out_3(0) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(0)(44) = '0') AND (MMul_dot_product_out_signed_1(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(0)(44) = '1') AND (MMul_dot_product_out_signed_1(0)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(0)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(1) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(1)(44) = '0') AND (MMul_dot_product_out_signed_1(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(1)(44) = '1') AND (MMul_dot_product_out_signed_1(1)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(1)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(2) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(2)(44) = '0') AND (MMul_dot_product_out_signed_1(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(2)(44) = '1') AND (MMul_dot_product_out_signed_1(2)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(2)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(3) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(3)(44) = '0') AND (MMul_dot_product_out_signed_1(3)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(3)(44) = '1') AND (MMul_dot_product_out_signed_1(3)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(3)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(4) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(4)(44) = '0') AND (MMul_dot_product_out_signed_1(4)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(4)(44) = '1') AND (MMul_dot_product_out_signed_1(4)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(4)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(5) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(5)(44) = '0') AND (MMul_dot_product_out_signed_1(5)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(5)(44) = '1') AND (MMul_dot_product_out_signed_1(5)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(5)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(6) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(6)(44) = '0') AND (MMul_dot_product_out_signed_1(6)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(6)(44) = '1') AND (MMul_dot_product_out_signed_1(6)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(6)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(7) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(7)(44) = '0') AND (MMul_dot_product_out_signed_1(7)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(7)(44) = '1') AND (MMul_dot_product_out_signed_1(7)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(7)(42 DOWNTO 16);
  
  MMul_dot_product_out_3(8) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_1(8)(44) = '0') AND (MMul_dot_product_out_signed_1(8)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_1(8)(44) = '1') AND (MMul_dot_product_out_signed_1(8)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_1(8)(42 DOWNTO 16);

  reshape_out_1GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_out_1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out_1(d0, d1) <= MMul_dot_product_out_3(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_03_output : PROCESS (reshape_out_1)
  BEGIN
    selector_out_7(0) <= reshape_out_1(0, 0);
    selector_out_7(1) <= reshape_out_1(0, 1);
    selector_out_7(2) <= reshape_out_1(0, 2);
  END PROCESS select_03_output;


  select_13_output : PROCESS (reshape_out_1)
  BEGIN
    selector_out_8(0) <= reshape_out_1(1, 0);
    selector_out_8(1) <= reshape_out_1(1, 1);
    selector_out_8(2) <= reshape_out_1(1, 2);
  END PROCESS select_13_output;


  MMul_add_013_add_cast <= resize(selector_out_7(0), 28);
  MMul_add_013_add_cast_1 <= resize(selector_out_8(0), 28);
  MMul_add_013_add_temp <= MMul_add_013_add_cast + MMul_add_013_add_cast_1;
  
  MMul_add_01_out_1(0) <= "011111111111111111111111111" WHEN (MMul_add_013_add_temp(27) = '0') AND (MMul_add_013_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_013_add_temp(27) = '1') AND (MMul_add_013_add_temp(26) /= '1') ELSE
      MMul_add_013_add_temp(26 DOWNTO 0);
  MMul_add_013_add_cast_2 <= resize(selector_out_7(1), 28);
  MMul_add_013_add_cast_3 <= resize(selector_out_8(1), 28);
  MMul_add_013_add_temp_1 <= MMul_add_013_add_cast_2 + MMul_add_013_add_cast_3;
  
  MMul_add_01_out_1(1) <= "011111111111111111111111111" WHEN (MMul_add_013_add_temp_1(27) = '0') AND (MMul_add_013_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_013_add_temp_1(27) = '1') AND (MMul_add_013_add_temp_1(26) /= '1') ELSE
      MMul_add_013_add_temp_1(26 DOWNTO 0);
  MMul_add_013_add_cast_4 <= resize(selector_out_7(2), 28);
  MMul_add_013_add_cast_5 <= resize(selector_out_8(2), 28);
  MMul_add_013_add_temp_2 <= MMul_add_013_add_cast_4 + MMul_add_013_add_cast_5;
  
  MMul_add_01_out_1(2) <= "011111111111111111111111111" WHEN (MMul_add_013_add_temp_2(27) = '0') AND (MMul_add_013_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_013_add_temp_2(27) = '1') AND (MMul_add_013_add_temp_2(26) /= '1') ELSE
      MMul_add_013_add_temp_2(26 DOWNTO 0);

  select_23_output : PROCESS (reshape_out_1)
  BEGIN
    selector_out_9(0) <= reshape_out_1(2, 0);
    selector_out_9(1) <= reshape_out_1(2, 1);
    selector_out_9(2) <= reshape_out_1(2, 2);
  END PROCESS select_23_output;


  MMul_add_123_add_cast <= resize(MMul_add_01_out_1(0), 28);
  MMul_add_123_add_cast_1 <= resize(selector_out_9(0), 28);
  MMul_add_123_add_temp <= MMul_add_123_add_cast + MMul_add_123_add_cast_1;
  
  s_9(0) <= "011111111111111111111111111" WHEN (MMul_add_123_add_temp(27) = '0') AND (MMul_add_123_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_123_add_temp(27) = '1') AND (MMul_add_123_add_temp(26) /= '1') ELSE
      MMul_add_123_add_temp(26 DOWNTO 0);
  MMul_add_123_add_cast_2 <= resize(MMul_add_01_out_1(1), 28);
  MMul_add_123_add_cast_3 <= resize(selector_out_9(1), 28);
  MMul_add_123_add_temp_1 <= MMul_add_123_add_cast_2 + MMul_add_123_add_cast_3;
  
  s_9(1) <= "011111111111111111111111111" WHEN (MMul_add_123_add_temp_1(27) = '0') AND (MMul_add_123_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_123_add_temp_1(27) = '1') AND (MMul_add_123_add_temp_1(26) /= '1') ELSE
      MMul_add_123_add_temp_1(26 DOWNTO 0);
  MMul_add_123_add_cast_4 <= resize(MMul_add_01_out_1(2), 28);
  MMul_add_123_add_cast_5 <= resize(selector_out_9(2), 28);
  MMul_add_123_add_temp_2 <= MMul_add_123_add_cast_4 + MMul_add_123_add_cast_5;
  
  s_9(2) <= "011111111111111111111111111" WHEN (MMul_add_123_add_temp_2(27) = '0') AND (MMul_add_123_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_123_add_temp_2(27) = '1') AND (MMul_add_123_add_temp_2(26) /= '1') ELSE
      MMul_add_123_add_temp_2(26 DOWNTO 0);

  Gain4_out1_1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1_1(d0) <= s_9(d0);
  END GENERATE;

  Constant1_out1t_0_4 <= Constant1_out1t_6(4, 0);

  Constant1_out1t_0_3 <= Constant1_out1t_6(3, 0);

  Constant1_out1t_0_2_1 <= Constant1_out1t_6(2, 0);

  c171_kconst(0) <= to_signed(16#10000#, 18);
  c171_kconst(1) <= to_signed(-16#08000#, 18);
  c171_kconst(2) <= to_signed(-16#08000#, 18);
  c171_kconst(3) <= to_signed(16#00000#, 18);
  c171_kconst(4) <= to_signed(16#0DDB4#, 18);
  c171_kconst(5) <= to_signed(-16#0DDB4#, 18);
  c171_kconst(6) <= to_signed(16#10000#, 18);
  c171_kconst(7) <= to_signed(16#10000#, 18);
  c171_kconst(8) <= to_signed(16#10000#, 18);

  kconst_4GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconst_4GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst_4(d0, d1) <= c171_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  s_10GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    s_10GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s_10(d0 + (d1 * 3)) <= kconst_4(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out_10(0) <= s_10(0);
  selector_out_10(1) <= s_10(3);
  selector_out_10(2) <= s_10(6);
  selector_out_10(3) <= s_10(1);
  selector_out_10(4) <= s_10(4);
  selector_out_10(5) <= s_10(7);
  selector_out_10(6) <= s_10(2);
  selector_out_10(7) <= s_10(5);
  selector_out_10(8) <= s_10(8);

  s_11GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_11(d0) <= selector_out_10(d0);
  END GENERATE;

  c155_kconst(0) <= to_signed(16#10000#, 18);
  c155_kconst(1) <= to_signed(16#00000#, 18);
  c155_kconst(2) <= to_signed(16#08000#, 18);
  c155_kconst(3) <= to_signed(-16#08000#, 18);
  c155_kconst(4) <= to_signed(16#0DDB4#, 18);
  c155_kconst(5) <= to_signed(16#08000#, 18);
  c155_kconst(6) <= to_signed(-16#08000#, 18);
  c155_kconst(7) <= to_signed(-16#0DDB4#, 18);
  c155_kconst(8) <= to_signed(16#08000#, 18);

  kconst_5GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconst_5GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst_5(d0, d1) <= c155_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  s_12GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    s_12GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s_12(d0 + (d1 * 3)) <= kconst_5(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out_11(0) <= s_12(0);
  selector_out_11(1) <= s_12(3);
  selector_out_11(2) <= s_12(6);
  selector_out_11(3) <= s_12(1);
  selector_out_11(4) <= s_12(4);
  selector_out_11(5) <= s_12(7);
  selector_out_11(6) <= s_12(2);
  selector_out_11(7) <= s_12(5);
  selector_out_11(8) <= s_12(8);

  s_13GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_13(d0) <= selector_out_11(d0);
  END GENERATE;

  alpha_0_1 <= s_13(0);

  delayMatch16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch16_1_reg(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_1(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_1(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_2(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_2(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_3(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_3(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_4(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_4(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_5(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_5(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_6(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_6(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_7(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_7(1) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_8(0) <= to_signed(16#00000#, 18);
        delayMatch16_1_reg_8(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch16_1_reg(0) <= delayMatch16_1_reg_next(0);
        delayMatch16_1_reg(1) <= delayMatch16_1_reg_next(1);
        delayMatch16_1_reg_1(0) <= delayMatch16_1_reg_next_1(0);
        delayMatch16_1_reg_1(1) <= delayMatch16_1_reg_next_1(1);
        delayMatch16_1_reg_2(0) <= delayMatch16_1_reg_next_2(0);
        delayMatch16_1_reg_2(1) <= delayMatch16_1_reg_next_2(1);
        delayMatch16_1_reg_3(0) <= delayMatch16_1_reg_next_3(0);
        delayMatch16_1_reg_3(1) <= delayMatch16_1_reg_next_3(1);
        delayMatch16_1_reg_4(0) <= delayMatch16_1_reg_next_4(0);
        delayMatch16_1_reg_4(1) <= delayMatch16_1_reg_next_4(1);
        delayMatch16_1_reg_5(0) <= delayMatch16_1_reg_next_5(0);
        delayMatch16_1_reg_5(1) <= delayMatch16_1_reg_next_5(1);
        delayMatch16_1_reg_6(0) <= delayMatch16_1_reg_next_6(0);
        delayMatch16_1_reg_6(1) <= delayMatch16_1_reg_next_6(1);
        delayMatch16_1_reg_7(0) <= delayMatch16_1_reg_next_7(0);
        delayMatch16_1_reg_7(1) <= delayMatch16_1_reg_next_7(1);
        delayMatch16_1_reg_8(0) <= delayMatch16_1_reg_next_8(0);
        delayMatch16_1_reg_8(1) <= delayMatch16_1_reg_next_8(1);
      END IF;
    END IF;
  END PROCESS delayMatch16_1_process;

  delayMatch16_1_reg_next(0) <= alpha_0_1;
  delayMatch16_1_reg_next(1) <= delayMatch16_1_reg(0);
  delayMatch16_out_1 <= delayMatch16_1_reg(1);
  delayMatch16_1_reg_next_1(0) <= alpha_1_1;
  delayMatch16_1_reg_next_1(1) <= delayMatch16_1_reg_1(0);
  delayMatch16_out_2 <= delayMatch16_1_reg_1(1);
  delayMatch16_1_reg_next_2(0) <= alpha_2_1;
  delayMatch16_1_reg_next_2(1) <= delayMatch16_1_reg_2(0);
  delayMatch16_out_3 <= delayMatch16_1_reg_2(1);
  delayMatch16_1_reg_next_3(0) <= alpha_3_1;
  delayMatch16_1_reg_next_3(1) <= delayMatch16_1_reg_3(0);
  delayMatch16_out_4 <= delayMatch16_1_reg_3(1);
  delayMatch16_1_reg_next_4(0) <= alpha_4_1;
  delayMatch16_1_reg_next_4(1) <= delayMatch16_1_reg_4(0);
  delayMatch16_out_5 <= delayMatch16_1_reg_4(1);
  delayMatch16_1_reg_next_5(0) <= alpha_5_1;
  delayMatch16_1_reg_next_5(1) <= delayMatch16_1_reg_5(0);
  delayMatch16_out_6 <= delayMatch16_1_reg_5(1);
  delayMatch16_1_reg_next_6(0) <= alpha_6_1;
  delayMatch16_1_reg_next_6(1) <= delayMatch16_1_reg_6(0);
  delayMatch16_out_7 <= delayMatch16_1_reg_6(1);
  delayMatch16_1_reg_next_7(0) <= alpha_7_1;
  delayMatch16_1_reg_next_7(1) <= delayMatch16_1_reg_7(0);
  delayMatch16_out_8 <= delayMatch16_1_reg_7(1);
  delayMatch16_1_reg_next_8(0) <= alpha_8_1;
  delayMatch16_1_reg_next_8(1) <= delayMatch16_1_reg_8(0);
  delayMatch16_out_9 <= delayMatch16_1_reg_8(1);

  alpha_1_1 <= s_13(1);

  alpha_2_1 <= s_13(2);

  alpha_3_1 <= s_13(3);

  alpha_4_1 <= s_13(4);

  alpha_5_1 <= s_13(5);

  alpha_6_1 <= s_13(6);

  alpha_7_1 <= s_13(7);

  alpha_8_1 <= s_13(8);

  x_abc1_ll_pl(0) <= x_abc1_ll_pl_0;
  x_abc1_ll_pl(1) <= x_abc1_ll_pl_1;
  x_abc1_ll_pl(2) <= x_abc1_ll_pl_2;

  outputgen8: FOR k IN 0 TO 2 GENERATE
    x_abc1_ll_pl_3(k) <= signed(x_abc1_ll_pl(k));
  END GENERATE;

  x_abc1_ll_pl_4 <= x_abc1_ll_pl_3;

  outputgen7: FOR k IN 0 TO 2 GENERATE
    x_abc1_ll_pl_5(k) <= std_logic_vector(x_abc1_ll_pl_4(k));
  END GENERATE;

  kconst_6 <= to_signed(16#0AAAB#, 18);

  outputgen6: FOR k IN 0 TO 2 GENERATE
    Gain2_out1_signed_1(k) <= signed(Gain2_out1_2(k));
  END GENERATE;

  
  Gain2_out1_3(0) <= "011111111111111111111111111" WHEN (Gain2_out1_signed_1(0)(44) = '0') AND (Gain2_out1_signed_1(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_signed_1(0)(44) = '1') AND (Gain2_out1_signed_1(0)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_signed_1(0)(42 DOWNTO 16);
  
  Gain2_out1_3(1) <= "011111111111111111111111111" WHEN (Gain2_out1_signed_1(1)(44) = '0') AND (Gain2_out1_signed_1(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_signed_1(1)(44) = '1') AND (Gain2_out1_signed_1(1)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_signed_1(1)(42 DOWNTO 16);
  
  Gain2_out1_3(2) <= "011111111111111111111111111" WHEN (Gain2_out1_signed_1(2)(44) = '0') AND (Gain2_out1_signed_1(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (Gain2_out1_signed_1(2)(44) = '1') AND (Gain2_out1_signed_1(2)(43 DOWNTO 42) /= "11") ELSE
      Gain2_out1_signed_1(2)(42 DOWNTO 16);

  s_14(0) <= delayMatch16_out_1;
  s_14(1) <= delayMatch16_out_2;
  s_14(2) <= delayMatch16_out_3;
  s_14(3) <= delayMatch16_out_4;
  s_14(4) <= delayMatch16_out_5;
  s_14(5) <= delayMatch16_out_6;
  s_14(6) <= delayMatch16_out_7;
  s_14(7) <= delayMatch16_out_8;
  s_14(8) <= delayMatch16_out_9;

  outputgen5: FOR k IN 0 TO 8 GENERATE
    in0_2(k) <= std_logic_vector(s_14(k));
  END GENERATE;

  selector_out_12(0) <= Gain2_out1_3(0);
  selector_out_12(1) <= Gain2_out1_3(1);
  selector_out_12(2) <= Gain2_out1_3(2);
  selector_out_12(3) <= Gain2_out1_3(0);
  selector_out_12(4) <= Gain2_out1_3(1);
  selector_out_12(5) <= Gain2_out1_3(2);
  selector_out_12(6) <= Gain2_out1_3(0);
  selector_out_12(7) <= Gain2_out1_3(1);
  selector_out_12(8) <= Gain2_out1_3(2);

  s_15GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_15(d0) <= selector_out_12(d0);
  END GENERATE;

  outputgen4: FOR k IN 0 TO 8 GENERATE
    in1_2(k) <= std_logic_vector(s_15(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 8 GENERATE
    MMul_dot_product_out_signed_2(k) <= signed(MMul_dot_product_out_4(k));
  END GENERATE;

  
  MMul_dot_product_out_5(0) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(0)(44) = '0') AND (MMul_dot_product_out_signed_2(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(0)(44) = '1') AND (MMul_dot_product_out_signed_2(0)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(0)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(1) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(1)(44) = '0') AND (MMul_dot_product_out_signed_2(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(1)(44) = '1') AND (MMul_dot_product_out_signed_2(1)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(1)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(2) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(2)(44) = '0') AND (MMul_dot_product_out_signed_2(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(2)(44) = '1') AND (MMul_dot_product_out_signed_2(2)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(2)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(3) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(3)(44) = '0') AND (MMul_dot_product_out_signed_2(3)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(3)(44) = '1') AND (MMul_dot_product_out_signed_2(3)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(3)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(4) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(4)(44) = '0') AND (MMul_dot_product_out_signed_2(4)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(4)(44) = '1') AND (MMul_dot_product_out_signed_2(4)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(4)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(5) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(5)(44) = '0') AND (MMul_dot_product_out_signed_2(5)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(5)(44) = '1') AND (MMul_dot_product_out_signed_2(5)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(5)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(6) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(6)(44) = '0') AND (MMul_dot_product_out_signed_2(6)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(6)(44) = '1') AND (MMul_dot_product_out_signed_2(6)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(6)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(7) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(7)(44) = '0') AND (MMul_dot_product_out_signed_2(7)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(7)(44) = '1') AND (MMul_dot_product_out_signed_2(7)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(7)(42 DOWNTO 16);
  
  MMul_dot_product_out_5(8) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_2(8)(44) = '0') AND (MMul_dot_product_out_signed_2(8)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_2(8)(44) = '1') AND (MMul_dot_product_out_signed_2(8)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_2(8)(42 DOWNTO 16);

  reshape_out_2GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_out_2GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out_2(d0, d1) <= MMul_dot_product_out_5(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_0_output : PROCESS (reshape_out_2)
  BEGIN
    selector_out_13(0) <= reshape_out_2(0, 0);
    selector_out_13(1) <= reshape_out_2(0, 1);
    selector_out_13(2) <= reshape_out_2(0, 2);
  END PROCESS select_0_output;


  select_1_output : PROCESS (reshape_out_2)
  BEGIN
    selector_out_14(0) <= reshape_out_2(1, 0);
    selector_out_14(1) <= reshape_out_2(1, 1);
    selector_out_14(2) <= reshape_out_2(1, 2);
  END PROCESS select_1_output;


  MMul_add_01_add_cast <= resize(selector_out_13(0), 28);
  MMul_add_01_add_cast_1 <= resize(selector_out_14(0), 28);
  MMul_add_01_add_temp <= MMul_add_01_add_cast + MMul_add_01_add_cast_1;
  
  MMul_add_01_out_2(0) <= "011111111111111111111111111" WHEN (MMul_add_01_add_temp(27) = '0') AND (MMul_add_01_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_01_add_temp(27) = '1') AND (MMul_add_01_add_temp(26) /= '1') ELSE
      MMul_add_01_add_temp(26 DOWNTO 0);
  MMul_add_01_add_cast_2 <= resize(selector_out_13(1), 28);
  MMul_add_01_add_cast_3 <= resize(selector_out_14(1), 28);
  MMul_add_01_add_temp_1 <= MMul_add_01_add_cast_2 + MMul_add_01_add_cast_3;
  
  MMul_add_01_out_2(1) <= "011111111111111111111111111" WHEN (MMul_add_01_add_temp_1(27) = '0') AND (MMul_add_01_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_01_add_temp_1(27) = '1') AND (MMul_add_01_add_temp_1(26) /= '1') ELSE
      MMul_add_01_add_temp_1(26 DOWNTO 0);
  MMul_add_01_add_cast_4 <= resize(selector_out_13(2), 28);
  MMul_add_01_add_cast_5 <= resize(selector_out_14(2), 28);
  MMul_add_01_add_temp_2 <= MMul_add_01_add_cast_4 + MMul_add_01_add_cast_5;
  
  MMul_add_01_out_2(2) <= "011111111111111111111111111" WHEN (MMul_add_01_add_temp_2(27) = '0') AND (MMul_add_01_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_01_add_temp_2(27) = '1') AND (MMul_add_01_add_temp_2(26) /= '1') ELSE
      MMul_add_01_add_temp_2(26 DOWNTO 0);

  select_2_output : PROCESS (reshape_out_2)
  BEGIN
    selector_out_15(0) <= reshape_out_2(2, 0);
    selector_out_15(1) <= reshape_out_2(2, 1);
    selector_out_15(2) <= reshape_out_2(2, 2);
  END PROCESS select_2_output;


  MMul_add_12_add_cast <= resize(MMul_add_01_out_2(0), 28);
  MMul_add_12_add_cast_1 <= resize(selector_out_15(0), 28);
  MMul_add_12_add_temp <= MMul_add_12_add_cast + MMul_add_12_add_cast_1;
  
  s_16(0) <= "011111111111111111111111111" WHEN (MMul_add_12_add_temp(27) = '0') AND (MMul_add_12_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_12_add_temp(27) = '1') AND (MMul_add_12_add_temp(26) /= '1') ELSE
      MMul_add_12_add_temp(26 DOWNTO 0);
  MMul_add_12_add_cast_2 <= resize(MMul_add_01_out_2(1), 28);
  MMul_add_12_add_cast_3 <= resize(selector_out_15(1), 28);
  MMul_add_12_add_temp_1 <= MMul_add_12_add_cast_2 + MMul_add_12_add_cast_3;
  
  s_16(1) <= "011111111111111111111111111" WHEN (MMul_add_12_add_temp_1(27) = '0') AND (MMul_add_12_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_12_add_temp_1(27) = '1') AND (MMul_add_12_add_temp_1(26) /= '1') ELSE
      MMul_add_12_add_temp_1(26 DOWNTO 0);
  MMul_add_12_add_cast_4 <= resize(MMul_add_01_out_2(2), 28);
  MMul_add_12_add_cast_5 <= resize(selector_out_15(2), 28);
  MMul_add_12_add_temp_2 <= MMul_add_12_add_cast_4 + MMul_add_12_add_cast_5;
  
  s_16(2) <= "011111111111111111111111111" WHEN (MMul_add_12_add_temp_2(27) = '0') AND (MMul_add_12_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_12_add_temp_2(27) = '1') AND (MMul_add_12_add_temp_2(26) /= '1') ELSE
      MMul_add_12_add_temp_2(26 DOWNTO 0);

  Gain4_out1_2GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1_2(d0) <= s_16(d0);
  END GENERATE;

  Constant1_out1_re_1 <= to_signed(16#08000#, 18);
  Constant1_out1_im_1 <= to_signed(-16#049E7#, 18);

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_A_2 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_A_2 <= Constant1_out1_re_1;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_B_2 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_B_2 <= Constant1_out1_im_1;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_B_3 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_B_3 <= Constant1_out1_im_1;
      END IF;
    END IF;
  END PROCESS delayMatch18_process;


  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Product_C2ReIm_2_C2ReIm_A_3 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_A_3 <= Constant1_out1_re_1;
      END IF;
    END IF;
  END PROCESS delayMatch20_process;


  Product_Re_AC_signed_1 <= signed(Product_Re_AC_1);

  Product_Re_BD_signed_1 <= signed(Product_Re_BD_1);

  mulOutput_2 <= Product_Re_AC_signed_1 - Product_Re_BD_signed_1;

  Product_Im_AD_signed_1 <= signed(Product_Im_AD_1);

  Product_Im_BC_signed_1 <= signed(Product_Im_BC_1);

  mulOutput_3 <= Product_Im_AD_signed_1 + Product_Im_BC_signed_1;

  Constant_out1_1 <= to_signed(16#0000000#, 27);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= to_signed(16#00000#, 18);
        delayMatch21_reg(1) <= to_signed(16#00000#, 18);
        delayMatch21_reg(2) <= to_signed(16#00000#, 18);
        delayMatch21_reg(3) <= to_signed(16#00000#, 18);
        delayMatch21_reg(4) <= to_signed(16#00000#, 18);
        delayMatch21_reg(5) <= to_signed(16#00000#, 18);
        delayMatch21_reg(6) <= to_signed(16#00000#, 18);
        delayMatch21_reg(7) <= to_signed(16#00000#, 18);
        delayMatch21_reg(8) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
        delayMatch21_reg(6) <= delayMatch21_reg_next(6);
        delayMatch21_reg(7) <= delayMatch21_reg_next(7);
        delayMatch21_reg(8) <= delayMatch21_reg_next(8);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  s_17(0) <= delayMatch21_reg(0);
  s_17(1) <= delayMatch21_reg(1);
  s_17(2) <= delayMatch21_reg(2);
  s_17(3) <= delayMatch21_reg(3);
  s_17(4) <= delayMatch21_reg(4);
  s_17(5) <= delayMatch21_reg(5);
  s_17(6) <= delayMatch21_reg(6);
  s_17(7) <= delayMatch21_reg(7);
  s_17(8) <= delayMatch21_reg(8);
  delayMatch21_reg_next(0) <= s_11(0);
  delayMatch21_reg_next(1) <= s_11(1);
  delayMatch21_reg_next(2) <= s_11(2);
  delayMatch21_reg_next(3) <= s_11(3);
  delayMatch21_reg_next(4) <= s_11(4);
  delayMatch21_reg_next(5) <= s_11(5);
  delayMatch21_reg_next(6) <= s_11(6);
  delayMatch21_reg_next(7) <= s_11(7);
  delayMatch21_reg_next(8) <= s_11(8);

  outputgen2: FOR k IN 0 TO 8 GENERATE
    in0_3(k) <= std_logic_vector(s_17(k));
  END GENERATE;

  selector_out_16(0) <= mulOutput_2;
  selector_out_16(1) <= mulOutput_3;
  selector_out_16(2) <= Constant_out1_1;
  selector_out_16(3) <= mulOutput_2;
  selector_out_16(4) <= mulOutput_3;
  selector_out_16(5) <= Constant_out1_1;
  selector_out_16(6) <= mulOutput_2;
  selector_out_16(7) <= mulOutput_3;
  selector_out_16(8) <= Constant_out1_1;

  s_18GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_18(d0) <= selector_out_16(d0);
  END GENERATE;

  outputgen1: FOR k IN 0 TO 8 GENERATE
    in1_3(k) <= std_logic_vector(s_18(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 8 GENERATE
    MMul_dot_product_out_signed_3(k) <= signed(MMul_dot_product_out_6(k));
  END GENERATE;

  
  MMul_dot_product_out_7(0) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(0)(44) = '0') AND (MMul_dot_product_out_signed_3(0)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(0)(44) = '1') AND (MMul_dot_product_out_signed_3(0)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(0)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(1) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(1)(44) = '0') AND (MMul_dot_product_out_signed_3(1)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(1)(44) = '1') AND (MMul_dot_product_out_signed_3(1)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(1)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(2) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(2)(44) = '0') AND (MMul_dot_product_out_signed_3(2)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(2)(44) = '1') AND (MMul_dot_product_out_signed_3(2)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(2)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(3) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(3)(44) = '0') AND (MMul_dot_product_out_signed_3(3)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(3)(44) = '1') AND (MMul_dot_product_out_signed_3(3)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(3)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(4) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(4)(44) = '0') AND (MMul_dot_product_out_signed_3(4)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(4)(44) = '1') AND (MMul_dot_product_out_signed_3(4)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(4)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(5) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(5)(44) = '0') AND (MMul_dot_product_out_signed_3(5)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(5)(44) = '1') AND (MMul_dot_product_out_signed_3(5)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(5)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(6) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(6)(44) = '0') AND (MMul_dot_product_out_signed_3(6)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(6)(44) = '1') AND (MMul_dot_product_out_signed_3(6)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(6)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(7) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(7)(44) = '0') AND (MMul_dot_product_out_signed_3(7)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(7)(44) = '1') AND (MMul_dot_product_out_signed_3(7)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(7)(42 DOWNTO 16);
  
  MMul_dot_product_out_7(8) <= "011111111111111111111111111" WHEN (MMul_dot_product_out_signed_3(8)(44) = '0') AND (MMul_dot_product_out_signed_3(8)(43 DOWNTO 42) /= "00") ELSE
      "100000000000000000000000000" WHEN (MMul_dot_product_out_signed_3(8)(44) = '1') AND (MMul_dot_product_out_signed_3(8)(43 DOWNTO 42) /= "11") ELSE
      MMul_dot_product_out_signed_3(8)(42 DOWNTO 16);

  reshape_out_3GEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_out_3GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out_3(d0, d1) <= MMul_dot_product_out_7(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_01_output : PROCESS (reshape_out_3)
  BEGIN
    selector_out_17(0) <= reshape_out_3(0, 0);
    selector_out_17(1) <= reshape_out_3(0, 1);
    selector_out_17(2) <= reshape_out_3(0, 2);
  END PROCESS select_01_output;


  select_11_output : PROCESS (reshape_out_3)
  BEGIN
    selector_out_18(0) <= reshape_out_3(1, 0);
    selector_out_18(1) <= reshape_out_3(1, 1);
    selector_out_18(2) <= reshape_out_3(1, 2);
  END PROCESS select_11_output;


  MMul_add_011_add_cast <= resize(selector_out_17(0), 28);
  MMul_add_011_add_cast_1 <= resize(selector_out_18(0), 28);
  MMul_add_011_add_temp <= MMul_add_011_add_cast + MMul_add_011_add_cast_1;
  
  MMul_add_01_out_3(0) <= "011111111111111111111111111" WHEN (MMul_add_011_add_temp(27) = '0') AND (MMul_add_011_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_011_add_temp(27) = '1') AND (MMul_add_011_add_temp(26) /= '1') ELSE
      MMul_add_011_add_temp(26 DOWNTO 0);
  MMul_add_011_add_cast_2 <= resize(selector_out_17(1), 28);
  MMul_add_011_add_cast_3 <= resize(selector_out_18(1), 28);
  MMul_add_011_add_temp_1 <= MMul_add_011_add_cast_2 + MMul_add_011_add_cast_3;
  
  MMul_add_01_out_3(1) <= "011111111111111111111111111" WHEN (MMul_add_011_add_temp_1(27) = '0') AND (MMul_add_011_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_011_add_temp_1(27) = '1') AND (MMul_add_011_add_temp_1(26) /= '1') ELSE
      MMul_add_011_add_temp_1(26 DOWNTO 0);
  MMul_add_011_add_cast_4 <= resize(selector_out_17(2), 28);
  MMul_add_011_add_cast_5 <= resize(selector_out_18(2), 28);
  MMul_add_011_add_temp_2 <= MMul_add_011_add_cast_4 + MMul_add_011_add_cast_5;
  
  MMul_add_01_out_3(2) <= "011111111111111111111111111" WHEN (MMul_add_011_add_temp_2(27) = '0') AND (MMul_add_011_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_011_add_temp_2(27) = '1') AND (MMul_add_011_add_temp_2(26) /= '1') ELSE
      MMul_add_011_add_temp_2(26 DOWNTO 0);

  select_21_output : PROCESS (reshape_out_3)
  BEGIN
    selector_out_19(0) <= reshape_out_3(2, 0);
    selector_out_19(1) <= reshape_out_3(2, 1);
    selector_out_19(2) <= reshape_out_3(2, 2);
  END PROCESS select_21_output;


  MMul_add_121_add_cast <= resize(MMul_add_01_out_3(0), 28);
  MMul_add_121_add_cast_1 <= resize(selector_out_19(0), 28);
  MMul_add_121_add_temp <= MMul_add_121_add_cast + MMul_add_121_add_cast_1;
  
  s_19(0) <= "011111111111111111111111111" WHEN (MMul_add_121_add_temp(27) = '0') AND (MMul_add_121_add_temp(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_121_add_temp(27) = '1') AND (MMul_add_121_add_temp(26) /= '1') ELSE
      MMul_add_121_add_temp(26 DOWNTO 0);
  MMul_add_121_add_cast_2 <= resize(MMul_add_01_out_3(1), 28);
  MMul_add_121_add_cast_3 <= resize(selector_out_19(1), 28);
  MMul_add_121_add_temp_1 <= MMul_add_121_add_cast_2 + MMul_add_121_add_cast_3;
  
  s_19(1) <= "011111111111111111111111111" WHEN (MMul_add_121_add_temp_1(27) = '0') AND (MMul_add_121_add_temp_1(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_121_add_temp_1(27) = '1') AND (MMul_add_121_add_temp_1(26) /= '1') ELSE
      MMul_add_121_add_temp_1(26 DOWNTO 0);
  MMul_add_121_add_cast_4 <= resize(MMul_add_01_out_3(2), 28);
  MMul_add_121_add_cast_5 <= resize(selector_out_19(2), 28);
  MMul_add_121_add_temp_2 <= MMul_add_121_add_cast_4 + MMul_add_121_add_cast_5;
  
  s_19(2) <= "011111111111111111111111111" WHEN (MMul_add_121_add_temp_2(27) = '0') AND (MMul_add_121_add_temp_2(26) /= '0') ELSE
      "100000000000000000000000000" WHEN (MMul_add_121_add_temp_2(27) = '1') AND (MMul_add_121_add_temp_2(26) /= '1') ELSE
      MMul_add_121_add_temp_2(26 DOWNTO 0);

  Gain4_out1_3GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1_3(d0) <= s_19(d0);
  END GENERATE;

  Constant1_out1t_0_1_1 <= Constant1_out1t_6(1, 0);

  Constant1_out1t_0_0 <= Constant1_out1t_6(0, 0);

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_0_6 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_0_6 <= Constant1_out1t_0_0;
      END IF;
    END IF;
  END PROCESS delayMatch28_process;


  MatrixMultiply_0_0_1 <= to_signed(16#0000000#, 27);

  
  enb_counter_ge_8_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#08#, 8) ELSE
      '0';

  
  enb_counter_le_11_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#0B#, 8) ELSE
      '0';

  crp_temp_enb_phase_8_3 <= enb_counter_ge_8_1 AND enb_counter_le_11_1;

  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_0_7 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_0_7 <= Constant1_out1t_0_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  MatrixMultiply_0_0_signed <= signed(MatrixMultiply_0_0_2);

  MatrixMultiply_0_0_3 <= MatrixMultiply_0_0_signed(43 DOWNTO 17);

  
  enb_counter_ge_11_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#0B#, 8) ELSE
      '0';

  
  enb_counter_le_14_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#0E#, 8) ELSE
      '0';

  crp_temp_enb_phase_11_3 <= enb_counter_ge_11_1 AND enb_counter_le_14_1;

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_0_8 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_0_8 <= Constant1_out1t_0_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch30_process;


  MatrixMultiply_0_0_signed_1 <= signed(MatrixMultiply_0_0_4);

  MatrixMultiply_0_0_5 <= MatrixMultiply_0_0_signed_1(43 DOWNTO 17);

  
  enb_counter_ge_14_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#0E#, 8) ELSE
      '0';

  
  enb_counter_le_17_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#11#, 8) ELSE
      '0';

  crp_temp_enb_phase_14_3 <= enb_counter_ge_14_1 AND enb_counter_le_17_1;

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_0_9 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_0_9 <= Constant1_out1t_0_3;
      END IF;
    END IF;
  END PROCESS delayMatch31_process;


  MatrixMultiply_0_0_signed_2 <= signed(MatrixMultiply_0_0_6);

  MatrixMultiply_0_0_7 <= MatrixMultiply_0_0_signed_2(43 DOWNTO 17);

  
  enb_counter_ge_17_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#11#, 8) ELSE
      '0';

  
  enb_counter_le_20_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#14#, 8) ELSE
      '0';

  crp_temp_enb_phase_17_3 <= enb_counter_ge_17_1 AND enb_counter_le_20_1;

  delayMatch32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_0_10 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_0_10 <= Constant1_out1t_0_4;
      END IF;
    END IF;
  END PROCESS delayMatch32_process;


  MatrixMultiply_0_0_signed_3 <= signed(MatrixMultiply_0_0_8);

  MatrixMultiply_0_0_9 <= MatrixMultiply_0_0_signed_3(43 DOWNTO 17);

  
  enb_counter_ge_20_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#14#, 8) ELSE
      '0';

  
  enb_counter_le_23_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#17#, 8) ELSE
      '0';

  crp_temp_enb_phase_20_3 <= enb_counter_ge_20_1 AND enb_counter_le_23_1;

  delayMatch58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_0_11 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_0_11 <= Constant1_out1t_0_5;
      END IF;
    END IF;
  END PROCESS delayMatch58_process;


  MatrixMultiply_0_0_signed_4 <= signed(MatrixMultiply_0_0_10);

  MatrixMultiply_0_0_11 <= MatrixMultiply_0_0_signed_4(43 DOWNTO 17);

  
  enb_counter_ge_23_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#17#, 8) ELSE
      '0';

  
  enb_counter_le_26_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#1A#, 8) ELSE
      '0';

  crp_temp_enb_phase_23_3 <= enb_counter_ge_23_1 AND enb_counter_le_26_1;

  MatrixMultiply_0_0_signed_5 <= signed(MatrixMultiply_0_0_12);

  MatrixMultiply_0_0_13 <= MatrixMultiply_0_0_signed_5(43 DOWNTO 17);

  
  enb_counter_ge_26_1 <= '1' WHEN ctr_99_sig >= to_unsigned(16#1A#, 8) ELSE
      '0';

  
  enb_counter_le_28_1 <= '1' WHEN ctr_99_sig <= to_unsigned(16#1C#, 8) ELSE
      '0';

  crp_temp_enb_phase_26_2 <= enb_counter_ge_26_1 AND enb_counter_le_28_1;

  Constant1_out1t_1_5 <= Constant1_out1t_6(5, 1);

  Constant1_out1t_1_4 <= Constant1_out1t_6(4, 1);

  Constant1_out1t_1_3 <= Constant1_out1t_6(3, 1);

  Constant1_out1t_1_2_1 <= Constant1_out1t_6(2, 1);

  Constant1_out1t_1_1_1 <= Constant1_out1t_6(1, 1);

  Constant1_out1t_1_0 <= Constant1_out1t_6(0, 1);

  delayMatch33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_1_6 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_1_6 <= Constant1_out1t_1_0;
      END IF;
    END IF;
  END PROCESS delayMatch33_process;


  MatrixMultiply_1_0_1 <= to_signed(16#0000000#, 27);

  delayMatch34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_1_7 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_1_7 <= Constant1_out1t_1_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch34_process;


  MatrixMultiply_1_0_signed <= signed(MatrixMultiply_1_0_2);

  MatrixMultiply_1_0_3 <= MatrixMultiply_1_0_signed(43 DOWNTO 17);

  delayMatch35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_1_8 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_1_8 <= Constant1_out1t_1_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch35_process;


  MatrixMultiply_1_0_signed_1 <= signed(MatrixMultiply_1_0_4);

  MatrixMultiply_1_0_5 <= MatrixMultiply_1_0_signed_1(43 DOWNTO 17);

  delayMatch36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_1_9 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_1_9 <= Constant1_out1t_1_3;
      END IF;
    END IF;
  END PROCESS delayMatch36_process;


  MatrixMultiply_1_0_signed_2 <= signed(MatrixMultiply_1_0_6);

  MatrixMultiply_1_0_7 <= MatrixMultiply_1_0_signed_2(43 DOWNTO 17);

  delayMatch37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_1_10 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_1_10 <= Constant1_out1t_1_4;
      END IF;
    END IF;
  END PROCESS delayMatch37_process;


  MatrixMultiply_1_0_signed_3 <= signed(MatrixMultiply_1_0_8);

  MatrixMultiply_1_0_9 <= MatrixMultiply_1_0_signed_3(43 DOWNTO 17);

  delayMatch59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_1_11 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_1_11 <= Constant1_out1t_1_5;
      END IF;
    END IF;
  END PROCESS delayMatch59_process;


  MatrixMultiply_1_0_signed_4 <= signed(MatrixMultiply_1_0_10);

  MatrixMultiply_1_0_11 <= MatrixMultiply_1_0_signed_4(43 DOWNTO 17);

  MatrixMultiply_1_0_signed_5 <= signed(MatrixMultiply_1_0_12);

  MatrixMultiply_1_0_13 <= MatrixMultiply_1_0_signed_5(43 DOWNTO 17);

  u_beta <= MatrixMultiply_1_0_13;

  u_alpha <= MatrixMultiply_0_0_13;

  Constant1_out1t_2_5 <= Constant1_out1t_6(5, 2);

  Constant1_out1t_2_4 <= Constant1_out1t_6(4, 2);

  Constant1_out1t_2_3 <= Constant1_out1t_6(3, 2);

  Constant1_out1t_2_2_1 <= Constant1_out1t_6(2, 2);

  Constant1_out1t_2_1_1 <= Constant1_out1t_6(1, 2);

  Constant1_out1t_2_0 <= Constant1_out1t_6(0, 2);

  delayMatch38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_2_6 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_2_6 <= Constant1_out1t_2_0;
      END IF;
    END IF;
  END PROCESS delayMatch38_process;


  MatrixMultiply_2_0_1 <= to_signed(16#0000000#, 27);

  delayMatch39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_2_7 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_2_7 <= Constant1_out1t_2_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch39_process;


  MatrixMultiply_2_0_signed <= signed(MatrixMultiply_2_0_2);

  MatrixMultiply_2_0_3 <= MatrixMultiply_2_0_signed(43 DOWNTO 17);

  delayMatch40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_2_8 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_2_8 <= Constant1_out1t_2_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch40_process;


  MatrixMultiply_2_0_signed_1 <= signed(MatrixMultiply_2_0_4);

  MatrixMultiply_2_0_5 <= MatrixMultiply_2_0_signed_1(43 DOWNTO 17);

  delayMatch41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_2_9 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_2_9 <= Constant1_out1t_2_3;
      END IF;
    END IF;
  END PROCESS delayMatch41_process;


  MatrixMultiply_2_0_signed_2 <= signed(MatrixMultiply_2_0_6);

  MatrixMultiply_2_0_7 <= MatrixMultiply_2_0_signed_2(43 DOWNTO 17);

  delayMatch42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_2_10 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_2_10 <= Constant1_out1t_2_4;
      END IF;
    END IF;
  END PROCESS delayMatch42_process;


  MatrixMultiply_2_0_signed_3 <= signed(MatrixMultiply_2_0_8);

  MatrixMultiply_2_0_9 <= MatrixMultiply_2_0_signed_3(43 DOWNTO 17);

  delayMatch60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_2_11 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_2_11 <= Constant1_out1t_2_5;
      END IF;
    END IF;
  END PROCESS delayMatch60_process;


  MatrixMultiply_2_0_signed_4 <= signed(MatrixMultiply_2_0_10);

  MatrixMultiply_2_0_11 <= MatrixMultiply_2_0_signed_4(43 DOWNTO 17);

  Constant1_out1t_3_5 <= Constant1_out1t_6(5, 3);

  Constant1_out1t_3_4 <= Constant1_out1t_6(4, 3);

  Constant1_out1t_3_3 <= Constant1_out1t_6(3, 3);

  Constant1_out1t_3_2_1 <= Constant1_out1t_6(2, 3);

  Constant1_out1t_3_1_1 <= Constant1_out1t_6(1, 3);

  Constant1_out1t_3_0 <= Constant1_out1t_6(0, 3);

  delayMatch43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_3_6 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_3_6 <= Constant1_out1t_3_0;
      END IF;
    END IF;
  END PROCESS delayMatch43_process;


  MatrixMultiply_3_0_1 <= to_signed(16#0000000#, 27);

  delayMatch44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_3_7 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_3_7 <= Constant1_out1t_3_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch44_process;


  MatrixMultiply_3_0_signed <= signed(MatrixMultiply_3_0_2);

  MatrixMultiply_3_0_3 <= MatrixMultiply_3_0_signed(43 DOWNTO 17);

  delayMatch45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_3_8 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_3_8 <= Constant1_out1t_3_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch45_process;


  MatrixMultiply_3_0_signed_1 <= signed(MatrixMultiply_3_0_4);

  MatrixMultiply_3_0_5 <= MatrixMultiply_3_0_signed_1(43 DOWNTO 17);

  delayMatch46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_3_9 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_3_9 <= Constant1_out1t_3_3;
      END IF;
    END IF;
  END PROCESS delayMatch46_process;


  MatrixMultiply_3_0_signed_2 <= signed(MatrixMultiply_3_0_6);

  MatrixMultiply_3_0_7 <= MatrixMultiply_3_0_signed_2(43 DOWNTO 17);

  delayMatch47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_3_10 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_3_10 <= Constant1_out1t_3_4;
      END IF;
    END IF;
  END PROCESS delayMatch47_process;


  MatrixMultiply_3_0_signed_3 <= signed(MatrixMultiply_3_0_8);

  MatrixMultiply_3_0_9 <= MatrixMultiply_3_0_signed_3(43 DOWNTO 17);

  delayMatch61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_3_11 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_3_11 <= Constant1_out1t_3_5;
      END IF;
    END IF;
  END PROCESS delayMatch61_process;


  MatrixMultiply_3_0_signed_4 <= signed(MatrixMultiply_3_0_10);

  MatrixMultiply_3_0_11 <= MatrixMultiply_3_0_signed_4(43 DOWNTO 17);

  Constant1_out1t_4_5 <= Constant1_out1t_6(5, 4);

  Constant1_out1t_4_4 <= Constant1_out1t_6(4, 4);

  Constant1_out1t_4_3 <= Constant1_out1t_6(3, 4);

  Constant1_out1t_4_2_1 <= Constant1_out1t_6(2, 4);

  Constant1_out1t_4_1_1 <= Constant1_out1t_6(1, 4);

  Constant1_out1t_4_0 <= Constant1_out1t_6(0, 4);

  delayMatch48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_4_6 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_4_6 <= Constant1_out1t_4_0;
      END IF;
    END IF;
  END PROCESS delayMatch48_process;


  MatrixMultiply_4_0_1 <= to_signed(16#0000000#, 27);

  delayMatch49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_4_7 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_4_7 <= Constant1_out1t_4_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch49_process;


  MatrixMultiply_4_0_signed <= signed(MatrixMultiply_4_0_2);

  MatrixMultiply_4_0_3 <= MatrixMultiply_4_0_signed(43 DOWNTO 17);

  delayMatch50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_4_8 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_4_8 <= Constant1_out1t_4_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch50_process;


  MatrixMultiply_4_0_signed_1 <= signed(MatrixMultiply_4_0_4);

  MatrixMultiply_4_0_5 <= MatrixMultiply_4_0_signed_1(43 DOWNTO 17);

  delayMatch51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_4_9 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_4_9 <= Constant1_out1t_4_3;
      END IF;
    END IF;
  END PROCESS delayMatch51_process;


  MatrixMultiply_4_0_signed_2 <= signed(MatrixMultiply_4_0_6);

  MatrixMultiply_4_0_7 <= MatrixMultiply_4_0_signed_2(43 DOWNTO 17);

  delayMatch52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_4_10 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_4_10 <= Constant1_out1t_4_4;
      END IF;
    END IF;
  END PROCESS delayMatch52_process;


  MatrixMultiply_4_0_signed_3 <= signed(MatrixMultiply_4_0_8);

  MatrixMultiply_4_0_9 <= MatrixMultiply_4_0_signed_3(43 DOWNTO 17);

  delayMatch62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_4_11 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_4_11 <= Constant1_out1t_4_5;
      END IF;
    END IF;
  END PROCESS delayMatch62_process;


  MatrixMultiply_4_0_signed_4 <= signed(MatrixMultiply_4_0_10);

  MatrixMultiply_4_0_11 <= MatrixMultiply_4_0_signed_4(43 DOWNTO 17);

  Constant1_out1t_5_5 <= Constant1_out1t_6(5, 5);

  Constant1_out1t_5_4 <= Constant1_out1t_6(4, 5);

  Constant1_out1t_5_3 <= Constant1_out1t_6(3, 5);

  Constant1_out1t_5_2_1 <= Constant1_out1t_6(2, 5);

  Constant1_out1t_5_1_1 <= Constant1_out1t_6(1, 5);

  Constant1_out1t_5_0 <= Constant1_out1t_6(0, 5);

  delayMatch53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_5_6 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_5_6 <= Constant1_out1t_5_0;
      END IF;
    END IF;
  END PROCESS delayMatch53_process;


  MatrixMultiply_5_0_1 <= to_signed(16#0000000#, 27);

  delayMatch54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_5_7 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_5_7 <= Constant1_out1t_5_1_1;
      END IF;
    END IF;
  END PROCESS delayMatch54_process;


  MatrixMultiply_5_0_signed <= signed(MatrixMultiply_5_0_2);

  MatrixMultiply_5_0_3 <= MatrixMultiply_5_0_signed(43 DOWNTO 17);

  delayMatch55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_5_8 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_5_8 <= Constant1_out1t_5_2_1;
      END IF;
    END IF;
  END PROCESS delayMatch55_process;


  MatrixMultiply_5_0_signed_1 <= signed(MatrixMultiply_5_0_4);

  MatrixMultiply_5_0_5 <= MatrixMultiply_5_0_signed_1(43 DOWNTO 17);

  delayMatch56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_5_9 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_5_9 <= Constant1_out1t_5_3;
      END IF;
    END IF;
  END PROCESS delayMatch56_process;


  MatrixMultiply_5_0_signed_2 <= signed(MatrixMultiply_5_0_6);

  MatrixMultiply_5_0_7 <= MatrixMultiply_5_0_signed_2(43 DOWNTO 17);

  delayMatch57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_5_10 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_5_10 <= Constant1_out1t_5_4;
      END IF;
    END IF;
  END PROCESS delayMatch57_process;


  MatrixMultiply_5_0_signed_3 <= signed(MatrixMultiply_5_0_8);

  MatrixMultiply_5_0_9 <= MatrixMultiply_5_0_signed_3(43 DOWNTO 17);

  delayMatch63_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Constant1_out1t_5_11 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Constant1_out1t_5_11 <= Constant1_out1t_5_5;
      END IF;
    END IF;
  END PROCESS delayMatch63_process;


  MatrixMultiply_5_0_signed_4 <= signed(MatrixMultiply_5_0_10);

  MatrixMultiply_5_0_11 <= MatrixMultiply_5_0_signed_4(43 DOWNTO 17);

  Divide_out1_signed_1 <= signed(Divide_out1_1);

  Divide1_out1_signed_1 <= signed(Divide1_out1_1);

  Add_out1_1 <= Divide_out1_signed_1 + Divide1_out1_signed_1;

  Divide3_out1_signed_1 <= signed(Divide3_out1_1);

  Divide2_out1_signed_1 <= signed(Divide2_out1_1);

  Add1_out1_1 <= Divide3_out1_signed_1 - Divide2_out1_signed_1;

  MatrixMultiply_2_0_signed_5 <= signed(MatrixMultiply_2_0_12);

  MatrixMultiply_2_0_13 <= MatrixMultiply_2_0_signed_5(43 DOWNTO 17);

  MatrixMultiply_3_0_signed_5 <= signed(MatrixMultiply_3_0_12);

  MatrixMultiply_3_0_13 <= MatrixMultiply_3_0_signed_5(43 DOWNTO 17);

  MatrixMultiply_4_0_signed_5 <= signed(MatrixMultiply_4_0_12);

  MatrixMultiply_4_0_13 <= MatrixMultiply_4_0_signed_5(43 DOWNTO 17);

  MatrixMultiply_5_0_signed_5 <= signed(MatrixMultiply_5_0_12);

  MatrixMultiply_5_0_13 <= MatrixMultiply_5_0_signed_5(43 DOWNTO 17);

  trafo_out(0) <= Add_out1_1;
  trafo_out(1) <= Add1_out1_1;
  trafo_out(2) <= MatrixMultiply_2_0_13;
  trafo_out(3) <= MatrixMultiply_3_0_13;
  trafo_out(4) <= MatrixMultiply_4_0_13;
  trafo_out(5) <= MatrixMultiply_5_0_13;

  Transformation_out1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Transformation_out1_1(0) <= to_signed(16#0000000#, 27);
        Transformation_out1_1(1) <= to_signed(16#0000000#, 27);
        Transformation_out1_1(2) <= to_signed(16#0000000#, 27);
        Transformation_out1_1(3) <= to_signed(16#0000000#, 27);
        Transformation_out1_1(4) <= to_signed(16#0000000#, 27);
        Transformation_out1_1(5) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Transformation_out1_1(0) <= trafo_out(0);
        Transformation_out1_1(1) <= trafo_out(1);
        Transformation_out1_1(2) <= trafo_out(2);
        Transformation_out1_1(3) <= trafo_out(3);
        Transformation_out1_1(4) <= trafo_out(4);
        Transformation_out1_1(5) <= trafo_out(5);
      END IF;
    END IF;
  END PROCESS Transformation_out1_process;


  t36_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t36_bypass_reg(0) <= to_signed(16#0000000#, 27);
        t36_bypass_reg(1) <= to_signed(16#0000000#, 27);
        t36_bypass_reg(2) <= to_signed(16#0000000#, 27);
        t36_bypass_reg(3) <= to_signed(16#0000000#, 27);
        t36_bypass_reg(4) <= to_signed(16#0000000#, 27);
        t36_bypass_reg(5) <= to_signed(16#0000000#, 27);
      ELSIF enb_1_100_1 = '1' THEN
        t36_bypass_reg(0) <= t36_bypass_reg_next(0);
        t36_bypass_reg(1) <= t36_bypass_reg_next(1);
        t36_bypass_reg(2) <= t36_bypass_reg_next(2);
        t36_bypass_reg(3) <= t36_bypass_reg_next(3);
        t36_bypass_reg(4) <= t36_bypass_reg_next(4);
        t36_bypass_reg(5) <= t36_bypass_reg_next(5);
      END IF;
    END IF;
  END PROCESS t36_bypass_process;

  
  Transformation_out1_2(0) <= Transformation_out1_1(0) WHEN enb_1_100_1 = '1' ELSE
      t36_bypass_reg(0);
  
  Transformation_out1_2(1) <= Transformation_out1_1(1) WHEN enb_1_100_1 = '1' ELSE
      t36_bypass_reg(1);
  
  Transformation_out1_2(2) <= Transformation_out1_1(2) WHEN enb_1_100_1 = '1' ELSE
      t36_bypass_reg(2);
  
  Transformation_out1_2(3) <= Transformation_out1_1(3) WHEN enb_1_100_1 = '1' ELSE
      t36_bypass_reg(3);
  
  Transformation_out1_2(4) <= Transformation_out1_1(4) WHEN enb_1_100_1 = '1' ELSE
      t36_bypass_reg(4);
  
  Transformation_out1_2(5) <= Transformation_out1_1(5) WHEN enb_1_100_1 = '1' ELSE
      t36_bypass_reg(5);
  t36_bypass_reg_next(0) <= Transformation_out1_1(0);
  t36_bypass_reg_next(1) <= Transformation_out1_1(1);
  t36_bypass_reg_next(2) <= Transformation_out1_1(2);
  t36_bypass_reg_next(3) <= Transformation_out1_1(3);
  t36_bypass_reg_next(4) <= Transformation_out1_1(4);
  t36_bypass_reg_next(5) <= Transformation_out1_1(5);

  x_out_dq_0 <= std_logic_vector(Transformation_out1_2(0));

  x_out_dq_1 <= std_logic_vector(Transformation_out1_2(1));

  x_out_dq_2 <= std_logic_vector(Transformation_out1_2(2));

  x_out_dq_3 <= std_logic_vector(Transformation_out1_2(3));

  x_out_dq_4 <= std_logic_vector(Transformation_out1_2(4));

  x_out_dq_5 <= std_logic_vector(Transformation_out1_2(5));

  delayMatch65_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1_2 <= '0';
      ELSIF enb_1_100_0 = '1' THEN
        Unit_Delay_out1_2 <= Unit_Delay_out1;
      END IF;
    END IF;
  END PROCESS delayMatch65_process;


  refresh_values <= Unit_Delay_out1_2;

  ce_out <= enb_1_100_1;

END rtl;

