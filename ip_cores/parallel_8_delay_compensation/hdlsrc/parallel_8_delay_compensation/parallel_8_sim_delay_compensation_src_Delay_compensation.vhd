-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_delay_compensation\hdlsrc\parallel_8_delay_compensation\parallel_8_sim_delay_compensation_src_Delay_compensation.vhd
-- Created: 2022-12-23 12:49:26
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- id_k_1                        ce_out        1e-08
-- iq_k_1                        ce_out        1e-08
-- ix_k_1                        ce_out        1e-08
-- iy_k_1                        ce_out        1e-08
-- done_delay_compensation       ce_out        1e-08
-- id_k_1_AXI                    ce_out        1e-08
-- iq_k_1_AXI                    ce_out        1e-08
-- ix_k_1_AXI                    ce_out        1e-08
-- iy_k_1_AXI                    ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_sim_delay_compensation_src_Delay_compensation
-- Source Path: parallel_8_delay_compensation/Delay_compensation
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_sim_delay_compensation_src_Delay_compensation_pkg.ALL;

ENTITY parallel_8_sim_delay_compensation_src_Delay_compensation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dq_measured_currents_0            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        dq_measured_currents_1            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        dq_measured_currents_2            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        dq_measured_currents_3            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        dq_measured_currents_4            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        dq_measured_currents_5            :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
        psiPM_AXI                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Lq_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Rs_AXI                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ld_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly_AXI             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        last_applied_optimal_voltages_in_0 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_1 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_2 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        last_applied_optimal_voltages_in_3 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        pole_pairs_AXI                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_m_measured_AXI              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        current_valid_in                  :   IN    std_logic;
        done_switching_states             :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        id_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        done_delay_compensation           :   OUT   std_logic;
        id_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        ix_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iy_k_1_AXI                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
        );
END parallel_8_sim_delay_compensation_src_Delay_compensation;


ARCHITECTURE rtl OF parallel_8_sim_delay_compensation_src_Delay_compensation IS

  -- Component Declarations
  COMPONENT parallel_8_sim_delay_compensation_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En18
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_delay_compensation_src_Detect_Rise_Positive1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_delay_compensation_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_delay_compensation_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          SampleTime_div_Ld               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lq               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Lx               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          SampleTime_div_Ly               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          last_applied_optimal_voltage_d  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          last_applied_optimal_voltage_q  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          last_applied_optimal_voltage_x  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          last_applied_optimal_voltage_y  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iq_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ix_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          iy_measured                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          psiPM                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Lq                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Ld                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Rs                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          omega_el                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          id_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          iq_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          ix_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          iy_k_1                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_sim_delay_compensation_src_Detect_Rise_Positive
    USE ENTITY work.parallel_8_sim_delay_compensation_src_Detect_Rise_Positive(rtl);

  FOR ALL : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single
    USE ENTITY work.parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single(rtl);

  FOR ALL : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single
    USE ENTITY work.parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single(rtl);

  FOR ALL : parallel_8_sim_delay_compensation_src_Detect_Rise_Positive1
    USE ENTITY work.parallel_8_sim_delay_compensation_src_Detect_Rise_Positive1(rtl);

  FOR ALL : parallel_8_sim_delay_compensation_src_nfp_mul_single
    USE ENTITY work.parallel_8_sim_delay_compensation_src_nfp_mul_single(rtl);

  FOR ALL : parallel_8_sim_delay_compensation_src_MATLAB_Function
    USE ENTITY work.parallel_8_sim_delay_compensation_src_MATLAB_Function(rtl);

  FOR ALL : parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11
    USE ENTITY work.parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay11_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL End_Cycle                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay21_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay21_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay21_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on2_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Delay30_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay30_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay30_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on11_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay27_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Delay31_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay31_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay31_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on12_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay28_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Delay32_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay32_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay32_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on13_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay29_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL last_applied_optimal_voltages_in_0_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltages_in_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltages_in_2_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltages_in_3_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay20_out_1                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay20_1_reg                    : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay20_out_2                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay20_out_3                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay20_out_4                    : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay20_1_reg_1                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay20_1_reg_2                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay20_1_reg_3                  : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL Delay20_1_reg_next               : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay20_1_reg_next_1             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay20_1_reg_next_2             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL Delay20_1_reg_next_3             : vector_of_signed24(0 TO 1);  -- sfix24_En11 [2]
  SIGNAL last_applied_optimal_voltage_vector : vector_of_signed24(0 TO 3);  -- sfix24_En11 [4]
  SIGNAL last_applied_optimal_voltage_vector_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on1_out1                  : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay1_out1                      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltage_vector_2 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_3 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_4 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL last_applied_optimal_voltage_vector_5 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on15_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay37_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltage_vector_6 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_7 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_8 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL ast_applied_optimal_voltage_vector : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on16_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay38_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltage_vector_9 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_10 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_11 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL last_applied_optimal_voltage_vector_12 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Switch_on17_out1                 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL Delay39_out1                     : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL last_applied_optimal_voltage_vector_13 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_14 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_15 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL dq_measured_currents_0_1         : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay19_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay19_reg_next                 : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL Delay19_out1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Switch_on3_out1                  : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay3_out1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL id_measured                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL id_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_16 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL dq_measured_currents_1_1         : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay18_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay18_reg_next                 : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL last_applied_optimal_voltage_vector_17 : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Switch_on4_out1                  : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL iq_measured                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iq_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_18 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL dq_measured_currents_2_1         : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay17_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay17_reg_next                 : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL Delay17_out1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Switch_on5_out1                  : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL ix_measured                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ix_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_19 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL dq_measured_currents_3_1         : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay16_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay16_reg_next                 : vector_of_signed27(0 TO 1);  -- sfix27_En18 [2]
  SIGNAL Delay16_out1                     : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Switch_on6_out1                  : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL Delay6_out1                      : signed(26 DOWNTO 0);  -- sfix27_En18
  SIGNAL iy_measured                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iy_measured_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_20 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL Delay15_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay15_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay15_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on7_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL Delay14_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay14_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay14_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on8_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay8_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL Delay13_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay13_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on9_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay9_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL Delay12_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay12_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay12_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on10_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay10_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay35_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay35_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay35_out1                     : std_logic;
  SIGNAL End_Cycle_1                      : std_logic;
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL Delay34_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay34_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay34_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_21 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay33_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL Delay36_reg                      : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay36_reg_next                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay36_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_on18_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay40_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL last_applied_optimal_voltage_vector_22 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL id_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iq_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ix_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL iy_k_1_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL fc                               : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL fc_1                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL reduced_reg_next                 : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL last_applied_optimal_voltage_vector_23 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_1                    : vector_of_signed18(0 TO 5);  -- sfix18 [6]
  SIGNAL reduced_reg_next_1               : vector_of_signed18(0 TO 5);  -- sfix18_En11 [6]
  SIGNAL last_applied_optimal_voltage_vector_24 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL fc_2                             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL fc_3                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_2                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL reduced_reg_next_2               : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL last_applied_optimal_voltage_vector_25 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL fc_4                             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL fc_5                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_3                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL reduced_reg_next_3               : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL last_applied_optimal_voltage_vector_26 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_4                    : vector_of_signed18(0 TO 11);  -- sfix18 [12]
  SIGNAL reduced_reg_next_4               : vector_of_signed18(0 TO 11);  -- sfix18_En11 [12]
  SIGNAL last_applied_optimal_voltage_vector_27 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL fc_6                             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL fc_7                             : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_5                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL reduced_reg_next_5               : vector_of_signed18(0 TO 1);  -- sfix18_En11 [2]
  SIGNAL last_applied_optimal_voltage_vector_28 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_6                    : vector_of_signed18(0 TO 11);  -- sfix18 [12]
  SIGNAL reduced_reg_next_6               : vector_of_signed18(0 TO 11);  -- sfix18_En11 [12]
  SIGNAL last_applied_optimal_voltage_vector_29 : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay22_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay22_reg_next                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay22_out1                     : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 35);  -- ufix1 [36]
  SIGNAL delayMatch3_reg_next             : std_logic_vector(0 TO 35);  -- ufix1 [36]
  SIGNAL Delay22_out1_1                   : std_logic;

BEGIN
  u_Detect_Rise_Positive : parallel_8_sim_delay_compensation_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay11_out1,
              Y => End_Cycle
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_24_En11_to_single : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on1_out1),  -- sfix24_En11
              nfp_out => last_applied_optimal_voltage_vector_2  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_24_En11_to_single_1 : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on15_out1),  -- sfix24_En11
              nfp_out => last_applied_optimal_voltage_vector_6  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_24_En11_to_single_2 : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on16_out1),  -- sfix24_En11
              nfp_out => last_applied_optimal_voltage_vector_9  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_24_En11_to_single_3 : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_24_En11_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on17_out1),  -- sfix24_En11
              nfp_out => last_applied_optimal_voltage_vector_13  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_27_En18_to_single : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on3_out1),  -- sfix27_En18
              nfp_out => id_measured  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_27_En18_to_single_1 : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on4_out1),  -- sfix27_En18
              nfp_out => iq_measured  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_27_En18_to_single_2 : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on5_out1),  -- sfix27_En18
              nfp_out => ix_measured  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_sfix_27_En18_to_single_3 : parallel_8_sim_delay_compensation_src_nfp_convert_sfix_27_En18_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Switch_on6_out1),  -- sfix27_En18
              nfp_out => iy_measured  -- single
              );

  u_Detect_Rise_Positive1 : parallel_8_sim_delay_compensation_src_Detect_Rise_Positive1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              U => Delay35_out1,
              Y => End_Cycle_1
              );

  u_nfp_mul_comp : parallel_8_sim_delay_compensation_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => last_applied_optimal_voltage_vector_21,  -- single
              nfp_in2 => Switch_on18_out1,  -- single
              nfp_out => omega_el  -- single
              );

  u_MATLAB_Function : parallel_8_sim_delay_compensation_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              SampleTime_div_Ld => Switch_on2_out1,  -- single
              SampleTime_div_Lq => Switch_on11_out1,  -- single
              SampleTime_div_Lx => Switch_on12_out1,  -- single
              SampleTime_div_Ly => Switch_on13_out1,  -- single
              last_applied_optimal_voltage_d => last_applied_optimal_voltage_vector_4,  -- single
              last_applied_optimal_voltage_q => last_applied_optimal_voltage_vector_8,  -- single
              last_applied_optimal_voltage_x => last_applied_optimal_voltage_vector_11,  -- single
              last_applied_optimal_voltage_y => last_applied_optimal_voltage_vector_15,  -- single
              id_measured => last_applied_optimal_voltage_vector_16,  -- single
              iq_measured => last_applied_optimal_voltage_vector_18,  -- single
              ix_measured => last_applied_optimal_voltage_vector_19,  -- single
              iy_measured => last_applied_optimal_voltage_vector_20,  -- single
              psiPM => Switch_on7_out1,  -- single
              Lq => Switch_on8_out1,  -- single
              Ld => Switch_on9_out1,  -- single
              Rs => Switch_on10_out1,  -- single
              omega_el => last_applied_optimal_voltage_vector_22,  -- single
              id_k_1 => id_k_1_1,  -- single
              iq_k_1 => iq_k_1_1,  -- single
              ix_k_1 => ix_k_1_1,  -- single
              iy_k_1 => iy_k_1_1  -- single
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_single_to_sfix_18_En11 : parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => id_k_1_1,  -- single
              nfp_out => fc  -- sfix18_En11
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_single_to_sfix_18_En11_1 : parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => iq_k_1_1,  -- single
              nfp_out => fc_2  -- sfix18_En11
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_single_to_sfix_18_En11_2 : parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => ix_k_1_1,  -- single
              nfp_out => fc_4  -- sfix18_En11
              );

  u_parallel_8_delay_compensation_Delay_compensation_nfp_convert_single_to_sfix_18_En11_3 : parallel_8_sim_delay_compensation_src_nfp_convert_single_to_sfix_18_En11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => iy_k_1_1,  -- single
              nfp_out => fc_6  -- sfix18_En11
              );

  enb <= clk_enable;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_reg(0) <= '0';
        Delay11_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= Delay11_reg_next(0);
        Delay11_reg(1) <= Delay11_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);
  Delay11_reg_next(0) <= done_switching_states;
  Delay11_reg_next(1) <= Delay11_reg(0);

  
  switch_compare_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_reg(0) <= X"00000000";
        Delay21_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay21_reg(0) <= Delay21_reg_next(0);
        Delay21_reg(1) <= Delay21_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay21_process;

  Delay21_out1 <= Delay21_reg(1);
  Delay21_reg_next(0) <= SampleTime_div_Ld_AXI;
  Delay21_reg_next(1) <= Delay21_reg(0);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay2_out1 <= Switch_on2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_on2_out1 <= Delay2_out1 WHEN switch_compare_1 = '0' ELSE
      Delay21_out1;

  
  switch_compare_1_1 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_reg(0) <= X"00000000";
        Delay30_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay30_reg(0) <= Delay30_reg_next(0);
        Delay30_reg(1) <= Delay30_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay30_process;

  Delay30_out1 <= Delay30_reg(1);
  Delay30_reg_next(0) <= SampleTime_div_Lq_AXI;
  Delay30_reg_next(1) <= Delay30_reg(0);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay27_out1 <= Switch_on11_out1;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  
  Switch_on11_out1 <= Delay27_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay30_out1;

  
  switch_compare_1_2 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_reg(0) <= X"00000000";
        Delay31_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay31_reg(0) <= Delay31_reg_next(0);
        Delay31_reg(1) <= Delay31_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay31_process;

  Delay31_out1 <= Delay31_reg(1);
  Delay31_reg_next(0) <= SampleTime_div_Lx_AXI;
  Delay31_reg_next(1) <= Delay31_reg(0);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay28_out1 <= Switch_on12_out1;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  Switch_on12_out1 <= Delay28_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay31_out1;

  
  switch_compare_1_3 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_reg(0) <= X"00000000";
        Delay32_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay32_reg(0) <= Delay32_reg_next(0);
        Delay32_reg(1) <= Delay32_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(1);
  Delay32_reg_next(0) <= SampleTime_div_Ly_AXI;
  Delay32_reg_next(1) <= Delay32_reg(0);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay29_out1 <= Switch_on13_out1;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  
  Switch_on13_out1 <= Delay29_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay32_out1;

  
  switch_compare_1_4 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  last_applied_optimal_voltages_in_0_1 <= signed(last_applied_optimal_voltages_in_0);

  Delay20_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_1_reg(0) <= to_signed(16#000000#, 24);
        Delay20_1_reg(1) <= to_signed(16#000000#, 24);
        Delay20_1_reg_1(0) <= to_signed(16#000000#, 24);
        Delay20_1_reg_1(1) <= to_signed(16#000000#, 24);
        Delay20_1_reg_2(0) <= to_signed(16#000000#, 24);
        Delay20_1_reg_2(1) <= to_signed(16#000000#, 24);
        Delay20_1_reg_3(0) <= to_signed(16#000000#, 24);
        Delay20_1_reg_3(1) <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay20_1_reg(0) <= Delay20_1_reg_next(0);
        Delay20_1_reg(1) <= Delay20_1_reg_next(1);
        Delay20_1_reg_1(0) <= Delay20_1_reg_next_1(0);
        Delay20_1_reg_1(1) <= Delay20_1_reg_next_1(1);
        Delay20_1_reg_2(0) <= Delay20_1_reg_next_2(0);
        Delay20_1_reg_2(1) <= Delay20_1_reg_next_2(1);
        Delay20_1_reg_3(0) <= Delay20_1_reg_next_3(0);
        Delay20_1_reg_3(1) <= Delay20_1_reg_next_3(1);
      END IF;
    END IF;
  END PROCESS Delay20_1_process;

  Delay20_1_reg_next(0) <= last_applied_optimal_voltages_in_0_1;
  Delay20_1_reg_next(1) <= Delay20_1_reg(0);
  Delay20_out_1 <= Delay20_1_reg(1);
  Delay20_1_reg_next_1(0) <= last_applied_optimal_voltages_in_1_1;
  Delay20_1_reg_next_1(1) <= Delay20_1_reg_1(0);
  Delay20_out_2 <= Delay20_1_reg_1(1);
  Delay20_1_reg_next_2(0) <= last_applied_optimal_voltages_in_2_1;
  Delay20_1_reg_next_2(1) <= Delay20_1_reg_2(0);
  Delay20_out_3 <= Delay20_1_reg_2(1);
  Delay20_1_reg_next_3(0) <= last_applied_optimal_voltages_in_3_1;
  Delay20_1_reg_next_3(1) <= Delay20_1_reg_3(0);
  Delay20_out_4 <= Delay20_1_reg_3(1);

  last_applied_optimal_voltages_in_1_1 <= signed(last_applied_optimal_voltages_in_1);

  last_applied_optimal_voltages_in_2_1 <= signed(last_applied_optimal_voltages_in_2);

  last_applied_optimal_voltages_in_3_1 <= signed(last_applied_optimal_voltages_in_3);

  last_applied_optimal_voltage_vector(0) <= Delay20_out_1;
  last_applied_optimal_voltage_vector(1) <= Delay20_out_2;
  last_applied_optimal_voltage_vector(2) <= Delay20_out_3;
  last_applied_optimal_voltage_vector(3) <= Delay20_out_4;

  last_applied_optimal_voltage_vector_1 <= last_applied_optimal_voltage_vector(0);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_on1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_on1_out1 <= Delay1_out1 WHEN switch_compare_1_4 = '0' ELSE
      last_applied_optimal_voltage_vector_1;

  last_applied_optimal_voltage_vector_3 <= last_applied_optimal_voltage_vector_2;

  last_applied_optimal_voltage_vector_4 <= last_applied_optimal_voltage_vector_3;

  
  switch_compare_1_5 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  last_applied_optimal_voltage_vector_5 <= last_applied_optimal_voltage_vector(1);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay37_out1 <= Switch_on15_out1;
      END IF;
    END IF;
  END PROCESS Delay37_process;


  
  Switch_on15_out1 <= Delay37_out1 WHEN switch_compare_1_5 = '0' ELSE
      last_applied_optimal_voltage_vector_5;

  last_applied_optimal_voltage_vector_7 <= last_applied_optimal_voltage_vector_6;

  last_applied_optimal_voltage_vector_8 <= last_applied_optimal_voltage_vector_7;

  
  switch_compare_1_6 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  ast_applied_optimal_voltage_vector <= last_applied_optimal_voltage_vector(2);

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay38_out1 <= Switch_on16_out1;
      END IF;
    END IF;
  END PROCESS Delay38_process;


  
  Switch_on16_out1 <= Delay38_out1 WHEN switch_compare_1_6 = '0' ELSE
      ast_applied_optimal_voltage_vector;

  last_applied_optimal_voltage_vector_10 <= last_applied_optimal_voltage_vector_9;

  last_applied_optimal_voltage_vector_11 <= last_applied_optimal_voltage_vector_10;

  
  switch_compare_1_7 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  last_applied_optimal_voltage_vector_12 <= last_applied_optimal_voltage_vector(3);

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_out1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Delay39_out1 <= Switch_on17_out1;
      END IF;
    END IF;
  END PROCESS Delay39_process;


  
  Switch_on17_out1 <= Delay39_out1 WHEN switch_compare_1_7 = '0' ELSE
      last_applied_optimal_voltage_vector_12;

  last_applied_optimal_voltage_vector_14 <= last_applied_optimal_voltage_vector_13;

  last_applied_optimal_voltage_vector_15 <= last_applied_optimal_voltage_vector_14;

  
  switch_compare_1_8 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dq_measured_currents_0_1 <= signed(dq_measured_currents_0);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_reg(0) <= to_signed(16#0000000#, 27);
        Delay19_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay19_reg(0) <= Delay19_reg_next(0);
        Delay19_reg(1) <= Delay19_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay19_process;

  Delay19_out1 <= Delay19_reg(1);
  Delay19_reg_next(0) <= dq_measured_currents_0_1;
  Delay19_reg_next(1) <= Delay19_reg(0);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Switch_on3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch_on3_out1 <= Delay3_out1 WHEN switch_compare_1_8 = '0' ELSE
      Delay19_out1;

  id_measured_1 <= id_measured;

  last_applied_optimal_voltage_vector_16 <= id_measured_1;

  
  switch_compare_1_9 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dq_measured_currents_1_1 <= signed(dq_measured_currents_1);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_reg(0) <= to_signed(16#0000000#, 27);
        Delay18_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay18_reg(0) <= Delay18_reg_next(0);
        Delay18_reg(1) <= Delay18_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay18_process;

  last_applied_optimal_voltage_vector_17 <= Delay18_reg(1);
  Delay18_reg_next(0) <= dq_measured_currents_1_1;
  Delay18_reg_next(1) <= Delay18_reg(0);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Switch_on4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_on4_out1 <= Delay4_out1 WHEN switch_compare_1_9 = '0' ELSE
      last_applied_optimal_voltage_vector_17;

  iq_measured_1 <= iq_measured;

  last_applied_optimal_voltage_vector_18 <= iq_measured_1;

  
  switch_compare_1_10 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dq_measured_currents_2_1 <= signed(dq_measured_currents_2);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_reg(0) <= to_signed(16#0000000#, 27);
        Delay17_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay17_reg(0) <= Delay17_reg_next(0);
        Delay17_reg(1) <= Delay17_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay17_process;

  Delay17_out1 <= Delay17_reg(1);
  Delay17_reg_next(0) <= dq_measured_currents_2_1;
  Delay17_reg_next(1) <= Delay17_reg(0);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Switch_on5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch_on5_out1 <= Delay5_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay17_out1;

  ix_measured_1 <= ix_measured;

  last_applied_optimal_voltage_vector_19 <= ix_measured_1;

  
  switch_compare_1_11 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  dq_measured_currents_3_1 <= signed(dq_measured_currents_3);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_reg(0) <= to_signed(16#0000000#, 27);
        Delay16_reg(1) <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay16_reg(0) <= Delay16_reg_next(0);
        Delay16_reg(1) <= Delay16_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay16_process;

  Delay16_out1 <= Delay16_reg(1);
  Delay16_reg_next(0) <= dq_measured_currents_3_1;
  Delay16_reg_next(1) <= Delay16_reg(0);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Switch_on6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_on6_out1 <= Delay6_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay16_out1;

  iy_measured_1 <= iy_measured;

  last_applied_optimal_voltage_vector_20 <= iy_measured_1;

  
  switch_compare_1_12 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_reg(0) <= X"00000000";
        Delay15_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay15_reg(0) <= Delay15_reg_next(0);
        Delay15_reg(1) <= Delay15_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out1 <= Delay15_reg(1);
  Delay15_reg_next(0) <= psiPM_AXI;
  Delay15_reg_next(1) <= Delay15_reg(0);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay7_out1 <= Switch_on7_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch_on7_out1 <= Delay7_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay15_out1;

  
  switch_compare_1_13 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_reg(0) <= X"00000000";
        Delay14_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay14_reg(0) <= Delay14_reg_next(0);
        Delay14_reg(1) <= Delay14_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay14_process;

  Delay14_out1 <= Delay14_reg(1);
  Delay14_reg_next(0) <= Lq_AXI;
  Delay14_reg_next(1) <= Delay14_reg(0);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay8_out1 <= Switch_on8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch_on8_out1 <= Delay8_out1 WHEN switch_compare_1_13 = '0' ELSE
      Delay14_out1;

  
  switch_compare_1_14 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_reg(0) <= X"00000000";
        Delay13_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay13_reg(0) <= Delay13_reg_next(0);
        Delay13_reg(1) <= Delay13_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(1);
  Delay13_reg_next(0) <= Ld_AXI;
  Delay13_reg_next(1) <= Delay13_reg(0);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay9_out1 <= Switch_on9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch_on9_out1 <= Delay9_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay13_out1;

  
  switch_compare_1_15 <= '1' WHEN End_Cycle = '1' ELSE
      '0';

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_reg(0) <= X"00000000";
        Delay12_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay12_reg(0) <= Delay12_reg_next(0);
        Delay12_reg(1) <= Delay12_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);
  Delay12_reg_next(0) <= Rs_AXI;
  Delay12_reg_next(1) <= Delay12_reg(0);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay10_out1 <= Switch_on10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch_on10_out1 <= Delay10_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay12_out1;

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_reg(0) <= '0';
        Delay35_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay35_reg(0) <= Delay35_reg_next(0);
        Delay35_reg(1) <= Delay35_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay35_process;

  Delay35_out1 <= Delay35_reg(1);
  Delay35_reg_next(0) <= current_valid_in;
  Delay35_reg_next(1) <= Delay35_reg(0);

  
  switch_compare_1_16 <= '1' WHEN End_Cycle_1 = '1' ELSE
      '0';

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_reg(0) <= X"00000000";
        Delay34_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay34_reg(0) <= Delay34_reg_next(0);
        Delay34_reg(1) <= Delay34_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay34_process;

  Delay34_out1 <= Delay34_reg(1);
  Delay34_reg_next(0) <= omega_m_measured_AXI;
  Delay34_reg_next(1) <= Delay34_reg(0);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay33_out1 <= last_applied_optimal_voltage_vector_21;
      END IF;
    END IF;
  END PROCESS Delay33_process;


  
  last_applied_optimal_voltage_vector_21 <= Delay33_out1 WHEN switch_compare_1_16 = '0' ELSE
      Delay34_out1;

  
  switch_compare_1_17 <= '1' WHEN End_Cycle_1 = '1' ELSE
      '0';

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_reg(0) <= X"00000000";
        Delay36_reg(1) <= X"00000000";
      ELSIF enb = '1' THEN
        Delay36_reg(0) <= Delay36_reg_next(0);
        Delay36_reg(1) <= Delay36_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay36_process;

  Delay36_out1 <= Delay36_reg(1);
  Delay36_reg_next(0) <= pole_pairs_AXI;
  Delay36_reg_next(1) <= Delay36_reg(0);

  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_out1 <= X"00000000";
      ELSIF enb = '1' THEN
        Delay40_out1 <= Switch_on18_out1;
      END IF;
    END IF;
  END PROCESS Delay40_process;


  
  Switch_on18_out1 <= Delay40_out1 WHEN switch_compare_1_17 = '0' ELSE
      Delay36_out1;

  omega_el_1 <= omega_el;

  last_applied_optimal_voltage_vector_22 <= omega_el_1;

  fc_1 <= signed(fc);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= to_signed(16#00000#, 18);
        reduced_reg(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
      END IF;
    END IF;
  END PROCESS reduced_process;

  last_applied_optimal_voltage_vector_23 <= reduced_reg(1);
  reduced_reg_next(0) <= fc_1;
  reduced_reg_next(1) <= reduced_reg(0);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= to_signed(16#00000#, 18);
        reduced_reg_1(1) <= to_signed(16#00000#, 18);
        reduced_reg_1(2) <= to_signed(16#00000#, 18);
        reduced_reg_1(3) <= to_signed(16#00000#, 18);
        reduced_reg_1(4) <= to_signed(16#00000#, 18);
        reduced_reg_1(5) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  last_applied_optimal_voltage_vector_24 <= reduced_reg_1(5);
  reduced_reg_next_1(0) <= last_applied_optimal_voltage_vector_23;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);

  id_k_1 <= std_logic_vector(last_applied_optimal_voltage_vector_24);

  fc_3 <= signed(fc_2);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= to_signed(16#00000#, 18);
        reduced_reg_2(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  last_applied_optimal_voltage_vector_25 <= reduced_reg_2(1);
  reduced_reg_next_2(0) <= fc_3;
  reduced_reg_next_2(1) <= reduced_reg_2(0);

  iq_k_1 <= std_logic_vector(last_applied_optimal_voltage_vector_25);

  fc_5 <= signed(fc_4);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3(0) <= to_signed(16#00000#, 18);
        reduced_reg_3(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_3(0) <= reduced_reg_next_3(0);
        reduced_reg_3(1) <= reduced_reg_next_3(1);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  last_applied_optimal_voltage_vector_26 <= reduced_reg_3(1);
  reduced_reg_next_3(0) <= fc_5;
  reduced_reg_next_3(1) <= reduced_reg_3(0);

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_4(0) <= to_signed(16#00000#, 18);
        reduced_reg_4(1) <= to_signed(16#00000#, 18);
        reduced_reg_4(2) <= to_signed(16#00000#, 18);
        reduced_reg_4(3) <= to_signed(16#00000#, 18);
        reduced_reg_4(4) <= to_signed(16#00000#, 18);
        reduced_reg_4(5) <= to_signed(16#00000#, 18);
        reduced_reg_4(6) <= to_signed(16#00000#, 18);
        reduced_reg_4(7) <= to_signed(16#00000#, 18);
        reduced_reg_4(8) <= to_signed(16#00000#, 18);
        reduced_reg_4(9) <= to_signed(16#00000#, 18);
        reduced_reg_4(10) <= to_signed(16#00000#, 18);
        reduced_reg_4(11) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_4(0) <= reduced_reg_next_4(0);
        reduced_reg_4(1) <= reduced_reg_next_4(1);
        reduced_reg_4(2) <= reduced_reg_next_4(2);
        reduced_reg_4(3) <= reduced_reg_next_4(3);
        reduced_reg_4(4) <= reduced_reg_next_4(4);
        reduced_reg_4(5) <= reduced_reg_next_4(5);
        reduced_reg_4(6) <= reduced_reg_next_4(6);
        reduced_reg_4(7) <= reduced_reg_next_4(7);
        reduced_reg_4(8) <= reduced_reg_next_4(8);
        reduced_reg_4(9) <= reduced_reg_next_4(9);
        reduced_reg_4(10) <= reduced_reg_next_4(10);
        reduced_reg_4(11) <= reduced_reg_next_4(11);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  last_applied_optimal_voltage_vector_27 <= reduced_reg_4(11);
  reduced_reg_next_4(0) <= last_applied_optimal_voltage_vector_26;
  reduced_reg_next_4(1) <= reduced_reg_4(0);
  reduced_reg_next_4(2) <= reduced_reg_4(1);
  reduced_reg_next_4(3) <= reduced_reg_4(2);
  reduced_reg_next_4(4) <= reduced_reg_4(3);
  reduced_reg_next_4(5) <= reduced_reg_4(4);
  reduced_reg_next_4(6) <= reduced_reg_4(5);
  reduced_reg_next_4(7) <= reduced_reg_4(6);
  reduced_reg_next_4(8) <= reduced_reg_4(7);
  reduced_reg_next_4(9) <= reduced_reg_4(8);
  reduced_reg_next_4(10) <= reduced_reg_4(9);
  reduced_reg_next_4(11) <= reduced_reg_4(10);

  ix_k_1 <= std_logic_vector(last_applied_optimal_voltage_vector_27);

  fc_7 <= signed(fc_6);

  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_5(0) <= to_signed(16#00000#, 18);
        reduced_reg_5(1) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_5(0) <= reduced_reg_next_5(0);
        reduced_reg_5(1) <= reduced_reg_next_5(1);
      END IF;
    END IF;
  END PROCESS reduced_5_process;

  last_applied_optimal_voltage_vector_28 <= reduced_reg_5(1);
  reduced_reg_next_5(0) <= fc_7;
  reduced_reg_next_5(1) <= reduced_reg_5(0);

  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_6(0) <= to_signed(16#00000#, 18);
        reduced_reg_6(1) <= to_signed(16#00000#, 18);
        reduced_reg_6(2) <= to_signed(16#00000#, 18);
        reduced_reg_6(3) <= to_signed(16#00000#, 18);
        reduced_reg_6(4) <= to_signed(16#00000#, 18);
        reduced_reg_6(5) <= to_signed(16#00000#, 18);
        reduced_reg_6(6) <= to_signed(16#00000#, 18);
        reduced_reg_6(7) <= to_signed(16#00000#, 18);
        reduced_reg_6(8) <= to_signed(16#00000#, 18);
        reduced_reg_6(9) <= to_signed(16#00000#, 18);
        reduced_reg_6(10) <= to_signed(16#00000#, 18);
        reduced_reg_6(11) <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        reduced_reg_6(0) <= reduced_reg_next_6(0);
        reduced_reg_6(1) <= reduced_reg_next_6(1);
        reduced_reg_6(2) <= reduced_reg_next_6(2);
        reduced_reg_6(3) <= reduced_reg_next_6(3);
        reduced_reg_6(4) <= reduced_reg_next_6(4);
        reduced_reg_6(5) <= reduced_reg_next_6(5);
        reduced_reg_6(6) <= reduced_reg_next_6(6);
        reduced_reg_6(7) <= reduced_reg_next_6(7);
        reduced_reg_6(8) <= reduced_reg_next_6(8);
        reduced_reg_6(9) <= reduced_reg_next_6(9);
        reduced_reg_6(10) <= reduced_reg_next_6(10);
        reduced_reg_6(11) <= reduced_reg_next_6(11);
      END IF;
    END IF;
  END PROCESS reduced_6_process;

  last_applied_optimal_voltage_vector_29 <= reduced_reg_6(11);
  reduced_reg_next_6(0) <= last_applied_optimal_voltage_vector_28;
  reduced_reg_next_6(1) <= reduced_reg_6(0);
  reduced_reg_next_6(2) <= reduced_reg_6(1);
  reduced_reg_next_6(3) <= reduced_reg_6(2);
  reduced_reg_next_6(4) <= reduced_reg_6(3);
  reduced_reg_next_6(5) <= reduced_reg_6(4);
  reduced_reg_next_6(6) <= reduced_reg_6(5);
  reduced_reg_next_6(7) <= reduced_reg_6(6);
  reduced_reg_next_6(8) <= reduced_reg_6(7);
  reduced_reg_next_6(9) <= reduced_reg_6(8);
  reduced_reg_next_6(10) <= reduced_reg_6(9);
  reduced_reg_next_6(11) <= reduced_reg_6(10);

  iy_k_1 <= std_logic_vector(last_applied_optimal_voltage_vector_29);

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_reg(0) <= '0';
        Delay22_reg(1) <= '0';
      ELSIF enb = '1' THEN
        Delay22_reg(0) <= Delay22_reg_next(0);
        Delay22_reg(1) <= Delay22_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay22_process;

  Delay22_out1 <= Delay22_reg(1);
  Delay22_reg_next(0) <= End_Cycle;
  Delay22_reg_next(1) <= Delay22_reg(0);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg(0) <= '0';
        delayMatch3_reg(1) <= '0';
        delayMatch3_reg(2) <= '0';
        delayMatch3_reg(3) <= '0';
        delayMatch3_reg(4) <= '0';
        delayMatch3_reg(5) <= '0';
        delayMatch3_reg(6) <= '0';
        delayMatch3_reg(7) <= '0';
        delayMatch3_reg(8) <= '0';
        delayMatch3_reg(9) <= '0';
        delayMatch3_reg(10) <= '0';
        delayMatch3_reg(11) <= '0';
        delayMatch3_reg(12) <= '0';
        delayMatch3_reg(13) <= '0';
        delayMatch3_reg(14) <= '0';
        delayMatch3_reg(15) <= '0';
        delayMatch3_reg(16) <= '0';
        delayMatch3_reg(17) <= '0';
        delayMatch3_reg(18) <= '0';
        delayMatch3_reg(19) <= '0';
        delayMatch3_reg(20) <= '0';
        delayMatch3_reg(21) <= '0';
        delayMatch3_reg(22) <= '0';
        delayMatch3_reg(23) <= '0';
        delayMatch3_reg(24) <= '0';
        delayMatch3_reg(25) <= '0';
        delayMatch3_reg(26) <= '0';
        delayMatch3_reg(27) <= '0';
        delayMatch3_reg(28) <= '0';
        delayMatch3_reg(29) <= '0';
        delayMatch3_reg(30) <= '0';
        delayMatch3_reg(31) <= '0';
        delayMatch3_reg(32) <= '0';
        delayMatch3_reg(33) <= '0';
        delayMatch3_reg(34) <= '0';
        delayMatch3_reg(35) <= '0';
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
        delayMatch3_reg(6) <= delayMatch3_reg_next(6);
        delayMatch3_reg(7) <= delayMatch3_reg_next(7);
        delayMatch3_reg(8) <= delayMatch3_reg_next(8);
        delayMatch3_reg(9) <= delayMatch3_reg_next(9);
        delayMatch3_reg(10) <= delayMatch3_reg_next(10);
        delayMatch3_reg(11) <= delayMatch3_reg_next(11);
        delayMatch3_reg(12) <= delayMatch3_reg_next(12);
        delayMatch3_reg(13) <= delayMatch3_reg_next(13);
        delayMatch3_reg(14) <= delayMatch3_reg_next(14);
        delayMatch3_reg(15) <= delayMatch3_reg_next(15);
        delayMatch3_reg(16) <= delayMatch3_reg_next(16);
        delayMatch3_reg(17) <= delayMatch3_reg_next(17);
        delayMatch3_reg(18) <= delayMatch3_reg_next(18);
        delayMatch3_reg(19) <= delayMatch3_reg_next(19);
        delayMatch3_reg(20) <= delayMatch3_reg_next(20);
        delayMatch3_reg(21) <= delayMatch3_reg_next(21);
        delayMatch3_reg(22) <= delayMatch3_reg_next(22);
        delayMatch3_reg(23) <= delayMatch3_reg_next(23);
        delayMatch3_reg(24) <= delayMatch3_reg_next(24);
        delayMatch3_reg(25) <= delayMatch3_reg_next(25);
        delayMatch3_reg(26) <= delayMatch3_reg_next(26);
        delayMatch3_reg(27) <= delayMatch3_reg_next(27);
        delayMatch3_reg(28) <= delayMatch3_reg_next(28);
        delayMatch3_reg(29) <= delayMatch3_reg_next(29);
        delayMatch3_reg(30) <= delayMatch3_reg_next(30);
        delayMatch3_reg(31) <= delayMatch3_reg_next(31);
        delayMatch3_reg(32) <= delayMatch3_reg_next(32);
        delayMatch3_reg(33) <= delayMatch3_reg_next(33);
        delayMatch3_reg(34) <= delayMatch3_reg_next(34);
        delayMatch3_reg(35) <= delayMatch3_reg_next(35);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Delay22_out1_1 <= delayMatch3_reg(35);
  delayMatch3_reg_next(0) <= Delay22_out1;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);
  delayMatch3_reg_next(6) <= delayMatch3_reg(5);
  delayMatch3_reg_next(7) <= delayMatch3_reg(6);
  delayMatch3_reg_next(8) <= delayMatch3_reg(7);
  delayMatch3_reg_next(9) <= delayMatch3_reg(8);
  delayMatch3_reg_next(10) <= delayMatch3_reg(9);
  delayMatch3_reg_next(11) <= delayMatch3_reg(10);
  delayMatch3_reg_next(12) <= delayMatch3_reg(11);
  delayMatch3_reg_next(13) <= delayMatch3_reg(12);
  delayMatch3_reg_next(14) <= delayMatch3_reg(13);
  delayMatch3_reg_next(15) <= delayMatch3_reg(14);
  delayMatch3_reg_next(16) <= delayMatch3_reg(15);
  delayMatch3_reg_next(17) <= delayMatch3_reg(16);
  delayMatch3_reg_next(18) <= delayMatch3_reg(17);
  delayMatch3_reg_next(19) <= delayMatch3_reg(18);
  delayMatch3_reg_next(20) <= delayMatch3_reg(19);
  delayMatch3_reg_next(21) <= delayMatch3_reg(20);
  delayMatch3_reg_next(22) <= delayMatch3_reg(21);
  delayMatch3_reg_next(23) <= delayMatch3_reg(22);
  delayMatch3_reg_next(24) <= delayMatch3_reg(23);
  delayMatch3_reg_next(25) <= delayMatch3_reg(24);
  delayMatch3_reg_next(26) <= delayMatch3_reg(25);
  delayMatch3_reg_next(27) <= delayMatch3_reg(26);
  delayMatch3_reg_next(28) <= delayMatch3_reg(27);
  delayMatch3_reg_next(29) <= delayMatch3_reg(28);
  delayMatch3_reg_next(30) <= delayMatch3_reg(29);
  delayMatch3_reg_next(31) <= delayMatch3_reg(30);
  delayMatch3_reg_next(32) <= delayMatch3_reg(31);
  delayMatch3_reg_next(33) <= delayMatch3_reg(32);
  delayMatch3_reg_next(34) <= delayMatch3_reg(33);
  delayMatch3_reg_next(35) <= delayMatch3_reg(34);

  done_delay_compensation <= Delay22_out1_1;

  id_k_1_AXI <= std_logic_vector(last_applied_optimal_voltage_vector_24);

  iq_k_1_AXI <= std_logic_vector(last_applied_optimal_voltage_vector_25);

  ix_k_1_AXI <= std_logic_vector(last_applied_optimal_voltage_vector_27);

  iy_k_1_AXI <= std_logic_vector(last_applied_optimal_voltage_vector_29);

  ce_out <= clk_enable;

END rtl;

