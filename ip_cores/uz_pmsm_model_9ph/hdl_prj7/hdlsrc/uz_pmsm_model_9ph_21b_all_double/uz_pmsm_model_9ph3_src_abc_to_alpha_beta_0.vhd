-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj7/hdlsrc/uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph3_src_abc_to_alpha_beta_0.vhd
-- Created: 2022-06-04 17:38:56
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_9ph3_src_abc_to_alpha_beta_0
-- Source Path: uz_pmsm_model_9ph_21b_all_double/uz_pmsm_model_9ph/Line-Line to Phase voltage/abc   to   alpha_beta_0
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_9ph3_src_uz_pmsm_model_9ph_pkg.ALL;

ENTITY uz_pmsm_model_9ph3_src_abc_to_alpha_beta_0 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_20_0                        :   IN    std_logic;
        a_b_c                             :   IN    vector_of_std_logic_vector25(0 TO 2);  -- sfix25_En12 [3]
        alpha_beta_0                      :   OUT   vector_of_std_logic_vector25(0 TO 2)  -- sfix25_En12 [3]
        );
END uz_pmsm_model_9ph3_src_abc_to_alpha_beta_0;


ARCHITECTURE rtl OF uz_pmsm_model_9ph3_src_abc_to_alpha_beta_0 IS

  -- Signals
  SIGNAL a_b_c_signed                     : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL c7_kconst                        : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL kconst                           : matrix_of_signed18(0 TO 2, 0 TO 2);  -- sfix18_En16 [3x3]
  SIGNAL s                                : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out                     : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_1                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL HwModeRegister_reg               : vector_of_signed18(0 TO 8);  -- sfix18 [9]
  SIGNAL HwModeRegister_reg_next          : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL s_2                              : vector_of_signed18(0 TO 8);  -- sfix18_En16 [9]
  SIGNAL selector_out_1                   : vector_of_std_logic_vector25(0 TO 8);  -- ufix25 [9]
  SIGNAL selector_out_2                   : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL s_3                              : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL HwModeRegister1_reg              : vector_of_signed25(0 TO 8);  -- sfix25 [9]
  SIGNAL HwModeRegister1_reg_next         : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL s_4                              : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL MMul_dot_product_out             : vector_of_signed43(0 TO 8);  -- sfix43_En28 [9]
  SIGNAL PipelineRegister_reg             : vector_of_signed43(0 TO 8);  -- sfix43 [9]
  SIGNAL PipelineRegister_reg_next        : vector_of_signed43(0 TO 8);  -- sfix43_En28 [9]
  SIGNAL MMul_dot_product_out_1           : vector_of_signed43(0 TO 8);  -- sfix43_En28 [9]
  SIGNAL MMul_dot_product_out_2           : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL reshape_out                      : matrix_of_signed25(0 TO 2, 0 TO 2);  -- sfix25_En12 [3x3]
  SIGNAL selector_out_3                   : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL selector_out_4                   : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL MMul_add_01_add_cast             : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_cast_1           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_temp             : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_cast_2           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_cast_3           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_temp_1           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_cast_4           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_cast_5           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_add_temp_2           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_01_out                  : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL selector_out_5                   : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL MMul_add_12_add_cast             : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_cast_1           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_temp             : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_cast_2           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_cast_3           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_temp_1           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_cast_4           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_cast_5           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL MMul_add_12_add_temp_2           : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL s_5                              : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Gain4_out1                       : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Gain4_out1_1                     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL kconst_1                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL kconst_2                         : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Gain2_out1                       : vector_of_signed43(0 TO 2);  -- sfix43_En28 [3]
  SIGNAL Gain2_out1_1                     : vector_of_signed43(0 TO 2);  -- sfix43_En28 [3]
  SIGNAL Gain2_out1_2                     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]

BEGIN
  a_b_c_signed <= a_b_c;

  c7_kconst(0) <= to_signed(16#10000#, 18);
  c7_kconst(1) <= to_signed(16#00000#, 18);
  c7_kconst(2) <= to_signed(16#08000#, 18);
  c7_kconst(3) <= to_signed(-16#08000#, 18);
  c7_kconst(4) <= to_signed(16#0DDB4#, 18);
  c7_kconst(5) <= to_signed(16#08000#, 18);
  c7_kconst(6) <= to_signed(-16#08000#, 18);
  c7_kconst(7) <= to_signed(-16#0DDB4#, 18);
  c7_kconst(8) <= to_signed(16#08000#, 18);

  kconstGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    kconstGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      kconst(d0, d1) <= c7_kconst(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  sGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    sGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      s(d0 + (d1 * 3)) <= kconst(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out(0) <= s(0);
  selector_out(1) <= s(3);
  selector_out(2) <= s(6);
  selector_out(3) <= s(1);
  selector_out(4) <= s(4);
  selector_out(5) <= s(7);
  selector_out(6) <= s(2);
  selector_out(7) <= s(5);
  selector_out(8) <= s(8);

  s_1GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_1(d0) <= selector_out(d0);
  END GENERATE;

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HwModeRegister_reg(0) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(1) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(2) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(3) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(4) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(5) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(6) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(7) <= to_signed(16#00000#, 18);
        HwModeRegister_reg(8) <= to_signed(16#00000#, 18);
      ELSIF enb_1_20_0 = '1' THEN
        HwModeRegister_reg(0) <= HwModeRegister_reg_next(0);
        HwModeRegister_reg(1) <= HwModeRegister_reg_next(1);
        HwModeRegister_reg(2) <= HwModeRegister_reg_next(2);
        HwModeRegister_reg(3) <= HwModeRegister_reg_next(3);
        HwModeRegister_reg(4) <= HwModeRegister_reg_next(4);
        HwModeRegister_reg(5) <= HwModeRegister_reg_next(5);
        HwModeRegister_reg(6) <= HwModeRegister_reg_next(6);
        HwModeRegister_reg(7) <= HwModeRegister_reg_next(7);
        HwModeRegister_reg(8) <= HwModeRegister_reg_next(8);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  s_2(0) <= HwModeRegister_reg(0);
  s_2(1) <= HwModeRegister_reg(1);
  s_2(2) <= HwModeRegister_reg(2);
  s_2(3) <= HwModeRegister_reg(3);
  s_2(4) <= HwModeRegister_reg(4);
  s_2(5) <= HwModeRegister_reg(5);
  s_2(6) <= HwModeRegister_reg(6);
  s_2(7) <= HwModeRegister_reg(7);
  s_2(8) <= HwModeRegister_reg(8);
  HwModeRegister_reg_next(0) <= s_1(0);
  HwModeRegister_reg_next(1) <= s_1(1);
  HwModeRegister_reg_next(2) <= s_1(2);
  HwModeRegister_reg_next(3) <= s_1(3);
  HwModeRegister_reg_next(4) <= s_1(4);
  HwModeRegister_reg_next(5) <= s_1(5);
  HwModeRegister_reg_next(6) <= s_1(6);
  HwModeRegister_reg_next(7) <= s_1(7);
  HwModeRegister_reg_next(8) <= s_1(8);

  selector_out_1(0) <= a_b_c_signed(0);
  selector_out_1(1) <= a_b_c_signed(1);
  selector_out_1(2) <= a_b_c_signed(2);
  selector_out_1(3) <= a_b_c_signed(0);
  selector_out_1(4) <= a_b_c_signed(1);
  selector_out_1(5) <= a_b_c_signed(2);
  selector_out_1(6) <= a_b_c_signed(0);
  selector_out_1(7) <= a_b_c_signed(1);
  selector_out_1(8) <= a_b_c_signed(2);

  outputgen1: FOR k IN 0 TO 8 GENERATE
    selector_out_2(k) <= signed(selector_out_1(k));
  END GENERATE;

  s_3GEN_LABEL: FOR d0 IN 0 TO 8 GENERATE
    s_3(d0) <= selector_out_2(d0);
  END GENERATE;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HwModeRegister1_reg(0) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(1) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(2) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(3) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(4) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(5) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(6) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(7) <= to_signed(16#0000000#, 25);
        HwModeRegister1_reg(8) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_20_0 = '1' THEN
        HwModeRegister1_reg(0) <= HwModeRegister1_reg_next(0);
        HwModeRegister1_reg(1) <= HwModeRegister1_reg_next(1);
        HwModeRegister1_reg(2) <= HwModeRegister1_reg_next(2);
        HwModeRegister1_reg(3) <= HwModeRegister1_reg_next(3);
        HwModeRegister1_reg(4) <= HwModeRegister1_reg_next(4);
        HwModeRegister1_reg(5) <= HwModeRegister1_reg_next(5);
        HwModeRegister1_reg(6) <= HwModeRegister1_reg_next(6);
        HwModeRegister1_reg(7) <= HwModeRegister1_reg_next(7);
        HwModeRegister1_reg(8) <= HwModeRegister1_reg_next(8);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  s_4(0) <= HwModeRegister1_reg(0);
  s_4(1) <= HwModeRegister1_reg(1);
  s_4(2) <= HwModeRegister1_reg(2);
  s_4(3) <= HwModeRegister1_reg(3);
  s_4(4) <= HwModeRegister1_reg(4);
  s_4(5) <= HwModeRegister1_reg(5);
  s_4(6) <= HwModeRegister1_reg(6);
  s_4(7) <= HwModeRegister1_reg(7);
  s_4(8) <= HwModeRegister1_reg(8);
  HwModeRegister1_reg_next(0) <= s_3(0);
  HwModeRegister1_reg_next(1) <= s_3(1);
  HwModeRegister1_reg_next(2) <= s_3(2);
  HwModeRegister1_reg_next(3) <= s_3(3);
  HwModeRegister1_reg_next(4) <= s_3(4);
  HwModeRegister1_reg_next(5) <= s_3(5);
  HwModeRegister1_reg_next(6) <= s_3(6);
  HwModeRegister1_reg_next(7) <= s_3(7);
  HwModeRegister1_reg_next(8) <= s_3(8);

  MMul_dot_product_out(0) <= s_2(0) * s_4(0);
  MMul_dot_product_out(1) <= s_2(1) * s_4(1);
  MMul_dot_product_out(2) <= s_2(2) * s_4(2);
  MMul_dot_product_out(3) <= s_2(3) * s_4(3);
  MMul_dot_product_out(4) <= s_2(4) * s_4(4);
  MMul_dot_product_out(5) <= s_2(5) * s_4(5);
  MMul_dot_product_out(6) <= s_2(6) * s_4(6);
  MMul_dot_product_out(7) <= s_2(7) * s_4(7);
  MMul_dot_product_out(8) <= s_2(8) * s_4(8);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        PipelineRegister_reg(0) <= to_signed(0, 43);
        PipelineRegister_reg(1) <= to_signed(0, 43);
        PipelineRegister_reg(2) <= to_signed(0, 43);
        PipelineRegister_reg(3) <= to_signed(0, 43);
        PipelineRegister_reg(4) <= to_signed(0, 43);
        PipelineRegister_reg(5) <= to_signed(0, 43);
        PipelineRegister_reg(6) <= to_signed(0, 43);
        PipelineRegister_reg(7) <= to_signed(0, 43);
        PipelineRegister_reg(8) <= to_signed(0, 43);
      ELSIF enb_1_20_0 = '1' THEN
        PipelineRegister_reg(0) <= PipelineRegister_reg_next(0);
        PipelineRegister_reg(1) <= PipelineRegister_reg_next(1);
        PipelineRegister_reg(2) <= PipelineRegister_reg_next(2);
        PipelineRegister_reg(3) <= PipelineRegister_reg_next(3);
        PipelineRegister_reg(4) <= PipelineRegister_reg_next(4);
        PipelineRegister_reg(5) <= PipelineRegister_reg_next(5);
        PipelineRegister_reg(6) <= PipelineRegister_reg_next(6);
        PipelineRegister_reg(7) <= PipelineRegister_reg_next(7);
        PipelineRegister_reg(8) <= PipelineRegister_reg_next(8);
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;

  MMul_dot_product_out_1(0) <= PipelineRegister_reg(0);
  MMul_dot_product_out_1(1) <= PipelineRegister_reg(1);
  MMul_dot_product_out_1(2) <= PipelineRegister_reg(2);
  MMul_dot_product_out_1(3) <= PipelineRegister_reg(3);
  MMul_dot_product_out_1(4) <= PipelineRegister_reg(4);
  MMul_dot_product_out_1(5) <= PipelineRegister_reg(5);
  MMul_dot_product_out_1(6) <= PipelineRegister_reg(6);
  MMul_dot_product_out_1(7) <= PipelineRegister_reg(7);
  MMul_dot_product_out_1(8) <= PipelineRegister_reg(8);
  PipelineRegister_reg_next(0) <= MMul_dot_product_out(0);
  PipelineRegister_reg_next(1) <= MMul_dot_product_out(1);
  PipelineRegister_reg_next(2) <= MMul_dot_product_out(2);
  PipelineRegister_reg_next(3) <= MMul_dot_product_out(3);
  PipelineRegister_reg_next(4) <= MMul_dot_product_out(4);
  PipelineRegister_reg_next(5) <= MMul_dot_product_out(5);
  PipelineRegister_reg_next(6) <= MMul_dot_product_out(6);
  PipelineRegister_reg_next(7) <= MMul_dot_product_out(7);
  PipelineRegister_reg_next(8) <= MMul_dot_product_out(8);

  
  MMul_dot_product_out_2(0) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(0)(42) = '0') AND (MMul_dot_product_out_1(0)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(0)(42) = '1') AND (MMul_dot_product_out_1(0)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(0)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(1) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(1)(42) = '0') AND (MMul_dot_product_out_1(1)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(1)(42) = '1') AND (MMul_dot_product_out_1(1)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(1)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(2) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(2)(42) = '0') AND (MMul_dot_product_out_1(2)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(2)(42) = '1') AND (MMul_dot_product_out_1(2)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(2)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(3) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(3)(42) = '0') AND (MMul_dot_product_out_1(3)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(3)(42) = '1') AND (MMul_dot_product_out_1(3)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(3)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(4) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(4)(42) = '0') AND (MMul_dot_product_out_1(4)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(4)(42) = '1') AND (MMul_dot_product_out_1(4)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(4)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(5) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(5)(42) = '0') AND (MMul_dot_product_out_1(5)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(5)(42) = '1') AND (MMul_dot_product_out_1(5)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(5)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(6) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(6)(42) = '0') AND (MMul_dot_product_out_1(6)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(6)(42) = '1') AND (MMul_dot_product_out_1(6)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(6)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(7) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(7)(42) = '0') AND (MMul_dot_product_out_1(7)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(7)(42) = '1') AND (MMul_dot_product_out_1(7)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(7)(40 DOWNTO 16);
  
  MMul_dot_product_out_2(8) <= "0111111111111111111111111" WHEN (MMul_dot_product_out_1(8)(42) = '0') AND (MMul_dot_product_out_1(8)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (MMul_dot_product_out_1(8)(42) = '1') AND (MMul_dot_product_out_1(8)(41 DOWNTO 40) /= "11") ELSE
      MMul_dot_product_out_1(8)(40 DOWNTO 16);

  reshape_outGEN_LABEL1: FOR d1 IN 0 TO 2 GENERATE
    reshape_outGEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
      reshape_out(d0, d1) <= MMul_dot_product_out_2(d0 + (d1 * 3));
    END GENERATE;
  END GENERATE;

  select_0_output : PROCESS (reshape_out)
  BEGIN
    selector_out_3(0) <= reshape_out(0, 0);
    selector_out_3(1) <= reshape_out(0, 1);
    selector_out_3(2) <= reshape_out(0, 2);
  END PROCESS select_0_output;


  select_1_output : PROCESS (reshape_out)
  BEGIN
    selector_out_4(0) <= reshape_out(1, 0);
    selector_out_4(1) <= reshape_out(1, 1);
    selector_out_4(2) <= reshape_out(1, 2);
  END PROCESS select_1_output;


  MMul_add_01_add_cast <= resize(selector_out_3(0), 26);
  MMul_add_01_add_cast_1 <= resize(selector_out_4(0), 26);
  MMul_add_01_add_temp <= MMul_add_01_add_cast + MMul_add_01_add_cast_1;
  
  MMul_add_01_out(0) <= "0111111111111111111111111" WHEN (MMul_add_01_add_temp(25) = '0') AND (MMul_add_01_add_temp(24) /= '0') ELSE
      "1000000000000000000000000" WHEN (MMul_add_01_add_temp(25) = '1') AND (MMul_add_01_add_temp(24) /= '1') ELSE
      MMul_add_01_add_temp(24 DOWNTO 0);
  MMul_add_01_add_cast_2 <= resize(selector_out_3(1), 26);
  MMul_add_01_add_cast_3 <= resize(selector_out_4(1), 26);
  MMul_add_01_add_temp_1 <= MMul_add_01_add_cast_2 + MMul_add_01_add_cast_3;
  
  MMul_add_01_out(1) <= "0111111111111111111111111" WHEN (MMul_add_01_add_temp_1(25) = '0') AND (MMul_add_01_add_temp_1(24) /= '0') ELSE
      "1000000000000000000000000" WHEN (MMul_add_01_add_temp_1(25) = '1') AND (MMul_add_01_add_temp_1(24) /= '1') ELSE
      MMul_add_01_add_temp_1(24 DOWNTO 0);
  MMul_add_01_add_cast_4 <= resize(selector_out_3(2), 26);
  MMul_add_01_add_cast_5 <= resize(selector_out_4(2), 26);
  MMul_add_01_add_temp_2 <= MMul_add_01_add_cast_4 + MMul_add_01_add_cast_5;
  
  MMul_add_01_out(2) <= "0111111111111111111111111" WHEN (MMul_add_01_add_temp_2(25) = '0') AND (MMul_add_01_add_temp_2(24) /= '0') ELSE
      "1000000000000000000000000" WHEN (MMul_add_01_add_temp_2(25) = '1') AND (MMul_add_01_add_temp_2(24) /= '1') ELSE
      MMul_add_01_add_temp_2(24 DOWNTO 0);

  select_2_output : PROCESS (reshape_out)
  BEGIN
    selector_out_5(0) <= reshape_out(2, 0);
    selector_out_5(1) <= reshape_out(2, 1);
    selector_out_5(2) <= reshape_out(2, 2);
  END PROCESS select_2_output;


  MMul_add_12_add_cast <= resize(MMul_add_01_out(0), 26);
  MMul_add_12_add_cast_1 <= resize(selector_out_5(0), 26);
  MMul_add_12_add_temp <= MMul_add_12_add_cast + MMul_add_12_add_cast_1;
  
  s_5(0) <= "0111111111111111111111111" WHEN (MMul_add_12_add_temp(25) = '0') AND (MMul_add_12_add_temp(24) /= '0') ELSE
      "1000000000000000000000000" WHEN (MMul_add_12_add_temp(25) = '1') AND (MMul_add_12_add_temp(24) /= '1') ELSE
      MMul_add_12_add_temp(24 DOWNTO 0);
  MMul_add_12_add_cast_2 <= resize(MMul_add_01_out(1), 26);
  MMul_add_12_add_cast_3 <= resize(selector_out_5(1), 26);
  MMul_add_12_add_temp_1 <= MMul_add_12_add_cast_2 + MMul_add_12_add_cast_3;
  
  s_5(1) <= "0111111111111111111111111" WHEN (MMul_add_12_add_temp_1(25) = '0') AND (MMul_add_12_add_temp_1(24) /= '0') ELSE
      "1000000000000000000000000" WHEN (MMul_add_12_add_temp_1(25) = '1') AND (MMul_add_12_add_temp_1(24) /= '1') ELSE
      MMul_add_12_add_temp_1(24 DOWNTO 0);
  MMul_add_12_add_cast_4 <= resize(MMul_add_01_out(2), 26);
  MMul_add_12_add_cast_5 <= resize(selector_out_5(2), 26);
  MMul_add_12_add_temp_2 <= MMul_add_12_add_cast_4 + MMul_add_12_add_cast_5;
  
  s_5(2) <= "0111111111111111111111111" WHEN (MMul_add_12_add_temp_2(25) = '0') AND (MMul_add_12_add_temp_2(24) /= '0') ELSE
      "1000000000000000000000000" WHEN (MMul_add_12_add_temp_2(25) = '1') AND (MMul_add_12_add_temp_2(24) /= '1') ELSE
      MMul_add_12_add_temp_2(24 DOWNTO 0);

  Gain4_out1GEN_LABEL: FOR d0 IN 0 TO 2 GENERATE
    Gain4_out1(d0) <= s_5(d0);
  END GENERATE;

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain4_out1_1(0) <= to_signed(16#0000000#, 25);
        Gain4_out1_1(1) <= to_signed(16#0000000#, 25);
        Gain4_out1_1(2) <= to_signed(16#0000000#, 25);
      ELSIF enb_1_20_0 = '1' THEN
        Gain4_out1_1(0) <= Gain4_out1(0);
        Gain4_out1_1(1) <= Gain4_out1(1);
        Gain4_out1_1(2) <= Gain4_out1(2);
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  kconst_1 <= to_signed(16#0AAAB#, 18);

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        kconst_2 <= to_signed(16#00000#, 18);
      ELSIF enb_1_20_0 = '1' THEN
        kconst_2 <= kconst_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Gain2_out1(0) <= Gain4_out1_1(0) * kconst_2;
  Gain2_out1(1) <= Gain4_out1_1(1) * kconst_2;
  Gain2_out1(2) <= Gain4_out1_1(2) * kconst_2;

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain2_out1_1(0) <= to_signed(0, 43);
        Gain2_out1_1(1) <= to_signed(0, 43);
        Gain2_out1_1(2) <= to_signed(0, 43);
      ELSIF enb_1_20_0 = '1' THEN
        Gain2_out1_1(0) <= Gain2_out1(0);
        Gain2_out1_1(1) <= Gain2_out1(1);
        Gain2_out1_1(2) <= Gain2_out1(2);
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  
  Gain2_out1_2(0) <= "0111111111111111111111111" WHEN (Gain2_out1_1(0)(42) = '0') AND (Gain2_out1_1(0)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (Gain2_out1_1(0)(42) = '1') AND (Gain2_out1_1(0)(41 DOWNTO 40) /= "11") ELSE
      Gain2_out1_1(0)(40 DOWNTO 16);
  
  Gain2_out1_2(1) <= "0111111111111111111111111" WHEN (Gain2_out1_1(1)(42) = '0') AND (Gain2_out1_1(1)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (Gain2_out1_1(1)(42) = '1') AND (Gain2_out1_1(1)(41 DOWNTO 40) /= "11") ELSE
      Gain2_out1_1(1)(40 DOWNTO 16);
  
  Gain2_out1_2(2) <= "0111111111111111111111111" WHEN (Gain2_out1_1(2)(42) = '0') AND (Gain2_out1_1(2)(41 DOWNTO 40) /= "00") ELSE
      "1000000000000000000000000" WHEN (Gain2_out1_1(2)(42) = '1') AND (Gain2_out1_1(2)(41 DOWNTO 40) /= "11") ELSE
      Gain2_out1_1(2)(40 DOWNTO 16);

  outputgen: FOR k IN 0 TO 2 GENERATE
    alpha_beta_0(k) <= std_logic_vector(Gain2_out1_2(k));
  END GENERATE;

END rtl;

