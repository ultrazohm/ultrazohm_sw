-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\FCS_MPC_3Phase_SPMSM\test_ipcore\hdlsrc\FCS_MPC_3Phase_SPMSM_TEST1\Test_FCS_MPC_3Phase_SPMSM_IP_Core_addr_decoder.vhd
-- Created: 2022-07-08 13:09:20
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Test_FCS_MPC_3Phase_SPMSM_IP_Core_addr_decoder
-- Source Path: Test_FCS_MPC_3Phase_SPMSM_IP_Core/Test_FCS_MPC_3Phase_SPMSM_IP_Core_axi_lite/Test_FCS_MPC_3Phase_SPMSM_IP_Core_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Test_FCS_MPC_3Phase_SPMSM_IP_Core_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_u_dc_link_AXI               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_SampleTime_AXI              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Rs_AXI                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_reciprocal_Ls_AXI           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_psiPM_AXI                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_pole_pairs_AXI              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32
        );
END Test_FCS_MPC_3Phase_SPMSM_IP_Core_addr_decoder;


ARCHITECTURE rtl OF Test_FCS_MPC_3Phase_SPMSM_IP_Core_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_u_dc_link_AXI_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_u_dc_link_AXI_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_u_dc_link_AXI_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_SampleTime_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_SampleTime_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL data_reg_SampleTime_AXI_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Rs_AXI_1_1            : std_logic;  -- ufix1
  SIGNAL reg_enb_Rs_AXI_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_Rs_AXI_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_reciprocal_Ls_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_reciprocal_Ls_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL data_reg_reciprocal_Ls_AXI_1_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_psiPM_AXI_1_1         : std_logic;  -- ufix1
  SIGNAL reg_enb_psiPM_AXI_1_1            : std_logic;  -- ufix1
  SIGNAL data_reg_psiPM_AXI_1_1           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_pole_pairs_AXI_1_1    : std_logic;  -- ufix1
  SIGNAL reg_enb_pole_pairs_AXI_1_1       : std_logic;  -- ufix1
  SIGNAL data_in_pole_pairs_AXI           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_reg_pole_pairs_AXI_1_1      : signed(31 DOWNTO 0);  -- sfix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  data_read <= std_logic_vector(decode_rd_ip_timestamp_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_axi_enable <= data_reg_axi_enable_1_1;

  
  decode_sel_u_dc_link_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_u_dc_link_AXI_1_1 <= decode_sel_u_dc_link_AXI_1_1 AND wr_enb;

  reg_u_dc_link_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_u_dc_link_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_u_dc_link_AXI_1_1 = '1' THEN
        data_reg_u_dc_link_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_u_dc_link_AXI_1_1_process;


  write_u_dc_link_AXI <= std_logic_vector(data_reg_u_dc_link_AXI_1_1);

  
  decode_sel_SampleTime_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_SampleTime_AXI_1_1 <= decode_sel_SampleTime_AXI_1_1 AND wr_enb;

  reg_SampleTime_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_SampleTime_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_SampleTime_AXI_1_1 = '1' THEN
        data_reg_SampleTime_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_SampleTime_AXI_1_1_process;


  write_SampleTime_AXI <= std_logic_vector(data_reg_SampleTime_AXI_1_1);

  
  decode_sel_Rs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_Rs_AXI_1_1 <= decode_sel_Rs_AXI_1_1 AND wr_enb;

  reg_Rs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Rs_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Rs_AXI_1_1 = '1' THEN
        data_reg_Rs_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Rs_AXI_1_1_process;


  write_Rs_AXI <= std_logic_vector(data_reg_Rs_AXI_1_1);

  
  decode_sel_reciprocal_Ls_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_reciprocal_Ls_AXI_1_1 <= decode_sel_reciprocal_Ls_AXI_1_1 AND wr_enb;

  reg_reciprocal_Ls_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_reciprocal_Ls_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_reciprocal_Ls_AXI_1_1 = '1' THEN
        data_reg_reciprocal_Ls_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_reciprocal_Ls_AXI_1_1_process;


  write_reciprocal_Ls_AXI <= std_logic_vector(data_reg_reciprocal_Ls_AXI_1_1);

  
  decode_sel_psiPM_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_psiPM_AXI_1_1 <= decode_sel_psiPM_AXI_1_1 AND wr_enb;

  reg_psiPM_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_psiPM_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_psiPM_AXI_1_1 = '1' THEN
        data_reg_psiPM_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_psiPM_AXI_1_1_process;


  write_psiPM_AXI <= std_logic_vector(data_reg_psiPM_AXI_1_1);

  
  decode_sel_pole_pairs_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_pole_pairs_AXI_1_1 <= decode_sel_pole_pairs_AXI_1_1 AND wr_enb;

  data_in_pole_pairs_AXI <= signed(data_write_unsigned);

  reg_pole_pairs_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_pole_pairs_AXI_1_1 <= to_signed(0, 32);
      ELSIF enb = '1' AND reg_enb_pole_pairs_AXI_1_1 = '1' THEN
        data_reg_pole_pairs_AXI_1_1 <= data_in_pole_pairs_AXI;
      END IF;
    END IF;
  END PROCESS reg_pole_pairs_AXI_1_1_process;


  write_pole_pairs_AXI <= std_logic_vector(data_reg_pole_pairs_AXI_1_1);

END rtl;

