-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Transformation_V11\Trans_123_dq_V11_ip_src_Trans_123_dq_fix_V11.vhd
-- Created: 2019-08-12 22:42:56
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2e-08
-- Target subsystem base rate: 2e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- id                            ce_out        2e-08
-- iq                            ce_out        2e-08
-- id_AXI                        ce_out        2e-08
-- iq_AXI                        ce_out        2e-08
-- i1_AXI                        ce_out        2e-08
-- i3_AXI                        ce_out        2e-08
-- CurrentValid_out              ce_out        2e-08
-- CurrentValid_out_AXI          ce_out        2e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Trans_123_dq_V11_ip_src_Trans_123_dq_fix_V11
-- Source Path: Transformation_V11/Trans_123_dq_fix_V11
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Trans_123_dq_V11_ip_src_Trans_123_dq_fix_V11_pkg.ALL;

ENTITY Trans_123_dq_V11_ip_src_Trans_123_dq_fix_V11 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        i_ph1                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i_ph3                             :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        theta                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        theta_offset_AXI                  :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        CurrentValid_in                   :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        id                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        id_AXI                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        iq_AXI                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i1_AXI                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        i3_AXI                            :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        CurrentValid_out                  :   OUT   std_logic;
        CurrentValid_out_AXI              :   OUT   std_logic
        );
END Trans_123_dq_V11_ip_src_Trans_123_dq_fix_V11;


ARCHITECTURE rtl OF Trans_123_dq_V11_ip_src_Trans_123_dq_fix_V11 IS

  -- Component Declarations
  COMPONENT Trans_123_dq_V11_ip_src_dq_transformation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          b                               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          theta                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          d                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          q                               :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Trans_123_dq_V11_ip_src_dq_transformation
    USE ENTITY work.Trans_123_dq_V11_ip_src_dq_transformation(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_ph1_signed                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_ph1_1                          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Gain1_mul_temp                   : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Gain1_factor                     : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL Gain1_factor_1                   : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL Gain1_out1                       : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Gain1_out1_1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_ph3_signed                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL i_ph3_1                          : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Gain2_mul_temp                   : signed(35 DOWNTO 0);  -- sfix36_En27
  SIGNAL Gain2_factor                     : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL Gain2_factor_1                   : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL Gain2_out1                       : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Gain2_out1_1                     : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Add_out1                         : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL theta_signed                     : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL theta_1                          : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL theta_offset_AXI_signed          : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL theta_offset_AXI_1               : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add1_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add1_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_Limit_Low_out1           : std_logic;
  SIGNAL Compare_Limit_High_out1          : std_logic;
  SIGNAL Compare_Limit_High_out1_1        : std_logic;
  SIGNAL Add1_out1_2                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant_out1                    : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add2_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Compare_Limit_Low_out1_1         : std_logic;
  SIGNAL Add2_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_Limit_High_out1           : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Constant1_out1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add3_out1                        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add_out1_1                       : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Add3_out1_1                      : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Switch_Limit_Low_out1            : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL d                                : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL q                                : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL d_signed                         : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Gain_cast                        : signed(18 DOWNTO 0);  -- sfix19_En11
  SIGNAL Gain_cast_1                      : signed(18 DOWNTO 0);  -- sfix19_En11
  SIGNAL Gain_cast_2                      : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL Gain_out1                        : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Gain_out1_1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL q_signed                         : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL reduced_reg_1                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Gain3_out1                       : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch_reg                   : vector_of_signed18(0 TO 4);  -- sfix18 [5]
  SIGNAL Delay_out1                       : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL delayMatch1_reg                  : vector_of_signed18(0 TO 4);  -- sfix18 [5]
  SIGNAL Delay1_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL DelayValid_reg                   : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL DelayValid_out1                  : std_logic;
  SIGNAL reduced_reg_2                    : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL DelayValid_out1_1                : std_logic;

BEGIN
  -- This Delay is only necessary, becaus of the dq-Transformation. 
  -- dq-Transformation is done with 15 pipeline stages. 
  -- With a buffer of 1, in total 16pipeline stages are useful in order to
  -- indicate following IP-Cores that the current is updated!
  -- ->But take care, the output and input pipelines will come on top!

  u_dq_transformation : Trans_123_dq_V11_ip_src_dq_transformation
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              a => std_logic_vector(i_ph1_1),  -- sfix18_En11
              b => std_logic_vector(Add_out1_1),  -- sfix18_En11
              theta => std_logic_vector(Switch_Limit_Low_out1),  -- sfix24_En20
              d => d,  -- sfix18_En11
              q => q  -- sfix18_En11
              );

  i_ph1_signed <= signed(i_ph1);

  enb <= clk_enable;

  in_0_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_ph1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        i_ph1_1 <= i_ph1_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  -- FCSD for 75674 = 2 X 157 X 241; Total Cost = 5
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  Gain1_factor <= resize(i_ph1_1 & '0', 36);
  -- CSD Encoding (157) : 0101001'01; Cost (Adders) = 3
  Gain1_factor_1 <= ((resize(Gain1_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36) + resize(Gain1_factor & '0' & '0' & '0' & '0' & '0', 36)) - resize(Gain1_factor & '0' & '0', 36)) + Gain1_factor;
  -- CSD Encoding (241) : 10001'0001; Cost (Adders) = 2
  Gain1_mul_temp <= (resize(Gain1_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36) - resize(Gain1_factor_1 & '0' & '0' & '0' & '0', 36)) + Gain1_factor_1;
  Gain1_out1 <= Gain1_mul_temp(34 DOWNTO 17);

  Gain1_outbuff_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain1_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS Gain1_outbuff_out_pipe_process;


  i_ph3_signed <= signed(i_ph3);

  in_1_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        i_ph3_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        i_ph3_1 <= i_ph3_signed;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  -- FCSD for 75674 = 2 X 157 X 241; Total Cost = 5
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  Gain2_factor <= resize(i_ph3_1 & '0', 36);
  -- CSD Encoding (157) : 0101001'01; Cost (Adders) = 3
  Gain2_factor_1 <= ((resize(Gain2_factor & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36) + resize(Gain2_factor & '0' & '0' & '0' & '0' & '0', 36)) - resize(Gain2_factor & '0' & '0', 36)) + Gain2_factor;
  -- CSD Encoding (241) : 10001'0001; Cost (Adders) = 2
  Gain2_mul_temp <= (resize(Gain2_factor_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36) - resize(Gain2_factor_1 & '0' & '0' & '0' & '0', 36)) + Gain2_factor_1;
  Gain2_out1 <= Gain2_mul_temp(33 DOWNTO 16);

  Gain2_outbuff_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain2_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Gain2_out1_1 <= Gain2_out1;
      END IF;
    END IF;
  END PROCESS Gain2_outbuff_out_pipe_process;


  Add_out1 <= Gain1_out1_1 + Gain2_out1_1;

  theta_signed <= signed(theta);

  in_2_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        theta_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        theta_1 <= theta_signed;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  theta_offset_AXI_signed <= signed(theta_offset_AXI);

  in_3_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        theta_offset_AXI_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        theta_offset_AXI_1 <= theta_offset_AXI_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  Add1_out1 <= theta_1 - theta_offset_AXI_1;

  Add1_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add1_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Add1_out_pipe_process;


  
  Compare_Limit_Low_out1 <= '1' WHEN Add1_out1_1 < to_signed(-16#3243F7#, 24) ELSE
      '0';

  
  Compare_Limit_High_out1 <= '1' WHEN Add1_out1_1 >= to_signed(16#3243F7#, 24) ELSE
      '0';

  Compare_Limit_High_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Compare_Limit_High_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_Limit_High_out1_1 <= Compare_Limit_High_out1;
      END IF;
    END IF;
  END PROCESS Compare_Limit_High_out_pipe_process;


  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add1_out1_2 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add1_out1_2 <= Add1_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  Constant_out1 <= to_signed(16#6487ED#, 24);

  Add2_out1 <= Add1_out1_1 - Constant_out1;

  Compare_Limit_Low_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Compare_Limit_Low_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_Limit_Low_out1_1 <= Compare_Limit_Low_out1;
      END IF;
    END IF;
  END PROCESS Compare_Limit_Low_out_pipe_process;


  Add2_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add2_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add2_out1_1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Add2_out_pipe_process;


  
  Switch_Limit_High_out1 <= Add1_out1_2 WHEN Compare_Limit_High_out1_1 = '0' ELSE
      Add2_out1_1;

  Constant1_out1 <= to_signed(16#6487ED#, 24);

  Add3_out1 <= Add1_out1_1 + Constant1_out1;

  Add_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add_out1_1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Add_out_pipe_process;


  Add3_out_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add3_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        Add3_out1_1 <= Add3_out1;
      END IF;
    END IF;
  END PROCESS Add3_out_pipe_process;


  
  Switch_Limit_Low_out1 <= Switch_Limit_High_out1 WHEN Compare_Limit_Low_out1_1 = '0' ELSE
      Add3_out1_1;

  d_signed <= signed(d);

  Gain_cast <= resize(d_signed, 19);
  Gain_cast_1 <=  - (Gain_cast);
  Gain_cast_2 <= Gain_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Gain_out1 <= Gain_cast_2(34 DOWNTO 17);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Gain_out1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Gain_out1_1 <= reduced_reg(1);

  id <= std_logic_vector(Gain_out1_1);

  q_signed <= signed(q);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= q_signed;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Gain3_out1 <= reduced_reg_1(1);

  iq <= std_logic_vector(Gain3_out1);

  id_AXI <= std_logic_vector(Gain_out1_1);

  iq_AXI <= std_logic_vector(Gain3_out1);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= i_ph1_1;
        delayMatch_reg(1 TO 4) <= delayMatch_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay_out1 <= delayMatch_reg(4);

  i1_AXI <= std_logic_vector(Delay_out1);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= i_ph3_1;
        delayMatch1_reg(1 TO 4) <= delayMatch1_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Delay1_out1 <= delayMatch1_reg(4);

  i3_AXI <= std_logic_vector(Delay1_out1);

  DelayValid_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DelayValid_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        DelayValid_reg(0) <= CurrentValid_in;
        DelayValid_reg(1 TO 16) <= DelayValid_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS DelayValid_process;

  DelayValid_out1 <= DelayValid_reg(16);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= DelayValid_out1;
        reduced_reg_2(1 TO 3) <= reduced_reg_2(0 TO 2);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  DelayValid_out1_1 <= reduced_reg_2(3);

  ce_out <= clk_enable;

  CurrentValid_out <= DelayValid_out1_1;

  CurrentValid_out_AXI <= DelayValid_out1_1;

END rtl;

