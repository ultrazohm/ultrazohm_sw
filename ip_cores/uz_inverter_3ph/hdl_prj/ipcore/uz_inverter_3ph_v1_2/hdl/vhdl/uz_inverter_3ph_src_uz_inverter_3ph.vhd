-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\valen\Documents\repos\UZ\ultrazohm_sw\ip_cores\uz_inverter_3ph\hdl_prj\hdlsrc\uz_inverter_3phgm\uz_inverter_3ph_src_uz_inverter_3ph.vhd
-- Created: 2022-05-08 18:42:59
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 4e-09
-- Target subsystem base rate: 4e-09
-- Explicit user oversample request: 25x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- u_abc_ps_0                    ce_out        5e-07
-- u_abc_ps_1                    ce_out        5e-07
-- u_abc_ps_2                    ce_out        5e-07
-- u_abc_pl_0                    ce_out        5e-07
-- u_abc_pl_1                    ce_out        5e-07
-- u_abc_pl_2                    ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_inverter_3ph_src_uz_inverter_3ph
-- Source Path: uz_inverter_3phgm/uz_inverter_3ph
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_inverter_3ph_src_uz_inverter_3ph_pkg.ALL;

ENTITY uz_inverter_3ph_src_uz_inverter_3ph IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        switch_pspl_abc                   :   IN    std_logic;
        switch_pspl_gate                  :   IN    std_logic;
        i_abc_ps_0                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_ps_2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_abc_pl_0                        :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc_pl_1                        :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        i_abc_pl_2                        :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        gate_ps_0                         :   IN    std_logic;  -- boolean
        gate_ps_1                         :   IN    std_logic;  -- boolean
        gate_ps_2                         :   IN    std_logic;  -- boolean
        gate_ps_3                         :   IN    std_logic;  -- boolean
        gate_ps_4                         :   IN    std_logic;  -- boolean
        gate_ps_5                         :   IN    std_logic;  -- boolean
        gate_pl_0                         :   IN    std_logic;  -- ufix1
        gate_pl_1                         :   IN    std_logic;  -- ufix1
        gate_pl_2                         :   IN    std_logic;  -- ufix1
        gate_pl_3                         :   IN    std_logic;  -- ufix1
        gate_pl_4                         :   IN    std_logic;  -- ufix1
        gate_pl_5                         :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        u_abc_ps_0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_ps_1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_ps_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        u_abc_pl_0                        :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc_pl_1                        :   OUT   std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
        u_abc_pl_2                        :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
        );
END uz_inverter_3ph_src_uz_inverter_3ph;


ARCHITECTURE rtl OF uz_inverter_3ph_src_uz_inverter_3ph IS

  -- Component Declarations
  COMPONENT uz_inverter_3ph_src_uz_inverter_3ph_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_25_0                      :   OUT   std_logic;
          enb_1_25_1                      :   OUT   std_logic;
          enb_1_125_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_Compare_To_Constant
    GENERIC( const                        : integer
             );
    PORT( u                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_relop_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En12
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_dot_product_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          in2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_dot_product_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in1                             :   IN    vector_of_std_logic_vector32(0 TO 1);  -- single [2]
          in2                             :   IN    vector_of_std_logic_vector32(0 TO 1);  -- single [2]
          out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_Subsystem1
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic;  -- ufix1
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_Subsystem1_block
    GENERIC( Index                        : integer
             );
    PORT( In1                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          In2                             :   IN    std_logic;  -- ufix1
          In3                             :   IN    std_logic_vector(0 TO 11);  -- boolean [12]
          Out1                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_inverter_3ph_src_uz_inverter_3ph_tc
    USE ENTITY work.uz_inverter_3ph_src_uz_inverter_3ph_tc(rtl);

  FOR ALL : uz_inverter_3ph_src_Compare_To_Constant
    USE ENTITY work.uz_inverter_3ph_src_Compare_To_Constant(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_double2single
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_double2single(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_relop_single
    USE ENTITY work.uz_inverter_3ph_src_nfp_relop_single(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_single2double
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_inverter_3ph_src_dot_product_1
    USE ENTITY work.uz_inverter_3ph_src_dot_product_1(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_add_single
    USE ENTITY work.uz_inverter_3ph_src_nfp_add_single(rtl);

  FOR ALL : uz_inverter_3ph_src_dot_product_2
    USE ENTITY work.uz_inverter_3ph_src_dot_product_2(rtl);

  FOR ALL : uz_inverter_3ph_src_Subsystem1
    USE ENTITY work.uz_inverter_3ph_src_Subsystem1(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_uminus_single
    USE ENTITY work.uz_inverter_3ph_src_nfp_uminus_single(rtl);

  FOR ALL : uz_inverter_3ph_src_Subsystem1_block
    USE ENTITY work.uz_inverter_3ph_src_Subsystem1_block(rtl);

  FOR ALL : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    USE ENTITY work.uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12(rtl);

  -- Signals
  SIGNAL enb_1_125_1                      : std_logic;
  SIGNAL enb_1_25_0                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_25_1                       : std_logic;
  SIGNAL configuration1                   : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Valid_Out1_out1                  : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Valid_Out1_out1_1                : std_logic;
  SIGNAL Valid_Out1_out1_2                : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL reduced_reg_next                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Valid_Out1_out1_3                : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL delayMatch9_reg_next             : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_out1_1                    : std_logic;
  SIGNAL X0_out1                          : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL delayMatch10_reg_next            : std_logic_vector(0 TO 4);  -- ufix1 [5]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL FixPt_Constant_out1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Wrap_To_Zero_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL FixPt_Sum1_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL FixPt_Switch_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch12_reg                 : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL delayMatch12_reg_next            : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Wrap_To_Zero_out1_1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Output_out1                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL State_Delay_ctrl_const_out       : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch11_reg_next            : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL State_Delay_ctrl_const_out_1     : std_logic;
  SIGNAL State_Delay_ctrl_delay_out       : std_logic;
  SIGNAL State_Delay_Initial_Val_out      : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Delay_out1_2                     : std_logic;
  SIGNAL Constant_out1_1                  : std_logic;  -- ufix1
  SIGNAL const_expression                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL G_PL                             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL G_PL_1                           : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL G_PL_0                           : std_logic;  -- ufix1
  SIGNAL constZero                        : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constZero_0                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne                         : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL G_PL_1_1                         : std_logic;  -- ufix1
  SIGNAL constZero_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_PL_2                           : std_logic;  -- ufix1
  SIGNAL constZero_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_PL_3                           : std_logic;  -- ufix1
  SIGNAL constZero_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_PL_4                           : std_logic;  -- ufix1
  SIGNAL constZero_4                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_PL_5                           : std_logic;  -- ufix1
  SIGNAL constZero_5                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G                                : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL G_1                              : std_logic_vector(0 TO 5);  -- boolean [6]
  SIGNAL G_0                              : std_logic;
  SIGNAL constZero_6                      : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constZero_0_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_1                       : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL G_1_1                            : std_logic;
  SIGNAL constZero_1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_2                              : std_logic;
  SIGNAL constZero_2_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_3                              : std_logic;
  SIGNAL constZero_3_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_4                              : std_logic;
  SIGNAL constZero_4_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_5                              : std_logic;
  SIGNAL constZero_5_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL switch_pspl_gate_1               : std_logic;
  SIGNAL constOne_0                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_0_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_1_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_1_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_2                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_2_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_3                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_3_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_4                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_4_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_5                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_5_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_6                              : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL constOne_0_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_0_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_1_2                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_1_3                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_2_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_2_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_3_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_3_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_4_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_4_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL constOne_5_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_5_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL G_7                              : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL G_8                              : vector_of_std_logic_vector64(0 TO 5);  -- ufix64 [6]
  SIGNAL S1                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S1_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition111_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S1_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_3                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_expression_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_4                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S4                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S4_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition141_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S4_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_5                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_expression_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_6                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S6                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S6_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition161_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S6_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_7                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_expression_3               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_8                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S3                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S3_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition131_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S3_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_9                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_expression_4               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_10                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S2                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S2_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition121_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S2_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_11                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_expression_5               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_12                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S5                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL S5_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition151_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL S5_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_13                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Default_Index_out1               : std_logic;  -- ufix1
  SIGNAL Mode_Vector2_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Mode_Vector1_out1                : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL configuration1_1                 : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL configuration2                   : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL switch_pspl_abc_1                : std_logic;
  SIGNAL Iabc_PL                          : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Iabc_PL_1                        : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Iabc_PL_2                        : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Iabc                             : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Iabc_1                           : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL switch_pspl_abc_2                : std_logic;
  SIGNAL Data_Type_Conversion4_out1       : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Data_Type_Conversion3_out1       : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Switch_out1                      : vector_of_std_logic_vector64(0 TO 2);  -- ufix64 [3]
  SIGNAL Iab                              : vector_of_std_logic_vector64(0 TO 1);  -- ufix64 [2]
  SIGNAL Ia                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition91_bypass_reg     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Ia_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition9_out1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c8_Bias_out1                     : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL Bias_out1                        : matrix_of_std_logic_vector32(0 TO 11, 0 TO 1);  -- ufix32 [12x2]
  SIGNAL c533_Bias_out1                   : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch6_reg                  : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL delayMatch6_reg_next             : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL c533_Bias_out1_1                 : vector_of_std_logic_vector32(0 TO 23);  -- ufix32 [24]
  SIGNAL Bias_out1_1                      : matrix_of_std_logic_vector32(0 TO 11, 0 TO 1);  -- ufix32 [12x2]
  SIGNAL Ib                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition101_bypass_reg    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Ib_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition10_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL col3                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col6                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col7                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL col11                            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Selector_out1                    : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL active_configuration             : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL dot_product12                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row11                            : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product11                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product10                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product9                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product8                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row7                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product7                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row6                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product6                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product5                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product4                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL row3                             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL dot_product3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dot_product2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion_out1_1      : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Subsystem2_out1                  : std_logic;  -- ufix1
  SIGNAL State_Delay_out1                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL tmp6                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp4                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL modes                            : std_logic_vector(0 TO 11);  -- boolean [12]
  SIGNAL Subsystem1_out1                  : std_logic;  -- ufix1
  SIGNAL dot_product1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Output_Sum_out1                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_bypass_reg           : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_bypass_reg_next      : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Update_out1                : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL State_Delay_out                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Switch3_out1                     : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch7_reg                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch7_reg_next             : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Switch3_out1_1                   : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Delay3_bypass_reg                : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Delay3_bypass_reg_next           : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Switch3_out1_2                   : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Delay3_out1                      : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Switch_out1_1                    : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL dot_product1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Output_Demux_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch13_reg                 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL delayMatch13_reg_next            : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Output_Demux_out1_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition17_bypass_reg     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Uab                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL dot_product2_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Output_Demux_out2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch14_reg                 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL delayMatch14_reg_next            : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Output_Demux_out2_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition18_bypass_reg     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Ubc                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL dot_product3_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Output_Demux_out3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Output_Demux_out3_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Rate_Transition19_bypass_reg     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Uca                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_out1_2      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t_bypass_reg                     : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL t_bypass_reg_next                : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion_out1_3      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_std_logic_vector25(0 TO 2);  -- ufix25 [3]
  SIGNAL Data_Type_Conversion1_out1_1     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL t1_bypass_reg                    : vector_of_signed25(0 TO 2);  -- sfix25 [3]
  SIGNAL t1_bypass_reg_next               : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]
  SIGNAL Data_Type_Conversion1_out1_2     : vector_of_signed25(0 TO 2);  -- sfix25_En12 [3]

BEGIN
  -- Interface System
  -- 
  -- U(k)

  u_uz_inverter_3ph_tc : uz_inverter_3ph_src_uz_inverter_3ph_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_25_0 => enb_1_25_0,
              enb_1_25_1 => enb_1_25_1,
              enb_1_125_1 => enb_1_125_1
              );

  u_Compare_To_Constant : uz_inverter_3ph_src_Compare_To_Constant
    GENERIC MAP( const => 0
                 )
    PORT MAP( u => Output_out1,  -- uint8
              y => Compare_To_Constant_out1
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => S1,  -- double
              nfp_out => S1_1  -- single
              );

  u_nfp_relop_comp : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => S1_2,  -- single
              nfp_in2 => const_3,  -- single
              nfp_out1 => modes(1)
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_1 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => S4,  -- double
              nfp_out => S4_1  -- single
              );

  u_nfp_relop_comp_1 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => S4_2,  -- single
              nfp_in2 => const_5,  -- single
              nfp_out1 => modes(3)
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_2 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => S6,  -- double
              nfp_out => S6_1  -- single
              );

  u_nfp_relop_comp_2 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => S6_2,  -- single
              nfp_in2 => const_7,  -- single
              nfp_out1 => modes(5)
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_3 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => S3,  -- double
              nfp_out => S3_1  -- single
              );

  u_nfp_relop_comp_3 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => S3_2,  -- single
              nfp_in2 => const_9,  -- single
              nfp_out1 => modes(7)
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_4 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => S2,  -- double
              nfp_out => S2_1  -- single
              );

  u_nfp_relop_comp_4 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => S2_2,  -- single
              nfp_in2 => const_11,  -- single
              nfp_out1 => modes(9)
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_5 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => S5,  -- double
              nfp_out => S5_1  -- single
              );

  u_nfp_relop_comp_5 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => S5_2,  -- single
              nfp_in2 => const_13,  -- single
              nfp_out1 => modes(11)
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_sfix_25_En12_to_double : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(0)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion4_out1(0)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_sfix_25_En12_to_double_1 : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(1)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion4_out1(1)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(0),  -- single
              nfp_out => Data_Type_Conversion3_out1(0)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_1 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(1),  -- single
              nfp_out => Data_Type_Conversion3_out1(1)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_sfix_25_En12_to_double_2 : uz_inverter_3ph_src_nfp_convert_sfix_25_En12_to_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => std_logic_vector(Iabc_PL_2(2)),  -- sfix25_En12
              nfp_out => Data_Type_Conversion4_out1(2)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_2 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iabc_1(2),  -- single
              nfp_out => Data_Type_Conversion3_out1(2)  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_6 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iab(0),  -- double
              nfp_out => Ia  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_7 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Iab(1),  -- double
              nfp_out => Ib  -- single
              );

  u_dot_product_1 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(15),  -- single
              in2 => Rate_Transition10_out1,  -- single
              out1 => dot_product12  -- single
              );

  u_nfp_add_comp : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product12,  -- single
              nfp_in2 => Selector_out1(11),  -- single
              nfp_out => Output_Sum_out1(11)  -- single
              );

  u_dot_product_2 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row11,  -- single [2]
              in2 => col11,  -- single [2]
              out1 => dot_product11  -- single
              );

  u_nfp_add_comp_1 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product11,  -- single
              nfp_in2 => Selector_out1(10),  -- single
              nfp_out => Output_Sum_out1(10)  -- single
              );

  u_dot_product_1_1 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(6),  -- single
              in2 => Rate_Transition9_out1,  -- single
              out1 => dot_product10  -- single
              );

  u_nfp_add_comp_2 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product10,  -- single
              nfp_in2 => Selector_out1(9),  -- single
              nfp_out => Output_Sum_out1(9)  -- single
              );

  u_dot_product_1_2 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(13),  -- single
              in2 => Rate_Transition10_out1,  -- single
              out1 => dot_product9  -- single
              );

  u_nfp_add_comp_3 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product9,  -- single
              nfp_in2 => Selector_out1(8),  -- single
              nfp_out => Output_Sum_out1(8)  -- single
              );

  u_dot_product_1_3 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(12),  -- single
              in2 => Rate_Transition10_out1,  -- single
              out1 => dot_product8  -- single
              );

  u_nfp_add_comp_4 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product8,  -- single
              nfp_in2 => Selector_out1(7),  -- single
              nfp_out => Output_Sum_out1(7)  -- single
              );

  u_dot_product_2_1 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row7,  -- single [2]
              in2 => col7,  -- single [2]
              out1 => dot_product7  -- single
              );

  u_nfp_add_comp_5 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product7,  -- single
              nfp_in2 => Selector_out1(6),  -- single
              nfp_out => Output_Sum_out1(6)  -- single
              );

  u_dot_product_2_2 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row6,  -- single [2]
              in2 => col6,  -- single [2]
              out1 => dot_product6  -- single
              );

  u_nfp_add_comp_6 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product6,  -- single
              nfp_in2 => Selector_out1(5),  -- single
              nfp_out => Output_Sum_out1(5)  -- single
              );

  u_dot_product_1_4 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(3),  -- single
              in2 => Rate_Transition9_out1,  -- single
              out1 => dot_product5  -- single
              );

  u_nfp_add_comp_7 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product5,  -- single
              nfp_in2 => Selector_out1(4),  -- single
              nfp_out => Output_Sum_out1(4)  -- single
              );

  u_dot_product_1_5 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(2),  -- single
              in2 => Rate_Transition9_out1,  -- single
              out1 => dot_product4  -- single
              );

  u_nfp_add_comp_8 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product4,  -- single
              nfp_in2 => Selector_out1(3),  -- single
              nfp_out => Output_Sum_out1(3)  -- single
              );

  u_dot_product_2_3 : uz_inverter_3ph_src_dot_product_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => row3,  -- single [2]
              in2 => col3,  -- single [2]
              out1 => dot_product3  -- single
              );

  u_nfp_add_comp_9 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product3,  -- single
              nfp_in2 => Selector_out1(2),  -- single
              nfp_out => Output_Sum_out1(2)  -- single
              );

  u_dot_product_1_6 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(8),  -- single
              in2 => Rate_Transition10_out1,  -- single
              out1 => dot_product2  -- single
              );

  u_nfp_add_comp_10 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product2,  -- single
              nfp_in2 => Selector_out1(1),  -- single
              nfp_out => Output_Sum_out1(1)  -- single
              );

  u_Subsystem2 : uz_inverter_3ph_src_Subsystem1
    GENERIC MAP( Index => 1
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1_1,  -- boolean [12]
              In2 => Default_Index_out1,  -- ufix1
              In3 => Mode_Vector2_out1,  -- boolean [12]
              Out1 => Subsystem2_out1  -- ufix1
              );

  u_nfp_add_comp_11 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => State_Delay_out1(2),  -- single
              nfp_in2 => const_expression_5,  -- single
              nfp_out => tmp6  -- single
              );

  u_nfp_relop_comp_6 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp6,  -- single
              nfp_in2 => const_12,  -- single
              nfp_out1 => modes(10)
              );

  u_nfp_uminus_comp : uz_inverter_3ph_src_nfp_uminus_single
    PORT MAP( nfp_in => State_Delay_out1(0),  -- single
              nfp_out => out0  -- single
              );

  u_nfp_add_comp_12 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0,  -- single
              nfp_in2 => const_expression_4,  -- single
              nfp_out => tmp5  -- single
              );

  u_nfp_relop_comp_7 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp5,  -- single
              nfp_in2 => const_10,  -- single
              nfp_out1 => modes(8)
              );

  u_nfp_add_comp_13 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => State_Delay_out1(1),  -- single
              nfp_in2 => const_expression_3,  -- single
              nfp_out => tmp4  -- single
              );

  u_nfp_relop_comp_8 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp4,  -- single
              nfp_in2 => const_8,  -- single
              nfp_out1 => modes(6)
              );

  u_nfp_uminus_comp_1 : uz_inverter_3ph_src_nfp_uminus_single
    PORT MAP( nfp_in => State_Delay_out1(2),  -- single
              nfp_out => out0_1  -- single
              );

  u_nfp_add_comp_14 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_1,  -- single
              nfp_in2 => const_expression_2,  -- single
              nfp_out => tmp3  -- single
              );

  u_nfp_relop_comp_9 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp3,  -- single
              nfp_in2 => const_6,  -- single
              nfp_out1 => modes(4)
              );

  u_nfp_uminus_comp_2 : uz_inverter_3ph_src_nfp_uminus_single
    PORT MAP( nfp_in => State_Delay_out1(1),  -- single
              nfp_out => out0_2  -- single
              );

  u_nfp_add_comp_15 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => out0_2,  -- single
              nfp_in2 => const_expression_1,  -- single
              nfp_out => tmp2  -- single
              );

  u_nfp_relop_comp_10 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp2,  -- single
              nfp_in2 => const_4,  -- single
              nfp_out1 => modes(2)
              );

  u_nfp_add_comp_16 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => State_Delay_out1(0),  -- single
              nfp_in2 => const_expression,  -- single
              nfp_out => tmp1  -- single
              );

  u_nfp_relop_comp_11 : uz_inverter_3ph_src_nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tmp1,  -- single
              nfp_in2 => const_1,  -- single
              nfp_out1 => modes(0)
              );

  u_Subsystem1 : uz_inverter_3ph_src_Subsystem1_block
    GENERIC MAP( Index => 0
                 )
    PORT MAP( In1 => Data_Type_Conversion_out1_1,  -- boolean [12]
              In2 => Subsystem2_out1,  -- ufix1
              In3 => Mode_Vector1_out1,  -- boolean [12]
              Out1 => Subsystem1_out1  -- ufix1
              );

  u_dot_product_1_7 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => active_configuration(0),  -- single
              in2 => Rate_Transition9_out1,  -- single
              out1 => dot_product1  -- single
              );

  u_nfp_add_comp_17 : uz_inverter_3ph_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => dot_product1,  -- single
              nfp_in2 => Selector_out1(0),  -- single
              nfp_out => Output_Sum_out1(0)  -- single
              );

  u_dot_product_1_8 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1(0),  -- single
              in2 => Switch_out1_1(0),  -- single
              out1 => dot_product1_1  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_3 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Uab,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_8 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion6_out1,  -- double
              nfp_out => Data_Type_Conversion_out1_2(0)  -- single
              );

  u_dot_product_1_9 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1(1),  -- single
              in2 => Switch_out1_1(1),  -- single
              out1 => dot_product2_1  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_4 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Ubc,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_9 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion8_out1,  -- double
              nfp_out => Data_Type_Conversion_out1_2(1)  -- single
              );

  u_dot_product_1_10 : uz_inverter_3ph_src_dot_product_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in1 => configuration1(2),  -- single
              in2 => Switch_out1_1(2),  -- single
              out1 => dot_product3_1  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_single2double_5 : uz_inverter_3ph_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Uca,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double2single_10 : uz_inverter_3ph_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion7_out1,  -- double
              nfp_out => Data_Type_Conversion_out1_2(2)  -- single
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double_to_fixed_25_En12 : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion6_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1(0)  -- sfix25_En12
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double_to_fixed_25_En12_1 : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion8_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1(1)  -- sfix25_En12
              );

  u_uz_inverter_3phgm_uz_inverter_3ph_nfp_convert_double_to_fixed_25_En12_2 : uz_inverter_3ph_src_nfp_convert_double_to_fixed_25_En12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Data_Type_Conversion7_out1,  -- double
              nfp_out => Data_Type_Conversion1_out1(2)  -- sfix25_En12
              );

  configuration1(0) <= X"3f800000";
  configuration1(1) <= X"3f800000";
  configuration1(2) <= X"3f800000";

  Valid_Out1_out1 <= '1';

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= '0';
      delayMatch1_reg(1) <= '0';
      delayMatch1_reg(2) <= '0';
      delayMatch1_reg(3) <= '0';
      delayMatch1_reg(4) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Valid_Out1_out1_1 <= delayMatch1_reg(4);
  delayMatch1_reg_next(0) <= Valid_Out1_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Valid_Out1_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        Valid_Out1_out1_2 <= Valid_Out1_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg(0) <= '0';
      reduced_reg(1) <= '0';
      reduced_reg(2) <= '0';
      reduced_reg(3) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Valid_Out1_out1_3 <= reduced_reg(3);
  reduced_reg_next(0) <= Valid_Out1_out1_2;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);

  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch9_reg(0) <= '0';
      delayMatch9_reg(1) <= '0';
      delayMatch9_reg(2) <= '0';
      delayMatch9_reg(3) <= '0';
      delayMatch9_reg(4) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
        delayMatch9_reg(2) <= delayMatch9_reg_next(2);
        delayMatch9_reg(3) <= delayMatch9_reg_next(3);
        delayMatch9_reg(4) <= delayMatch9_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Delay2_out1 <= delayMatch9_reg(4);
  delayMatch9_reg_next(0) <= Valid_Out1_out1_3;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);
  delayMatch9_reg_next(2) <= delayMatch9_reg(1);
  delayMatch9_reg_next(3) <= delayMatch9_reg(2);
  delayMatch9_reg_next(4) <= delayMatch9_reg(3);

  Delay2_out1_1 <= Delay2_out1;

  X0_out1(0) <= X"c1419997";
  X0_out1(1) <= X"413f3330";
  X0_out1(2) <= X"41426664";
  X0_out1(3) <= X"358636d3";
  X0_out1(4) <= X"c11ffee9";
  X0_out1(5) <= X"35c952b1";
  X0_out1(6) <= X"c16ffee8";
  X0_out1(7) <= X"b97b2249";
  X0_out1(8) <= X"37c8e83a";
  X0_out1(9) <= X"37ca2a5a";
  X0_out1(10) <= X"37ca95b9";
  X0_out1(11) <= X"40a00227";

  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg(0) <= '0';
      delayMatch10_reg(1) <= '0';
      delayMatch10_reg(2) <= '0';
      delayMatch10_reg(3) <= '0';
      delayMatch10_reg(4) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
        delayMatch10_reg(2) <= delayMatch10_reg_next(2);
        delayMatch10_reg(3) <= delayMatch10_reg_next(3);
        delayMatch10_reg(4) <= delayMatch10_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Delay_out1 <= delayMatch10_reg(4);
  delayMatch10_reg_next(0) <= Valid_Out1_out1_2;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);
  delayMatch10_reg_next(2) <= delayMatch10_reg(1);
  delayMatch10_reg_next(3) <= delayMatch10_reg(2);
  delayMatch10_reg_next(4) <= delayMatch10_reg(3);

  Delay_out1_1 <= Delay_out1;

  FixPt_Constant_out1 <= to_unsigned(16#01#, 8);

  Constant_out1 <= to_unsigned(16#00#, 8);

  FixPt_Sum1_out1 <= Wrap_To_Zero_out1 + FixPt_Constant_out1;

  
  switch_compare_1 <= '1' WHEN FixPt_Sum1_out1 > to_unsigned(16#04#, 8) ELSE
      '0';

  
  FixPt_Switch_out1 <= FixPt_Sum1_out1 WHEN switch_compare_1 = '0' ELSE
      Constant_out1;

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Wrap_To_Zero_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        Wrap_To_Zero_out1 <= FixPt_Switch_out1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch12_reg(0) <= to_unsigned(16#00#, 8);
      delayMatch12_reg(1) <= to_unsigned(16#00#, 8);
      delayMatch12_reg(2) <= to_unsigned(16#00#, 8);
      delayMatch12_reg(3) <= to_unsigned(16#00#, 8);
      delayMatch12_reg(4) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch12_reg(0) <= delayMatch12_reg_next(0);
        delayMatch12_reg(1) <= delayMatch12_reg_next(1);
        delayMatch12_reg(2) <= delayMatch12_reg_next(2);
        delayMatch12_reg(3) <= delayMatch12_reg_next(3);
        delayMatch12_reg(4) <= delayMatch12_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  Wrap_To_Zero_out1_1 <= delayMatch12_reg(4);
  delayMatch12_reg_next(0) <= Wrap_To_Zero_out1;
  delayMatch12_reg_next(1) <= delayMatch12_reg(0);
  delayMatch12_reg_next(2) <= delayMatch12_reg(1);
  delayMatch12_reg_next(3) <= delayMatch12_reg(2);
  delayMatch12_reg_next(4) <= delayMatch12_reg(3);

  Output_out1 <= std_logic_vector(Wrap_To_Zero_out1_1);

  Bitwise_Operator_out1 <= Delay_out1_1 AND Compare_To_Constant_out1;

  State_Delay_ctrl_const_out <= '1';

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg(0) <= '0';
      delayMatch11_reg(1) <= '0';
      delayMatch11_reg(2) <= '0';
      delayMatch11_reg(3) <= '0';
      delayMatch11_reg(4) <= '0';
      delayMatch11_reg(5) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  State_Delay_ctrl_const_out_1 <= delayMatch11_reg(5);
  delayMatch11_reg_next(0) <= State_Delay_ctrl_const_out;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);

  State_Delay_ctrl_delay_out <= State_Delay_ctrl_const_out_1;

  State_Delay_Initial_Val_out(0) <= X"c1419997";
  State_Delay_Initial_Val_out(1) <= X"413f3330";
  State_Delay_Initial_Val_out(2) <= X"41426664";
  State_Delay_Initial_Val_out(3) <= X"358636d3";
  State_Delay_Initial_Val_out(4) <= X"c11ffee9";
  State_Delay_Initial_Val_out(5) <= X"35c952b1";
  State_Delay_Initial_Val_out(6) <= X"c16ffee8";
  State_Delay_Initial_Val_out(7) <= X"b97b2249";
  State_Delay_Initial_Val_out(8) <= X"37c8e83a";
  State_Delay_Initial_Val_out(9) <= X"37ca2a5a";
  State_Delay_Initial_Val_out(10) <= X"37ca95b9";
  State_Delay_Initial_Val_out(11) <= X"40a00227";

  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_2 <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  Constant_out1_1 <= '0';

  const_expression <= X"c1400000";

  const_1 <= X"3f4ccccd";

  G_PL(0) <= gate_pl_0;
  G_PL(1) <= gate_pl_1;
  G_PL(2) <= gate_pl_2;
  G_PL(3) <= gate_pl_3;
  G_PL(4) <= gate_pl_4;
  G_PL(5) <= gate_pl_5;

  G_PL_1 <= G_PL;

  G_PL_0 <= G_PL_1(0);

  constZero(0) <= X"0000000000000000";
  constZero(1) <= X"0000000000000000";
  constZero(2) <= X"0000000000000000";
  constZero(3) <= X"0000000000000000";
  constZero(4) <= X"0000000000000000";
  constZero(5) <= X"0000000000000000";

  constZero_0 <= constZero(0);

  constOne(0) <= X"3ff0000000000000";
  constOne(1) <= X"3ff0000000000000";
  constOne(2) <= X"3ff0000000000000";
  constOne(3) <= X"3ff0000000000000";
  constOne(4) <= X"3ff0000000000000";
  constOne(5) <= X"3ff0000000000000";

  G_PL_1_1 <= G_PL_1(1);

  constZero_1 <= constZero(1);

  G_PL_2 <= G_PL_1(2);

  constZero_2 <= constZero(2);

  G_PL_3 <= G_PL_1(3);

  constZero_3 <= constZero(3);

  G_PL_4 <= G_PL_1(4);

  constZero_4 <= constZero(4);

  G_PL_5 <= G_PL_1(5);

  constZero_5 <= constZero(5);

  G(0) <= gate_ps_0;
  G(1) <= gate_ps_1;
  G(2) <= gate_ps_2;
  G(3) <= gate_ps_3;
  G(4) <= gate_ps_4;
  G(5) <= gate_ps_5;

  G_1 <= G;

  G_0 <= G_1(0);

  constZero_6(0) <= X"0000000000000000";
  constZero_6(1) <= X"0000000000000000";
  constZero_6(2) <= X"0000000000000000";
  constZero_6(3) <= X"0000000000000000";
  constZero_6(4) <= X"0000000000000000";
  constZero_6(5) <= X"0000000000000000";

  constZero_0_1 <= constZero_6(0);

  constOne_1(0) <= X"3ff0000000000000";
  constOne_1(1) <= X"3ff0000000000000";
  constOne_1(2) <= X"3ff0000000000000";
  constOne_1(3) <= X"3ff0000000000000";
  constOne_1(4) <= X"3ff0000000000000";
  constOne_1(5) <= X"3ff0000000000000";

  G_1_1 <= G_1(1);

  constZero_1_1 <= constZero_6(1);

  G_2 <= G_1(2);

  constZero_2_1 <= constZero_6(2);

  G_3 <= G_1(3);

  constZero_3_1 <= constZero_6(3);

  G_4 <= G_1(4);

  constZero_4_1 <= constZero_6(4);

  G_5 <= G_1(5);

  constZero_5_1 <= constZero_6(5);

  switch_pspl_gate_1 <= switch_pspl_gate;

  constOne_0 <= constOne(0);

  
  G_0_1 <= constZero_0 WHEN G_PL_0 = '0' ELSE
      constOne_0;

  constOne_1_1 <= constOne(1);

  
  G_1_2 <= constZero_1 WHEN G_PL_1_1 = '0' ELSE
      constOne_1_1;

  constOne_2 <= constOne(2);

  
  G_2_1 <= constZero_2 WHEN G_PL_2 = '0' ELSE
      constOne_2;

  constOne_3 <= constOne(3);

  
  G_3_1 <= constZero_3 WHEN G_PL_3 = '0' ELSE
      constOne_3;

  constOne_4 <= constOne(4);

  
  G_4_1 <= constZero_4 WHEN G_PL_4 = '0' ELSE
      constOne_4;

  constOne_5 <= constOne(5);

  
  G_5_1 <= constZero_5 WHEN G_PL_5 = '0' ELSE
      constOne_5;

  G_6(0) <= G_0_1;
  G_6(1) <= G_1_2;
  G_6(2) <= G_2_1;
  G_6(3) <= G_3_1;
  G_6(4) <= G_4_1;
  G_6(5) <= G_5_1;

  constOne_0_1 <= constOne_1(0);

  
  G_0_2 <= constZero_0_1 WHEN G_0 = '0' ELSE
      constOne_0_1;

  constOne_1_2 <= constOne_1(1);

  
  G_1_3 <= constZero_1_1 WHEN G_1_1 = '0' ELSE
      constOne_1_2;

  constOne_2_1 <= constOne_1(2);

  
  G_2_2 <= constZero_2_1 WHEN G_2 = '0' ELSE
      constOne_2_1;

  constOne_3_1 <= constOne_1(3);

  
  G_3_2 <= constZero_3_1 WHEN G_3 = '0' ELSE
      constOne_3_1;

  constOne_4_1 <= constOne_1(4);

  
  G_4_2 <= constZero_4_1 WHEN G_4 = '0' ELSE
      constOne_4_1;

  constOne_5_1 <= constOne_1(5);

  
  G_5_2 <= constZero_5_1 WHEN G_5 = '0' ELSE
      constOne_5_1;

  G_7(0) <= G_0_2;
  G_7(1) <= G_1_3;
  G_7(2) <= G_2_2;
  G_7(3) <= G_3_2;
  G_7(4) <= G_4_2;
  G_7(5) <= G_5_2;

  
  G_8(0) <= G_6(0) WHEN switch_pspl_gate_1 = '0' ELSE
      G_7(0);
  
  G_8(1) <= G_6(1) WHEN switch_pspl_gate_1 = '0' ELSE
      G_7(1);
  
  G_8(2) <= G_6(2) WHEN switch_pspl_gate_1 = '0' ELSE
      G_7(2);
  
  G_8(3) <= G_6(3) WHEN switch_pspl_gate_1 = '0' ELSE
      G_7(3);
  
  G_8(4) <= G_6(4) WHEN switch_pspl_gate_1 = '0' ELSE
      G_7(4);
  
  G_8(5) <= G_6(5) WHEN switch_pspl_gate_1 = '0' ELSE
      G_7(5);

  S1 <= G_8(0);

  Rate_Transition111_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition111_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition111_bypass_reg <= S1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition111_bypass_process;

  
  S1_2 <= S1_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition111_bypass_reg;

  const_3 <= X"3f000000";

  const_expression_1 <= X"c1400000";

  const_4 <= X"3f4ccccd";

  S4 <= G_8(3);

  Rate_Transition141_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition141_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition141_bypass_reg <= S4_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition141_bypass_process;

  
  S4_2 <= S4_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition141_bypass_reg;

  const_5 <= X"3f000000";

  const_expression_2 <= X"c1400000";

  const_6 <= X"3f4ccccd";

  S6 <= G_8(5);

  Rate_Transition161_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition161_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition161_bypass_reg <= S6_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition161_bypass_process;

  
  S6_2 <= S6_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition161_bypass_reg;

  const_7 <= X"3f000000";

  const_expression_3 <= X"c1400000";

  const_8 <= X"3f4ccccd";

  S3 <= G_8(2);

  Rate_Transition131_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition131_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition131_bypass_reg <= S3_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition131_bypass_process;

  
  S3_2 <= S3_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition131_bypass_reg;

  const_9 <= X"3d4ccccd";

  const_expression_4 <= X"c1400000";

  const_10 <= X"3f4ccccd";

  S2 <= G_8(1);

  Rate_Transition121_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition121_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition121_bypass_reg <= S2_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition121_bypass_process;

  
  S2_2 <= S2_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition121_bypass_reg;

  const_11 <= X"3f000000";

  const_expression_5 <= X"c1400000";

  const_12 <= X"3f4ccccd";

  S5 <= G_8(4);

  Rate_Transition151_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition151_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition151_bypass_reg <= S5_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition151_bypass_process;

  
  S5_2 <= S5_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition151_bypass_reg;

  const_13 <= X"3d4ccccd";

  Default_Index_out1 <= '0';

  Mode_Vector2_out1(0) <= '0';
  Mode_Vector2_out1(1) <= '1';
  Mode_Vector2_out1(2) <= '0';
  Mode_Vector2_out1(3) <= '0';
  Mode_Vector2_out1(4) <= '0';
  Mode_Vector2_out1(5) <= '0';
  Mode_Vector2_out1(6) <= '0';
  Mode_Vector2_out1(7) <= '1';
  Mode_Vector2_out1(8) <= '0';
  Mode_Vector2_out1(9) <= '0';
  Mode_Vector2_out1(10) <= '0';
  Mode_Vector2_out1(11) <= '1';

  Mode_Vector1_out1(0) <= '0';
  Mode_Vector1_out1(1) <= '0';
  Mode_Vector1_out1(2) <= '0';
  Mode_Vector1_out1(3) <= '0';
  Mode_Vector1_out1(4) <= '0';
  Mode_Vector1_out1(5) <= '0';
  Mode_Vector1_out1(6) <= '0';
  Mode_Vector1_out1(7) <= '1';
  Mode_Vector1_out1(8) <= '0';
  Mode_Vector1_out1(9) <= '1';
  Mode_Vector1_out1(10) <= '0';
  Mode_Vector1_out1(11) <= '1';

  configuration1_1(0) <= X"bc23d708";
  configuration1_1(1) <= X"3c23d708";
  configuration1_1(2) <= X"33d6bf92";
  configuration1_1(3) <= X"bf7ffffc";
  configuration1_1(4) <= X"33d6bf92";
  configuration1_1(5) <= X"bf7ffffc";
  configuration1_1(6) <= X"322bcc75";
  configuration1_1(7) <= X"322bcc75";
  configuration1_1(8) <= X"bc23d708";
  configuration1_1(9) <= X"3c23d708";
  configuration1_1(10) <= X"33d6bf92";
  configuration1_1(11) <= X"bf7ffffc";
  configuration1_1(12) <= X"33d6bf92";
  configuration1_1(13) <= X"b22bcc75";
  configuration1_1(14) <= X"322bcc75";
  configuration1_1(15) <= X"3f7ffffc";

  configuration2(0) <= X"bc23d708";
  configuration2(1) <= X"3c23d708";
  configuration2(2) <= X"33d6bf92";
  configuration2(3) <= X"b22bcc75";
  configuration2(4) <= X"33d6bf92";
  configuration2(5) <= X"bf7ffffc";
  configuration2(6) <= X"3f7ffffc";
  configuration2(7) <= X"322bcc75";
  configuration2(8) <= X"bc23d708";
  configuration2(9) <= X"3c23d708";
  configuration2(10) <= X"33d6bf92";
  configuration2(11) <= X"bf7ffffc";
  configuration2(12) <= X"33d6bf92";
  configuration2(13) <= X"b22bcc75";
  configuration2(14) <= X"322bcc75";
  configuration2(15) <= X"3f7ffffc";

  switch_pspl_abc_1 <= switch_pspl_abc;

  Iabc_PL(0) <= i_abc_pl_0;
  Iabc_PL(1) <= i_abc_pl_1;
  Iabc_PL(2) <= i_abc_pl_2;

  outputgen1: FOR k IN 0 TO 2 GENERATE
    Iabc_PL_1(k) <= signed(Iabc_PL(k));
  END GENERATE;

  Iabc_PL_2 <= Iabc_PL_1;

  Iabc(0) <= i_abc_ps_0;
  Iabc(1) <= i_abc_ps_1;
  Iabc(2) <= i_abc_ps_2;

  Iabc_1 <= Iabc;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      switch_pspl_abc_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        switch_pspl_abc_2 <= switch_pspl_abc_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;




  
  Switch_out1(0) <= Data_Type_Conversion4_out1(0) WHEN switch_pspl_abc_2 = '0' ELSE
      Data_Type_Conversion3_out1(0);
  
  Switch_out1(1) <= Data_Type_Conversion4_out1(1) WHEN switch_pspl_abc_2 = '0' ELSE
      Data_Type_Conversion3_out1(1);
  
  Switch_out1(2) <= Data_Type_Conversion4_out1(2) WHEN switch_pspl_abc_2 = '0' ELSE
      Data_Type_Conversion3_out1(2);

  Iab(0) <= Switch_out1(0);
  Iab(1) <= Switch_out1(1);

  Rate_Transition91_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition91_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition91_bypass_reg <= Ia;
      END IF;
    END IF;
  END PROCESS Rate_Transition91_bypass_process;

  
  Ia_1 <= Ia WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition91_bypass_reg;

  Rate_Transition9_out1 <= Ia_1;

  c8_Bias_out1(0) <= X"c13ffffd";
  c8_Bias_out1(1) <= X"413ffffd";
  c8_Bias_out1(2) <= X"413ffffd";
  c8_Bias_out1(3) <= X"ade83781";
  c8_Bias_out1(4) <= X"398a6979";
  c8_Bias_out1(5) <= X"ade83781";
  c8_Bias_out1(6) <= X"398a6979";
  c8_Bias_out1(7) <= X"b97ba881";
  c8_Bias_out1(8) <= X"37c9539a";
  c8_Bias_out1(9) <= X"37c9539a";
  c8_Bias_out1(10) <= X"37c9539a";
  c8_Bias_out1(11) <= X"398a6979";
  c8_Bias_out1(12) <= X"413ffffd";
  c8_Bias_out1(13) <= X"413ffffd";
  c8_Bias_out1(14) <= X"413ffffd";
  c8_Bias_out1(15) <= X"b97ba881";
  c8_Bias_out1(16) <= X"37c9539a";
  c8_Bias_out1(17) <= X"ade83781";
  c8_Bias_out1(18) <= X"398a6979";
  c8_Bias_out1(19) <= X"b97ba881";
  c8_Bias_out1(20) <= X"37c9539a";
  c8_Bias_out1(21) <= X"398a6979";
  c8_Bias_out1(22) <= X"37c9539a";
  c8_Bias_out1(23) <= X"398a6979";

  Bias_out1GEN_LABEL1: FOR d1 IN 0 TO 1 GENERATE
    Bias_out1GEN_LABEL: FOR d0 IN 0 TO 11 GENERATE
      Bias_out1(d0, d1) <= c8_Bias_out1(d0 + (d1 * 12));
    END GENERATE;
  END GENERATE;

  c533_Bias_out1GEN_LABEL1: FOR d1 IN 0 TO 1 GENERATE
    c533_Bias_out1GEN_LABEL: FOR d0 IN 0 TO 11 GENERATE
      c533_Bias_out1(d0 + (d1 * 12)) <= Bias_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch6_reg(0) <= X"00000000";
      delayMatch6_reg(1) <= X"00000000";
      delayMatch6_reg(2) <= X"00000000";
      delayMatch6_reg(3) <= X"00000000";
      delayMatch6_reg(4) <= X"00000000";
      delayMatch6_reg(5) <= X"00000000";
      delayMatch6_reg(6) <= X"00000000";
      delayMatch6_reg(7) <= X"00000000";
      delayMatch6_reg(8) <= X"00000000";
      delayMatch6_reg(9) <= X"00000000";
      delayMatch6_reg(10) <= X"00000000";
      delayMatch6_reg(11) <= X"00000000";
      delayMatch6_reg(12) <= X"00000000";
      delayMatch6_reg(13) <= X"00000000";
      delayMatch6_reg(14) <= X"00000000";
      delayMatch6_reg(15) <= X"00000000";
      delayMatch6_reg(16) <= X"00000000";
      delayMatch6_reg(17) <= X"00000000";
      delayMatch6_reg(18) <= X"00000000";
      delayMatch6_reg(19) <= X"00000000";
      delayMatch6_reg(20) <= X"00000000";
      delayMatch6_reg(21) <= X"00000000";
      delayMatch6_reg(22) <= X"00000000";
      delayMatch6_reg(23) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
        delayMatch6_reg(2) <= delayMatch6_reg_next(2);
        delayMatch6_reg(3) <= delayMatch6_reg_next(3);
        delayMatch6_reg(4) <= delayMatch6_reg_next(4);
        delayMatch6_reg(5) <= delayMatch6_reg_next(5);
        delayMatch6_reg(6) <= delayMatch6_reg_next(6);
        delayMatch6_reg(7) <= delayMatch6_reg_next(7);
        delayMatch6_reg(8) <= delayMatch6_reg_next(8);
        delayMatch6_reg(9) <= delayMatch6_reg_next(9);
        delayMatch6_reg(10) <= delayMatch6_reg_next(10);
        delayMatch6_reg(11) <= delayMatch6_reg_next(11);
        delayMatch6_reg(12) <= delayMatch6_reg_next(12);
        delayMatch6_reg(13) <= delayMatch6_reg_next(13);
        delayMatch6_reg(14) <= delayMatch6_reg_next(14);
        delayMatch6_reg(15) <= delayMatch6_reg_next(15);
        delayMatch6_reg(16) <= delayMatch6_reg_next(16);
        delayMatch6_reg(17) <= delayMatch6_reg_next(17);
        delayMatch6_reg(18) <= delayMatch6_reg_next(18);
        delayMatch6_reg(19) <= delayMatch6_reg_next(19);
        delayMatch6_reg(20) <= delayMatch6_reg_next(20);
        delayMatch6_reg(21) <= delayMatch6_reg_next(21);
        delayMatch6_reg(22) <= delayMatch6_reg_next(22);
        delayMatch6_reg(23) <= delayMatch6_reg_next(23);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  c533_Bias_out1_1(0) <= delayMatch6_reg(0);
  c533_Bias_out1_1(1) <= delayMatch6_reg(1);
  c533_Bias_out1_1(2) <= delayMatch6_reg(2);
  c533_Bias_out1_1(3) <= delayMatch6_reg(3);
  c533_Bias_out1_1(4) <= delayMatch6_reg(4);
  c533_Bias_out1_1(5) <= delayMatch6_reg(5);
  c533_Bias_out1_1(6) <= delayMatch6_reg(6);
  c533_Bias_out1_1(7) <= delayMatch6_reg(7);
  c533_Bias_out1_1(8) <= delayMatch6_reg(8);
  c533_Bias_out1_1(9) <= delayMatch6_reg(9);
  c533_Bias_out1_1(10) <= delayMatch6_reg(10);
  c533_Bias_out1_1(11) <= delayMatch6_reg(11);
  c533_Bias_out1_1(12) <= delayMatch6_reg(12);
  c533_Bias_out1_1(13) <= delayMatch6_reg(13);
  c533_Bias_out1_1(14) <= delayMatch6_reg(14);
  c533_Bias_out1_1(15) <= delayMatch6_reg(15);
  c533_Bias_out1_1(16) <= delayMatch6_reg(16);
  c533_Bias_out1_1(17) <= delayMatch6_reg(17);
  c533_Bias_out1_1(18) <= delayMatch6_reg(18);
  c533_Bias_out1_1(19) <= delayMatch6_reg(19);
  c533_Bias_out1_1(20) <= delayMatch6_reg(20);
  c533_Bias_out1_1(21) <= delayMatch6_reg(21);
  c533_Bias_out1_1(22) <= delayMatch6_reg(22);
  c533_Bias_out1_1(23) <= delayMatch6_reg(23);
  delayMatch6_reg_next(0) <= c533_Bias_out1(0);
  delayMatch6_reg_next(1) <= c533_Bias_out1(1);
  delayMatch6_reg_next(2) <= c533_Bias_out1(2);
  delayMatch6_reg_next(3) <= c533_Bias_out1(3);
  delayMatch6_reg_next(4) <= c533_Bias_out1(4);
  delayMatch6_reg_next(5) <= c533_Bias_out1(5);
  delayMatch6_reg_next(6) <= c533_Bias_out1(6);
  delayMatch6_reg_next(7) <= c533_Bias_out1(7);
  delayMatch6_reg_next(8) <= c533_Bias_out1(8);
  delayMatch6_reg_next(9) <= c533_Bias_out1(9);
  delayMatch6_reg_next(10) <= c533_Bias_out1(10);
  delayMatch6_reg_next(11) <= c533_Bias_out1(11);
  delayMatch6_reg_next(12) <= c533_Bias_out1(12);
  delayMatch6_reg_next(13) <= c533_Bias_out1(13);
  delayMatch6_reg_next(14) <= c533_Bias_out1(14);
  delayMatch6_reg_next(15) <= c533_Bias_out1(15);
  delayMatch6_reg_next(16) <= c533_Bias_out1(16);
  delayMatch6_reg_next(17) <= c533_Bias_out1(17);
  delayMatch6_reg_next(18) <= c533_Bias_out1(18);
  delayMatch6_reg_next(19) <= c533_Bias_out1(19);
  delayMatch6_reg_next(20) <= c533_Bias_out1(20);
  delayMatch6_reg_next(21) <= c533_Bias_out1(21);
  delayMatch6_reg_next(22) <= c533_Bias_out1(22);
  delayMatch6_reg_next(23) <= c533_Bias_out1(23);

  Bias_out1_1GEN_LABEL1: FOR d1 IN 0 TO 1 GENERATE
    Bias_out1_1GEN_LABEL: FOR d0 IN 0 TO 11 GENERATE
      Bias_out1_1(d0, d1) <= c533_Bias_out1_1(d0 + (d1 * 12));
    END GENERATE;
  END GENERATE;

  Rate_Transition101_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition101_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition101_bypass_reg <= Ib;
      END IF;
    END IF;
  END PROCESS Rate_Transition101_bypass_process;

  
  Ib_1 <= Ib WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition101_bypass_reg;

  Rate_Transition10_out1 <= Ib_1;

  col3(0) <= Rate_Transition9_out1;
  col3(1) <= Rate_Transition10_out1;

  col6(0) <= Rate_Transition9_out1;
  col6(1) <= Rate_Transition10_out1;

  col7(0) <= Rate_Transition9_out1;
  col7(1) <= Rate_Transition10_out1;

  col11(0) <= Rate_Transition9_out1;
  col11(1) <= Rate_Transition10_out1;

  row11(0) <= active_configuration(7);
  row11(1) <= active_configuration(14);

  row7(0) <= active_configuration(5);
  row7(1) <= active_configuration(11);

  row6(0) <= active_configuration(4);
  row6(1) <= active_configuration(10);

  row3(0) <= active_configuration(1);
  row3(1) <= active_configuration(9);

  Data_Type_Conversion_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Switch1_out1;

  Selector13_output : PROCESS (Bias_out1_1, Data_Type_Conversion_out1)
  BEGIN
    Selector_out1(0) <= Bias_out1_1(0, 1);
    Selector_out1(1) <= Bias_out1_1(1, 1);
    Selector_out1(2) <= Bias_out1_1(2, 1);
    Selector_out1(3) <= Bias_out1_1(3, 1);
    Selector_out1(4) <= Bias_out1_1(4, 1);
    Selector_out1(5) <= Bias_out1_1(5, 1);
    Selector_out1(6) <= Bias_out1_1(6, 1);
    Selector_out1(7) <= Bias_out1_1(7, 1);
    Selector_out1(8) <= Bias_out1_1(8, 1);
    Selector_out1(9) <= Bias_out1_1(9, 1);
    Selector_out1(10) <= Bias_out1_1(10, 1);
    Selector_out1(11) <= Bias_out1_1(11, 1);
    IF Data_Type_Conversion_out1 = to_unsigned(0, 32) THEN 
      Selector_out1(0) <= Bias_out1_1(0, 0);
      Selector_out1(1) <= Bias_out1_1(1, 0);
      Selector_out1(2) <= Bias_out1_1(2, 0);
      Selector_out1(3) <= Bias_out1_1(3, 0);
      Selector_out1(4) <= Bias_out1_1(4, 0);
      Selector_out1(5) <= Bias_out1_1(5, 0);
      Selector_out1(6) <= Bias_out1_1(6, 0);
      Selector_out1(7) <= Bias_out1_1(7, 0);
      Selector_out1(8) <= Bias_out1_1(8, 0);
      Selector_out1(9) <= Bias_out1_1(9, 0);
      Selector_out1(10) <= Bias_out1_1(10, 0);
      Selector_out1(11) <= Bias_out1_1(11, 0);
    END IF;
  END PROCESS Selector13_output;



  
  Data_Type_Conversion_out1_1(0) <= '1' WHEN modes(0) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(1) <= '1' WHEN modes(1) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(2) <= '1' WHEN modes(2) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(3) <= '1' WHEN modes(3) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(4) <= '1' WHEN modes(4) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(5) <= '1' WHEN modes(5) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(6) <= '1' WHEN modes(6) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(7) <= '1' WHEN modes(7) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(8) <= '1' WHEN modes(8) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(9) <= '1' WHEN modes(9) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(10) <= '1' WHEN modes(10) /= '0' ELSE
      '0';
  
  Data_Type_Conversion_out1_1(11) <= '1' WHEN modes(11) /= '0' ELSE
      '0';

  
  Switch1_out1 <= Constant_out1_1 WHEN Delay_out1_2 = '0' ELSE
      Subsystem1_out1;

  
  active_configuration(0) <= configuration1_1(0) WHEN Switch1_out1 = '0' ELSE
      configuration2(0);
  
  active_configuration(1) <= configuration1_1(1) WHEN Switch1_out1 = '0' ELSE
      configuration2(1);
  
  active_configuration(2) <= configuration1_1(2) WHEN Switch1_out1 = '0' ELSE
      configuration2(2);
  
  active_configuration(3) <= configuration1_1(3) WHEN Switch1_out1 = '0' ELSE
      configuration2(3);
  
  active_configuration(4) <= configuration1_1(4) WHEN Switch1_out1 = '0' ELSE
      configuration2(4);
  
  active_configuration(5) <= configuration1_1(5) WHEN Switch1_out1 = '0' ELSE
      configuration2(5);
  
  active_configuration(6) <= configuration1_1(6) WHEN Switch1_out1 = '0' ELSE
      configuration2(6);
  
  active_configuration(7) <= configuration1_1(7) WHEN Switch1_out1 = '0' ELSE
      configuration2(7);
  
  active_configuration(8) <= configuration1_1(8) WHEN Switch1_out1 = '0' ELSE
      configuration2(8);
  
  active_configuration(9) <= configuration1_1(9) WHEN Switch1_out1 = '0' ELSE
      configuration2(9);
  
  active_configuration(10) <= configuration1_1(10) WHEN Switch1_out1 = '0' ELSE
      configuration2(10);
  
  active_configuration(11) <= configuration1_1(11) WHEN Switch1_out1 = '0' ELSE
      configuration2(11);
  
  active_configuration(12) <= configuration1_1(12) WHEN Switch1_out1 = '0' ELSE
      configuration2(12);
  
  active_configuration(13) <= configuration1_1(13) WHEN Switch1_out1 = '0' ELSE
      configuration2(13);
  
  active_configuration(14) <= configuration1_1(14) WHEN Switch1_out1 = '0' ELSE
      configuration2(14);
  
  active_configuration(15) <= configuration1_1(15) WHEN Switch1_out1 = '0' ELSE
      configuration2(15);


  State_Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      State_Delay_bypass_reg(0) <= X"00000000";
      State_Delay_bypass_reg(1) <= X"00000000";
      State_Delay_bypass_reg(2) <= X"00000000";
      State_Delay_bypass_reg(3) <= X"00000000";
      State_Delay_bypass_reg(4) <= X"00000000";
      State_Delay_bypass_reg(5) <= X"00000000";
      State_Delay_bypass_reg(6) <= X"00000000";
      State_Delay_bypass_reg(7) <= X"00000000";
      State_Delay_bypass_reg(8) <= X"00000000";
      State_Delay_bypass_reg(9) <= X"00000000";
      State_Delay_bypass_reg(10) <= X"00000000";
      State_Delay_bypass_reg(11) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_1 = '1' THEN
        State_Delay_bypass_reg(0) <= State_Delay_bypass_reg_next(0);
        State_Delay_bypass_reg(1) <= State_Delay_bypass_reg_next(1);
        State_Delay_bypass_reg(2) <= State_Delay_bypass_reg_next(2);
        State_Delay_bypass_reg(3) <= State_Delay_bypass_reg_next(3);
        State_Delay_bypass_reg(4) <= State_Delay_bypass_reg_next(4);
        State_Delay_bypass_reg(5) <= State_Delay_bypass_reg_next(5);
        State_Delay_bypass_reg(6) <= State_Delay_bypass_reg_next(6);
        State_Delay_bypass_reg(7) <= State_Delay_bypass_reg_next(7);
        State_Delay_bypass_reg(8) <= State_Delay_bypass_reg_next(8);
        State_Delay_bypass_reg(9) <= State_Delay_bypass_reg_next(9);
        State_Delay_bypass_reg(10) <= State_Delay_bypass_reg_next(10);
        State_Delay_bypass_reg(11) <= State_Delay_bypass_reg_next(11);
      END IF;
    END IF;
  END PROCESS State_Delay_bypass_process;

  
  State_Update_out1(0) <= Output_Sum_out1(0) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(0);
  
  State_Update_out1(1) <= Output_Sum_out1(1) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(1);
  
  State_Update_out1(2) <= Output_Sum_out1(2) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(2);
  
  State_Update_out1(3) <= Output_Sum_out1(3) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(3);
  
  State_Update_out1(4) <= Output_Sum_out1(4) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(4);
  
  State_Update_out1(5) <= Output_Sum_out1(5) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(5);
  
  State_Update_out1(6) <= Output_Sum_out1(6) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(6);
  
  State_Update_out1(7) <= Output_Sum_out1(7) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(7);
  
  State_Update_out1(8) <= Output_Sum_out1(8) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(8);
  
  State_Update_out1(9) <= Output_Sum_out1(9) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(9);
  
  State_Update_out1(10) <= Output_Sum_out1(10) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(10);
  
  State_Update_out1(11) <= Output_Sum_out1(11) WHEN enb_1_25_1 = '1' ELSE
      State_Delay_bypass_reg(11);
  State_Delay_bypass_reg_next(0) <= Output_Sum_out1(0);
  State_Delay_bypass_reg_next(1) <= Output_Sum_out1(1);
  State_Delay_bypass_reg_next(2) <= Output_Sum_out1(2);
  State_Delay_bypass_reg_next(3) <= Output_Sum_out1(3);
  State_Delay_bypass_reg_next(4) <= Output_Sum_out1(4);
  State_Delay_bypass_reg_next(5) <= Output_Sum_out1(5);
  State_Delay_bypass_reg_next(6) <= Output_Sum_out1(6);
  State_Delay_bypass_reg_next(7) <= Output_Sum_out1(7);
  State_Delay_bypass_reg_next(8) <= Output_Sum_out1(8);
  State_Delay_bypass_reg_next(9) <= Output_Sum_out1(9);
  State_Delay_bypass_reg_next(10) <= Output_Sum_out1(10);
  State_Delay_bypass_reg_next(11) <= Output_Sum_out1(11);

  State_Delay_out <= State_Update_out1;

  
  State_Delay_out1(0) <= State_Delay_Initial_Val_out(0) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(0);
  
  State_Delay_out1(1) <= State_Delay_Initial_Val_out(1) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(1);
  
  State_Delay_out1(2) <= State_Delay_Initial_Val_out(2) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(2);
  
  State_Delay_out1(3) <= State_Delay_Initial_Val_out(3) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(3);
  
  State_Delay_out1(4) <= State_Delay_Initial_Val_out(4) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(4);
  
  State_Delay_out1(5) <= State_Delay_Initial_Val_out(5) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(5);
  
  State_Delay_out1(6) <= State_Delay_Initial_Val_out(6) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(6);
  
  State_Delay_out1(7) <= State_Delay_Initial_Val_out(7) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(7);
  
  State_Delay_out1(8) <= State_Delay_Initial_Val_out(8) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(8);
  
  State_Delay_out1(9) <= State_Delay_Initial_Val_out(9) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(9);
  
  State_Delay_out1(10) <= State_Delay_Initial_Val_out(10) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(10);
  
  State_Delay_out1(11) <= State_Delay_Initial_Val_out(11) WHEN State_Delay_ctrl_delay_out = '0' ELSE
      State_Delay_out(11);

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg(0) <= X"00000000";
      delayMatch7_reg(1) <= X"00000000";
      delayMatch7_reg(2) <= X"00000000";
      delayMatch7_reg(3) <= X"00000000";
      delayMatch7_reg(4) <= X"00000000";
      delayMatch7_reg(5) <= X"00000000";
      delayMatch7_reg(6) <= X"00000000";
      delayMatch7_reg(7) <= X"00000000";
      delayMatch7_reg(8) <= X"00000000";
      delayMatch7_reg(9) <= X"00000000";
      delayMatch7_reg(10) <= X"00000000";
      delayMatch7_reg(11) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
        delayMatch7_reg(2) <= delayMatch7_reg_next(2);
        delayMatch7_reg(3) <= delayMatch7_reg_next(3);
        delayMatch7_reg(4) <= delayMatch7_reg_next(4);
        delayMatch7_reg(5) <= delayMatch7_reg_next(5);
        delayMatch7_reg(6) <= delayMatch7_reg_next(6);
        delayMatch7_reg(7) <= delayMatch7_reg_next(7);
        delayMatch7_reg(8) <= delayMatch7_reg_next(8);
        delayMatch7_reg(9) <= delayMatch7_reg_next(9);
        delayMatch7_reg(10) <= delayMatch7_reg_next(10);
        delayMatch7_reg(11) <= delayMatch7_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Switch3_out1_1(0) <= delayMatch7_reg(0);
  Switch3_out1_1(1) <= delayMatch7_reg(1);
  Switch3_out1_1(2) <= delayMatch7_reg(2);
  Switch3_out1_1(3) <= delayMatch7_reg(3);
  Switch3_out1_1(4) <= delayMatch7_reg(4);
  Switch3_out1_1(5) <= delayMatch7_reg(5);
  Switch3_out1_1(6) <= delayMatch7_reg(6);
  Switch3_out1_1(7) <= delayMatch7_reg(7);
  Switch3_out1_1(8) <= delayMatch7_reg(8);
  Switch3_out1_1(9) <= delayMatch7_reg(9);
  Switch3_out1_1(10) <= delayMatch7_reg(10);
  Switch3_out1_1(11) <= delayMatch7_reg(11);
  delayMatch7_reg_next(0) <= Switch3_out1(0);
  delayMatch7_reg_next(1) <= Switch3_out1(1);
  delayMatch7_reg_next(2) <= Switch3_out1(2);
  delayMatch7_reg_next(3) <= Switch3_out1(3);
  delayMatch7_reg_next(4) <= Switch3_out1(4);
  delayMatch7_reg_next(5) <= Switch3_out1(5);
  delayMatch7_reg_next(6) <= Switch3_out1(6);
  delayMatch7_reg_next(7) <= Switch3_out1(7);
  delayMatch7_reg_next(8) <= Switch3_out1(8);
  delayMatch7_reg_next(9) <= Switch3_out1(9);
  delayMatch7_reg_next(10) <= Switch3_out1(10);
  delayMatch7_reg_next(11) <= Switch3_out1(11);

  Delay3_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_bypass_reg(0) <= X"00000000";
      Delay3_bypass_reg(1) <= X"00000000";
      Delay3_bypass_reg(2) <= X"00000000";
      Delay3_bypass_reg(3) <= X"00000000";
      Delay3_bypass_reg(4) <= X"00000000";
      Delay3_bypass_reg(5) <= X"00000000";
      Delay3_bypass_reg(6) <= X"00000000";
      Delay3_bypass_reg(7) <= X"00000000";
      Delay3_bypass_reg(8) <= X"00000000";
      Delay3_bypass_reg(9) <= X"00000000";
      Delay3_bypass_reg(10) <= X"00000000";
      Delay3_bypass_reg(11) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_1 = '1' THEN
        Delay3_bypass_reg(0) <= Delay3_bypass_reg_next(0);
        Delay3_bypass_reg(1) <= Delay3_bypass_reg_next(1);
        Delay3_bypass_reg(2) <= Delay3_bypass_reg_next(2);
        Delay3_bypass_reg(3) <= Delay3_bypass_reg_next(3);
        Delay3_bypass_reg(4) <= Delay3_bypass_reg_next(4);
        Delay3_bypass_reg(5) <= Delay3_bypass_reg_next(5);
        Delay3_bypass_reg(6) <= Delay3_bypass_reg_next(6);
        Delay3_bypass_reg(7) <= Delay3_bypass_reg_next(7);
        Delay3_bypass_reg(8) <= Delay3_bypass_reg_next(8);
        Delay3_bypass_reg(9) <= Delay3_bypass_reg_next(9);
        Delay3_bypass_reg(10) <= Delay3_bypass_reg_next(10);
        Delay3_bypass_reg(11) <= Delay3_bypass_reg_next(11);
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Switch3_out1_2(0) <= Switch3_out1_1(0) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(0);
  
  Switch3_out1_2(1) <= Switch3_out1_1(1) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(1);
  
  Switch3_out1_2(2) <= Switch3_out1_1(2) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(2);
  
  Switch3_out1_2(3) <= Switch3_out1_1(3) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(3);
  
  Switch3_out1_2(4) <= Switch3_out1_1(4) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(4);
  
  Switch3_out1_2(5) <= Switch3_out1_1(5) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(5);
  
  Switch3_out1_2(6) <= Switch3_out1_1(6) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(6);
  
  Switch3_out1_2(7) <= Switch3_out1_1(7) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(7);
  
  Switch3_out1_2(8) <= Switch3_out1_1(8) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(8);
  
  Switch3_out1_2(9) <= Switch3_out1_1(9) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(9);
  
  Switch3_out1_2(10) <= Switch3_out1_1(10) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(10);
  
  Switch3_out1_2(11) <= Switch3_out1_1(11) WHEN enb_1_25_1 = '1' ELSE
      Delay3_bypass_reg(11);
  Delay3_bypass_reg_next(0) <= Switch3_out1_1(0);
  Delay3_bypass_reg_next(1) <= Switch3_out1_1(1);
  Delay3_bypass_reg_next(2) <= Switch3_out1_1(2);
  Delay3_bypass_reg_next(3) <= Switch3_out1_1(3);
  Delay3_bypass_reg_next(4) <= Switch3_out1_1(4);
  Delay3_bypass_reg_next(5) <= Switch3_out1_1(5);
  Delay3_bypass_reg_next(6) <= Switch3_out1_1(6);
  Delay3_bypass_reg_next(7) <= Switch3_out1_1(7);
  Delay3_bypass_reg_next(8) <= Switch3_out1_1(8);
  Delay3_bypass_reg_next(9) <= Switch3_out1_1(9);
  Delay3_bypass_reg_next(10) <= Switch3_out1_1(10);
  Delay3_bypass_reg_next(11) <= Switch3_out1_1(11);

  Delay3_out1 <= Switch3_out1_2;

  
  Switch3_out1(0) <= Delay3_out1(0) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(0);
  
  Switch3_out1(1) <= Delay3_out1(1) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(1);
  
  Switch3_out1(2) <= Delay3_out1(2) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(2);
  
  Switch3_out1(3) <= Delay3_out1(3) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(3);
  
  Switch3_out1(4) <= Delay3_out1(4) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(4);
  
  Switch3_out1(5) <= Delay3_out1(5) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(5);
  
  Switch3_out1(6) <= Delay3_out1(6) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(6);
  
  Switch3_out1(7) <= Delay3_out1(7) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(7);
  
  Switch3_out1(8) <= Delay3_out1(8) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(8);
  
  Switch3_out1(9) <= Delay3_out1(9) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(9);
  
  Switch3_out1(10) <= Delay3_out1(10) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(10);
  
  Switch3_out1(11) <= Delay3_out1(11) WHEN Bitwise_Operator_out1 = '0' ELSE
      State_Delay_out1(11);

  
  Switch_out1_1(0) <= X0_out1(0) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(0);
  
  Switch_out1_1(1) <= X0_out1(1) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(1);
  
  Switch_out1_1(2) <= X0_out1(2) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(2);
  
  Switch_out1_1(3) <= X0_out1(3) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(3);
  
  Switch_out1_1(4) <= X0_out1(4) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(4);
  
  Switch_out1_1(5) <= X0_out1(5) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(5);
  
  Switch_out1_1(6) <= X0_out1(6) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(6);
  
  Switch_out1_1(7) <= X0_out1(7) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(7);
  
  Switch_out1_1(8) <= X0_out1(8) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(8);
  
  Switch_out1_1(9) <= X0_out1(9) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(9);
  
  Switch_out1_1(10) <= X0_out1(10) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(10);
  
  Switch_out1_1(11) <= X0_out1(11) WHEN Delay2_out1_1 = '0' ELSE
      Switch3_out1(11);

  Rate_Transition171_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Output_Demux_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_1 = '1' THEN
        Output_Demux_out1 <= dot_product1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition171_output_process;


  delayMatch13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch13_reg(0) <= X"00000000";
      delayMatch13_reg(1) <= X"00000000";
      delayMatch13_reg(2) <= X"00000000";
      delayMatch13_reg(3) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  Output_Demux_out1_1 <= delayMatch13_reg(3);
  delayMatch13_reg_next(0) <= Output_Demux_out1;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);

  Rate_Transition17_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition17_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition17_bypass_reg <= Output_Demux_out1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition17_bypass_process;

  
  Uab <= Output_Demux_out1_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition17_bypass_reg;

  Rate_Transition181_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Output_Demux_out2 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_1 = '1' THEN
        Output_Demux_out2 <= dot_product2_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition181_output_process;


  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch14_reg(0) <= X"00000000";
      delayMatch14_reg(1) <= X"00000000";
      delayMatch14_reg(2) <= X"00000000";
      delayMatch14_reg(3) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  Output_Demux_out2_1 <= delayMatch14_reg(3);
  delayMatch14_reg_next(0) <= Output_Demux_out2;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);

  Rate_Transition18_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition18_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition18_bypass_reg <= Output_Demux_out2_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition18_bypass_process;

  
  Ubc <= Output_Demux_out2_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition18_bypass_reg;

  Rate_Transition191_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Output_Demux_out3 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_1 = '1' THEN
        Output_Demux_out3 <= dot_product3_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition191_output_process;


  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch15_reg(0) <= X"00000000";
      delayMatch15_reg(1) <= X"00000000";
      delayMatch15_reg(2) <= X"00000000";
      delayMatch15_reg(3) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_25_0 = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  Output_Demux_out3_1 <= delayMatch15_reg(3);
  delayMatch15_reg_next(0) <= Output_Demux_out3;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);

  Rate_Transition19_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition19_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        Rate_Transition19_bypass_reg <= Output_Demux_out3_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition19_bypass_process;

  
  Uca <= Output_Demux_out3_1 WHEN enb_1_125_1 = '1' ELSE
      Rate_Transition19_bypass_reg;


  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg(0) <= X"00000000";
      t_bypass_reg(1) <= X"00000000";
      t_bypass_reg(2) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        t_bypass_reg(0) <= t_bypass_reg_next(0);
        t_bypass_reg(1) <= t_bypass_reg_next(1);
        t_bypass_reg(2) <= t_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Data_Type_Conversion_out1_3(0) <= Data_Type_Conversion_out1_2(0) WHEN enb_1_125_1 = '1' ELSE
      t_bypass_reg(0);
  
  Data_Type_Conversion_out1_3(1) <= Data_Type_Conversion_out1_2(1) WHEN enb_1_125_1 = '1' ELSE
      t_bypass_reg(1);
  
  Data_Type_Conversion_out1_3(2) <= Data_Type_Conversion_out1_2(2) WHEN enb_1_125_1 = '1' ELSE
      t_bypass_reg(2);
  t_bypass_reg_next(0) <= Data_Type_Conversion_out1_2(0);
  t_bypass_reg_next(1) <= Data_Type_Conversion_out1_2(1);
  t_bypass_reg_next(2) <= Data_Type_Conversion_out1_2(2);


  outputgen: FOR k IN 0 TO 2 GENERATE
    Data_Type_Conversion1_out1_1(k) <= signed(Data_Type_Conversion1_out1(k));
  END GENERATE;

  t1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t1_bypass_reg(0) <= to_signed(16#0000000#, 25);
      t1_bypass_reg(1) <= to_signed(16#0000000#, 25);
      t1_bypass_reg(2) <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_125_1 = '1' THEN
        t1_bypass_reg(0) <= t1_bypass_reg_next(0);
        t1_bypass_reg(1) <= t1_bypass_reg_next(1);
        t1_bypass_reg(2) <= t1_bypass_reg_next(2);
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Data_Type_Conversion1_out1_2(0) <= Data_Type_Conversion1_out1_1(0) WHEN enb_1_125_1 = '1' ELSE
      t1_bypass_reg(0);
  
  Data_Type_Conversion1_out1_2(1) <= Data_Type_Conversion1_out1_1(1) WHEN enb_1_125_1 = '1' ELSE
      t1_bypass_reg(1);
  
  Data_Type_Conversion1_out1_2(2) <= Data_Type_Conversion1_out1_1(2) WHEN enb_1_125_1 = '1' ELSE
      t1_bypass_reg(2);
  t1_bypass_reg_next(0) <= Data_Type_Conversion1_out1_1(0);
  t1_bypass_reg_next(1) <= Data_Type_Conversion1_out1_1(1);
  t1_bypass_reg_next(2) <= Data_Type_Conversion1_out1_1(2);

  u_abc_pl_0 <= std_logic_vector(Data_Type_Conversion1_out1_2(0));

  u_abc_pl_1 <= std_logic_vector(Data_Type_Conversion1_out1_2(1));

  u_abc_pl_2 <= std_logic_vector(Data_Type_Conversion1_out1_2(2));

  ce_out <= enb_1_125_1;

  u_abc_ps_0 <= Data_Type_Conversion_out1_3(0);

  u_abc_ps_1 <= Data_Type_Conversion_out1_3(1);

  u_abc_ps_2 <= Data_Type_Conversion_out1_3(2);

END rtl;

