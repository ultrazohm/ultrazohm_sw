// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MLP_gem2Stream_float_4u_26 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read,
        p_m_out_din,
        p_m_out_full_n,
        p_m_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [127:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
output  [15:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [15:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [15:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;
output  [31:0] p_m_out_din;
input   p_m_out_full_n;
output   p_m_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_out_write;
reg p_m_read;
reg[15:0] p_in_address0;
reg p_in_ce0;
reg[15:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;
reg p_m_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln55_reg_282;
reg    p_m_blk_n;
reg    p_in_offset_blk_n;
reg    p_m_out_blk_n;
reg   [29:0] i_reg_136;
reg   [15:0] p_in_offset_read_reg_269;
reg    ap_block_state1;
reg   [29:0] trunc_ln_reg_277;
wire   [0:0] icmp_ln55_fu_163_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [29:0] add_ln55_fu_168_p2;
reg   [29:0] add_ln55_reg_286;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] tmp_7_fu_178_p3;
reg   [15:0] tmp_7_reg_291;
reg   [31:0] p_in_load_reg_307;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] p_in_load_10_reg_312;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg   [29:0] ap_phi_mux_i_phi_fu_140_p4;
wire   [63:0] zext_ln60_fu_191_p1;
wire   [63:0] zext_ln60_1_fu_207_p1;
wire   [63:0] zext_ln60_2_fu_222_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln60_3_fu_237_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln54_fu_147_p2;
wire   [13:0] empty_fu_174_p1;
wire   [15:0] add_ln60_fu_186_p2;
wire   [15:0] or_ln60_fu_196_p2;
wire   [15:0] add_ln60_1_fu_202_p2;
wire   [15:0] or_ln60_1_fu_212_p2;
wire   [15:0] add_ln60_2_fu_217_p2;
wire   [15:0] or_ln60_2_fu_227_p2;
wire   [15:0] add_ln60_3_fu_232_p2;
wire   [31:0] l_v_21_fu_252_p1;
wire   [31:0] l_v_20_fu_248_p1;
wire   [31:0] l_v_19_fu_245_p1;
wire   [31:0] l_v_fu_242_p1;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

MLP_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U188(
    .din0(p_m_dout),
    .din1(p_m_dout),
    .dout(mul_ln54_fu_147_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_136 <= 30'd0;
    end else if (((icmp_ln55_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_136 <= add_ln55_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln55_reg_286 <= add_ln55_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_282 <= icmp_ln55_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_10_reg_312 <= p_in_q0;
        p_in_load_reg_307 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read_reg_269 <= p_in_offset_dout;
        trunc_ln_reg_277 <= {{mul_ln54_fu_147_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_163_p2 == 1'd0))) begin
        tmp_7_reg_291[15 : 2] <= tmp_7_fu_178_p3[15 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_163_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_140_p4 = add_ln55_reg_286;
    end else begin
        ap_phi_mux_i_phi_fu_140_p4 = i_reg_136;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address0 = zext_ln60_3_fu_237_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address0 = zext_ln60_1_fu_207_p1;
        end else begin
            p_in_address0 = 'bx;
        end
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address1 = zext_ln60_2_fu_222_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address1 = zext_ln60_fu_191_p1;
        end else begin
            p_in_address1 = 'bx;
        end
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_out_blk_n = p_m_out_full_n;
    end else begin
        p_m_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_out_write = 1'b1;
    end else begin
        p_m_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_163_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_163_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_168_p2 = (ap_phi_mux_i_phi_fu_140_p4 + 30'd1);

assign add_ln60_1_fu_202_p2 = (p_in_offset_read_reg_269 + or_ln60_fu_196_p2);

assign add_ln60_2_fu_217_p2 = (p_in_offset_read_reg_269 + or_ln60_1_fu_212_p2);

assign add_ln60_3_fu_232_p2 = (p_in_offset_read_reg_269 + or_ln60_2_fu_227_p2);

assign add_ln60_fu_186_p2 = (p_in_offset_read_reg_269 + tmp_7_fu_178_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln55_reg_282 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln55_reg_282 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln55_reg_282 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_m_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln55_reg_282 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign empty_fu_174_p1 = ap_phi_mux_i_phi_fu_140_p4[13:0];

assign icmp_ln55_fu_163_p2 = ((ap_phi_mux_i_phi_fu_140_p4 == trunc_ln_reg_277) ? 1'b1 : 1'b0);

assign l_v_19_fu_245_p1 = p_in_load_10_reg_312;

assign l_v_20_fu_248_p1 = p_in_q1;

assign l_v_21_fu_252_p1 = p_in_q0;

assign l_v_fu_242_p1 = p_in_load_reg_307;

assign or_ln60_1_fu_212_p2 = (tmp_7_reg_291 | 16'd2);

assign or_ln60_2_fu_227_p2 = (tmp_7_reg_291 | 16'd3);

assign or_ln60_fu_196_p2 = (tmp_7_fu_178_p3 | 16'd1);

assign p_m_out_din = p_m_dout;

assign p_out_din = {{{{l_v_21_fu_252_p1}, {l_v_20_fu_248_p1}}, {l_v_19_fu_245_p1}}, {l_v_fu_242_p1}};

assign start_out = real_start;

assign tmp_7_fu_178_p3 = {{empty_fu_174_p1}, {2'd0}};

assign zext_ln60_1_fu_207_p1 = add_ln60_1_fu_202_p2;

assign zext_ln60_2_fu_222_p1 = add_ln60_2_fu_217_p2;

assign zext_ln60_3_fu_237_p1 = add_ln60_3_fu_232_p2;

assign zext_ln60_fu_191_p1 = add_ln60_fu_186_p2;

always @ (posedge ap_clk) begin
    tmp_7_reg_291[1:0] <= 2'b00;
end

endmodule //MLP_gem2Stream_float_4u_26
