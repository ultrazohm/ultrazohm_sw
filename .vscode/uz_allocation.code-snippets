{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	 "Print to console": {
	 	"scope": "c",
	 	"prefix": ["allocation", "allocator", "uz allocation", "static allocator"],
	 	"body": [
			"#include \"$2/uz_global_configuration.h\" ",
			"#if ${1/(.*)/${1:/upcase}/}_MAX_INSTANCES > 0U",
			"#include <stdbool.h> ",
			"#include \"$1.h\" ",
			"",
			"struct $1_t {",
			"	bool is_ready;",
			"};",
			"",
			"static size_t instance_counter = 0U;",
			"static $1_t instances[${1/(.*)/${1:/upcase}/}_MAX_INSTANCES] = { 0 };",
			"",
			"static $1_t* uz_wavegen_allocation(void);",
			"",
			"static $1_t* uz_wavegen_allocation(void){",
			"	uz_assert(instance_counter < ${1/(.*)/${1:/upcase}/}_MAX_INSTANCES);",
			"	$1_t* self = &instances[instance_counter];",
			"	uz_assert_false(self->is_ready);",
			"	instance_counter++;",
			"	self->is_ready = true;",
			"	return (self);",
			"}",
			"",
			"$1_t* $1_init() {",
			"	$1_t* self = $1_allocation();",
			"	return (self);",
			"}",
			"#endif"
	 	],
	 	"description": "Default static allocation of an object"
	 }
}