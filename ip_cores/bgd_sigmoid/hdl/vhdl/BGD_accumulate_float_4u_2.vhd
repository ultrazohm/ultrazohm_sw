-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_accumulate_float_4u_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_values_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    p_values_empty_n : IN STD_LOGIC;
    p_values_read : OUT STD_LOGIC;
    p_accumulator_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_accumulator_ce0 : OUT STD_LOGIC;
    p_accumulator_we0 : OUT STD_LOGIC;
    p_accumulator_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_accumulator_ce1 : OUT STD_LOGIC;
    p_accumulator_we1 : OUT STD_LOGIC;
    p_accumulator_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_accumulator_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_weightGradientAvg_offset_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    p_weightGradientAvg_offset_empty_n : IN STD_LOGIC;
    p_weightGradientAvg_offset_read : OUT STD_LOGIC;
    mul_ln559_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln559_loc_empty_n : IN STD_LOGIC;
    mul_ln559_loc_read : OUT STD_LOGIC;
    p_initZero_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    p_initZero_empty_n : IN STD_LOGIC;
    p_initZero_read : OUT STD_LOGIC );
end;


architecture behav of BGD_accumulate_float_4u_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_values_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_weightGradientAvg_offset_blk_n : STD_LOGIC;
    signal mul_ln559_loc_blk_n : STD_LOGIC;
    signal p_initZero_blk_n : STD_LOGIC;
    signal reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_initZero_read_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_weightGradientAvg_offset_read_reg_334 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_reg_348 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln410_fu_205_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln410_reg_356 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_215_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_361 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln410_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_accumulator_addr_reg_368 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln674_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_i_i_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_i_i_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_7_reg_398 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_accumulator_addr_8_reg_404 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln417_6_fu_306_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln417_6_reg_410 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_accumulator_load_8_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_accumulator_addr_9_reg_420 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln101_26_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln101_28_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_2_i_i_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_147 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln417_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_7_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_8_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_9_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_158_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_211_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln417_fu_223_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln417_fu_271_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln417_4_fu_276_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln417_5_fu_286_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln417_5_fu_291_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln417_6_fu_301_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component BGD_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U342 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_158_p0,
        din1 => grp_fu_158_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U343 : component BGD_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_162_p0,
        din1 => grp_fu_162_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_147 <= ap_const_lv30_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_reg_147 <= add_ln410_reg_356;
            end if; 
        end if;
    end process;

    reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((p_initZero_read_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((p_initZero_read_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                reg_166 <= p_accumulator_q1;
            elsif (((p_initZero_read_reg_342 = ap_const_lv1_0) and (p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_166 <= p_accumulator_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add3_2_i_i_reg_450 <= grp_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln410_reg_356 <= add_ln410_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln417_6_reg_410 <= add_ln417_6_fu_306_p2;
                p_accumulator_addr_7_reg_398 <= zext_ln417_7_fu_281_p1(14 - 1 downto 0);
                p_accumulator_addr_8_reg_404 <= zext_ln417_8_fu_296_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Result_20_i_i_reg_383 <= p_values_dout(95 downto 64);
                p_Result_21_i_i_reg_388 <= p_values_dout(127 downto 96);
                p_Result_i_i_reg_378 <= p_values_dout(63 downto 32);
                trunc_ln674_reg_373 <= trunc_ln674_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                p_accumulator_addr_9_reg_420 <= zext_ln417_9_fu_311_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln410_fu_200_p2 = ap_const_lv1_0))) then
                p_accumulator_addr_reg_368 <= zext_ln417_fu_228_p1(14 - 1 downto 0);
                    tmp_s_reg_361(13 downto 2) <= tmp_s_fu_215_p3(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_initZero_read_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                p_accumulator_load_8_reg_415 <= p_accumulator_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_initZero_read_reg_342 <= p_initZero_dout;
                p_weightGradientAvg_offset_read_reg_334 <= p_weightGradientAvg_offset_dout;
                trunc_ln_reg_348 <= mul_ln559_loc_dout(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_171 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_361(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_values_empty_n, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln410_fu_200_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln410_fu_200_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state3 => 
                if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln410_fu_205_p2 <= std_logic_vector(unsigned(i_reg_147) + unsigned(ap_const_lv30_1));
    add_ln417_4_fu_276_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_334) + unsigned(or_ln417_fu_271_p2));
    add_ln417_5_fu_291_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_334) + unsigned(or_ln417_5_fu_286_p2));
    add_ln417_6_fu_306_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_334) + unsigned(or_ln417_6_fu_301_p2));
    add_ln417_fu_223_p2 <= std_logic_vector(unsigned(p_weightGradientAvg_offset_read_reg_334) + unsigned(tmp_s_fu_215_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
                ap_block_state1 <= ((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln101_26_fu_315_p1 <= p_Result_i_i_reg_378;
    bitcast_ln101_28_fu_330_p1 <= p_Result_21_i_i_reg_388;
    bitcast_ln101_fu_267_p1 <= trunc_ln674_reg_373;
    empty_fu_211_p1 <= i_reg_147(12 - 1 downto 0);
    grp_fu_158_p0 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_342(0) = '1') else 
        reg_166;

    grp_fu_158_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state4, bitcast_ln101_fu_267_p1, bitcast_ln101_26_fu_315_p1, bitcast_ln101_28_fu_330_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_158_p1 <= bitcast_ln101_28_fu_330_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_158_p1 <= bitcast_ln101_26_fu_315_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_158_p1 <= bitcast_ln101_fu_267_p1;
        else 
            grp_fu_158_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_162_p0 <= 
        ap_const_lv32_0 when (p_initZero_read_reg_342(0) = '1') else 
        p_accumulator_load_8_reg_415;
    grp_fu_162_p1 <= p_Result_20_i_i_reg_383;
    icmp_ln410_fu_200_p2 <= "1" when (i_reg_147 = trunc_ln_reg_348) else "0";

    mul_ln559_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln559_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln559_loc_blk_n <= mul_ln559_loc_empty_n;
        else 
            mul_ln559_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mul_ln559_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln559_loc_read <= ap_const_logic_1;
        else 
            mul_ln559_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln417_5_fu_286_p2 <= (tmp_s_reg_361 or ap_const_lv14_2);
    or_ln417_6_fu_301_p2 <= (tmp_s_reg_361 or ap_const_lv14_3);
    or_ln417_fu_271_p2 <= (tmp_s_reg_361 or ap_const_lv14_1);

    p_accumulator_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state2, p_accumulator_addr_reg_368, p_accumulator_addr_7_reg_398, ap_CS_fsm_state10, zext_ln417_fu_228_p1, zext_ln417_8_fu_296_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_accumulator_address0 <= p_accumulator_addr_7_reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_accumulator_address0 <= zext_ln417_8_fu_296_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_accumulator_address0 <= p_accumulator_addr_reg_368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_accumulator_address0 <= zext_ln417_fu_228_p1(14 - 1 downto 0);
        else 
            p_accumulator_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state10, p_accumulator_addr_8_reg_404, p_accumulator_addr_9_reg_420, ap_CS_fsm_state18, zext_ln417_7_fu_281_p1, zext_ln417_9_fu_311_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_accumulator_address1 <= p_accumulator_addr_9_reg_420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_accumulator_address1 <= p_accumulator_addr_8_reg_404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_accumulator_address1 <= zext_ln417_9_fu_311_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_accumulator_address1 <= zext_ln417_7_fu_281_p1(14 - 1 downto 0);
        else 
            p_accumulator_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            p_accumulator_ce0 <= ap_const_logic_1;
        else 
            p_accumulator_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state10, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            p_accumulator_ce1 <= ap_const_logic_1;
        else 
            p_accumulator_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_accumulator_d0 <= reg_171;

    p_accumulator_d1_assign_proc : process(reg_171, ap_CS_fsm_state17, add3_2_i_i_reg_450, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            p_accumulator_d1 <= reg_171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_accumulator_d1 <= add3_2_i_i_reg_450;
        else 
            p_accumulator_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_accumulator_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            p_accumulator_we0 <= ap_const_logic_1;
        else 
            p_accumulator_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_accumulator_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            p_accumulator_we1 <= ap_const_logic_1;
        else 
            p_accumulator_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_initZero_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_initZero_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_blk_n <= p_initZero_empty_n;
        else 
            p_initZero_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_initZero_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_initZero_read <= ap_const_logic_1;
        else 
            p_initZero_read <= ap_const_logic_0;
        end if; 
    end process;


    p_values_blk_n_assign_proc : process(p_values_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_values_blk_n <= p_values_empty_n;
        else 
            p_values_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_values_read_assign_proc : process(p_values_empty_n, ap_CS_fsm_state3)
    begin
        if (((p_values_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_values_read <= ap_const_logic_1;
        else 
            p_values_read <= ap_const_logic_0;
        end if; 
    end process;


    p_weightGradientAvg_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_weightGradientAvg_offset_blk_n <= p_weightGradientAvg_offset_empty_n;
        else 
            p_weightGradientAvg_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_weightGradientAvg_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_weightGradientAvg_offset_empty_n, mul_ln559_loc_empty_n, p_initZero_empty_n)
    begin
        if ((not(((p_initZero_empty_n = ap_const_logic_0) or (mul_ln559_loc_empty_n = ap_const_logic_0) or (p_weightGradientAvg_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_weightGradientAvg_offset_read <= ap_const_logic_1;
        else 
            p_weightGradientAvg_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_215_p3 <= (empty_fu_211_p1 & ap_const_lv2_0);
    trunc_ln674_fu_233_p1 <= p_values_dout(32 - 1 downto 0);
    zext_ln417_7_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_4_fu_276_p2),64));
    zext_ln417_8_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_5_fu_291_p2),64));
    zext_ln417_9_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_6_reg_410),64));
    zext_ln417_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_fu_223_p2),64));
end behav;
