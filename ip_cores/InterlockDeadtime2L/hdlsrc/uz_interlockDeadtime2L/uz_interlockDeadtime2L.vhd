-- -------------------------------------------------------------
-- 
-- File Name: /home/ts/Dokumente/ultrazohm_testbench/ultrazohm_test/ultrazohm_sw/ip_cores/InterlockDeadtime2L/hdlsrc/uz_interlockDeadtime2L/uz_interlockDeadtime2L.vhd
-- Created: 2021-04-22 14:35:13
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_interlockDeadtime2L
-- Source Path: uz_interlockDeadtime2L
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_interlockDeadtime2L IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        S0                                :   IN    std_logic;  -- ufix1
        S1                                :   IN    std_logic;  -- ufix1
        S2                                :   IN    std_logic;  -- ufix1
        S3                                :   IN    std_logic;  -- ufix1
        S4                                :   IN    std_logic;  -- ufix1
        S5                                :   IN    std_logic;  -- ufix1
        AXI4_ACLK                         :   IN    std_logic;  -- ufix1
        AXI4_ARESETN                      :   IN    std_logic;  -- ufix1
        AXI4_AWID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_AWADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_AWLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_AWSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_AWLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_AWCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_AWPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_AWVALID                      :   IN    std_logic;  -- ufix1
        AXI4_WDATA                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_WSTRB                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_WLAST                        :   IN    std_logic;  -- ufix1
        AXI4_WVALID                       :   IN    std_logic;  -- ufix1
        AXI4_BREADY                       :   IN    std_logic;  -- ufix1
        AXI4_ARID                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_ARADDR                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_ARLEN                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_ARSIZE                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARBURST                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_ARLOCK                       :   IN    std_logic;  -- ufix1
        AXI4_ARCACHE                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_ARPROT                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_ARVALID                      :   IN    std_logic;  -- ufix1
        AXI4_RREADY                       :   IN    std_logic;  -- ufix1
        s0_out                            :   OUT   std_logic;  -- ufix1
        s1_out                            :   OUT   std_logic;  -- ufix1
        s2_out                            :   OUT   std_logic;  -- ufix1
        s3_out                            :   OUT   std_logic;  -- ufix1
        s4_out                            :   OUT   std_logic;  -- ufix1
        s5_out                            :   OUT   std_logic;  -- ufix1
        enableFB                          :   OUT   std_logic;  -- ufix1
        AXI4_AWREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_WREADY                       :   OUT   std_logic;  -- ufix1
        AXI4_BID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_BRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_BVALID                       :   OUT   std_logic;  -- ufix1
        AXI4_ARREADY                      :   OUT   std_logic;  -- ufix1
        AXI4_RID                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI4_RDATA                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_RRESP                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_RLAST                        :   OUT   std_logic;  -- ufix1
        AXI4_RVALID                       :   OUT   std_logic  -- ufix1
        );
END uz_interlockDeadtime2L;


ARCHITECTURE rtl OF uz_interlockDeadtime2L IS

  -- Component Declarations
  COMPONENT uz_interlockDeadtime2L_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_interlockDeadtime2L_axi4
    PORT( reset_x                         :   IN    std_logic;
          AXI4_ACLK                       :   IN    std_logic;  -- ufix1
          AXI4_ARESETN                    :   IN    std_logic;  -- ufix1
          AXI4_AWID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_AWADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_AWLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_AWSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_AWLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_AWCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_AWPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_AWVALID                    :   IN    std_logic;  -- ufix1
          AXI4_WDATA                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_WSTRB                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_WLAST                      :   IN    std_logic;  -- ufix1
          AXI4_WVALID                     :   IN    std_logic;  -- ufix1
          AXI4_BREADY                     :   IN    std_logic;  -- ufix1
          AXI4_ARID                       :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_ARADDR                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_ARLEN                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_ARSIZE                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARBURST                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_ARLOCK                     :   IN    std_logic;  -- ufix1
          AXI4_ARCACHE                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_ARPROT                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AXI4_ARVALID                    :   IN    std_logic;  -- ufix1
          AXI4_RREADY                     :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_axi_fb_InverseBotSwitch    :   IN    std_logic;  -- ufix1
          read_axi_fb_DelayCycles         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          read_axi_fb_enable              :   IN    std_logic;  -- ufix1
          AXI4_AWREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_WREADY                     :   OUT   std_logic;  -- ufix1
          AXI4_BID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_BRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_BVALID                     :   OUT   std_logic;  -- ufix1
          AXI4_ARREADY                    :   OUT   std_logic;  -- ufix1
          AXI4_RID                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          AXI4_RDATA                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_RRESP                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_RLAST                      :   OUT   std_logic;  -- ufix1
          AXI4_RVALID                     :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_axi_InverseBotSwitch      :   OUT   std_logic;  -- ufix1
          write_axi_EnableOutput          :   OUT   std_logic;  -- ufix1
          write_axi_DelayCycles           :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT uz_interlockDeadtime2L_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          S0                              :   IN    std_logic;  -- ufix1
          S1                              :   IN    std_logic;  -- ufix1
          S2                              :   IN    std_logic;  -- ufix1
          S3                              :   IN    std_logic;  -- ufix1
          S4                              :   IN    std_logic;  -- ufix1
          S5                              :   IN    std_logic;  -- ufix1
          axi_DelayCycles                 :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_EnableOutput                :   IN    std_logic;  -- ufix1
          axi_InverseBotSwitch            :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          s0_out                          :   OUT   std_logic;  -- ufix1
          s1_out                          :   OUT   std_logic;  -- ufix1
          s2_out                          :   OUT   std_logic;  -- ufix1
          s3_out                          :   OUT   std_logic;  -- ufix1
          s4_out                          :   OUT   std_logic;  -- ufix1
          s5_out                          :   OUT   std_logic;  -- ufix1
          axi_fb_enable                   :   OUT   std_logic;  -- ufix1
          axi_fb_DelayCycles              :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          axi_fb_InverseBotSwitch         :   OUT   std_logic;  -- ufix1
          enableFB                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_interlockDeadtime2L_reset_sync
    USE ENTITY work.uz_interlockDeadtime2L_reset_sync(rtl);

  FOR ALL : uz_interlockDeadtime2L_axi4
    USE ENTITY work.uz_interlockDeadtime2L_axi4(rtl);

  FOR ALL : uz_interlockDeadtime2L_dut
    USE ENTITY work.uz_interlockDeadtime2L_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL axi_fb_InverseBotSwitch_sig      : std_logic;  -- ufix1
  SIGNAL axi_fb_DelayCycles_sig           : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL axi_fb_enable_sig                : std_logic;  -- ufix1
  SIGNAL AXI4_BID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_BRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_RID_tmp                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL AXI4_RDATA_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_RRESP_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_axi_InverseBotSwitch       : std_logic;  -- ufix1
  SIGNAL write_axi_EnableOutput           : std_logic;  -- ufix1
  SIGNAL write_axi_DelayCycles            : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL s0_out_sig                       : std_logic;  -- ufix1
  SIGNAL s1_out_sig                       : std_logic;  -- ufix1
  SIGNAL s2_out_sig                       : std_logic;  -- ufix1
  SIGNAL s3_out_sig                       : std_logic;  -- ufix1
  SIGNAL s4_out_sig                       : std_logic;  -- ufix1
  SIGNAL s5_out_sig                       : std_logic;  -- ufix1
  SIGNAL enableFB_sig                     : std_logic;  -- ufix1

BEGIN
  u_uz_interlockDeadtime2L_reset_sync_inst : uz_interlockDeadtime2L_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset_x
              );

  u_uz_interlockDeadtime2L_axi4_inst : uz_interlockDeadtime2L_axi4
    PORT MAP( reset_x => reset_x,
              AXI4_ACLK => AXI4_ACLK,  -- ufix1
              AXI4_ARESETN => AXI4_ARESETN,  -- ufix1
              AXI4_AWID => AXI4_AWID,  -- ufix12
              AXI4_AWADDR => AXI4_AWADDR,  -- ufix16
              AXI4_AWLEN => AXI4_AWLEN,  -- ufix8
              AXI4_AWSIZE => AXI4_AWSIZE,  -- ufix3
              AXI4_AWBURST => AXI4_AWBURST,  -- ufix2
              AXI4_AWLOCK => AXI4_AWLOCK,  -- ufix1
              AXI4_AWCACHE => AXI4_AWCACHE,  -- ufix4
              AXI4_AWPROT => AXI4_AWPROT,  -- ufix3
              AXI4_AWVALID => AXI4_AWVALID,  -- ufix1
              AXI4_WDATA => AXI4_WDATA,  -- ufix32
              AXI4_WSTRB => AXI4_WSTRB,  -- ufix4
              AXI4_WLAST => AXI4_WLAST,  -- ufix1
              AXI4_WVALID => AXI4_WVALID,  -- ufix1
              AXI4_BREADY => AXI4_BREADY,  -- ufix1
              AXI4_ARID => AXI4_ARID,  -- ufix12
              AXI4_ARADDR => AXI4_ARADDR,  -- ufix16
              AXI4_ARLEN => AXI4_ARLEN,  -- ufix8
              AXI4_ARSIZE => AXI4_ARSIZE,  -- ufix3
              AXI4_ARBURST => AXI4_ARBURST,  -- ufix2
              AXI4_ARLOCK => AXI4_ARLOCK,  -- ufix1
              AXI4_ARCACHE => AXI4_ARCACHE,  -- ufix4
              AXI4_ARPROT => AXI4_ARPROT,  -- ufix3
              AXI4_ARVALID => AXI4_ARVALID,  -- ufix1
              AXI4_RREADY => AXI4_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_axi_fb_InverseBotSwitch => axi_fb_InverseBotSwitch_sig,  -- ufix1
              read_axi_fb_DelayCycles => axi_fb_DelayCycles_sig,  -- ufix10
              read_axi_fb_enable => axi_fb_enable_sig,  -- ufix1
              AXI4_AWREADY => AXI4_AWREADY,  -- ufix1
              AXI4_WREADY => AXI4_WREADY,  -- ufix1
              AXI4_BID => AXI4_BID_tmp,  -- ufix12
              AXI4_BRESP => AXI4_BRESP_tmp,  -- ufix2
              AXI4_BVALID => AXI4_BVALID,  -- ufix1
              AXI4_ARREADY => AXI4_ARREADY,  -- ufix1
              AXI4_RID => AXI4_RID_tmp,  -- ufix12
              AXI4_RDATA => AXI4_RDATA_tmp,  -- ufix32
              AXI4_RRESP => AXI4_RRESP_tmp,  -- ufix2
              AXI4_RLAST => AXI4_RLAST,  -- ufix1
              AXI4_RVALID => AXI4_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_axi_InverseBotSwitch => write_axi_InverseBotSwitch,  -- ufix1
              write_axi_EnableOutput => write_axi_EnableOutput,  -- ufix1
              write_axi_DelayCycles => write_axi_DelayCycles,  -- ufix10
              reset_internal => reset_internal  -- ufix1
              );

  u_uz_interlockDeadtime2L_dut_inst : uz_interlockDeadtime2L_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => write_axi_enable,  -- ufix1
              S0 => S0,  -- ufix1
              S1 => S1,  -- ufix1
              S2 => S2,  -- ufix1
              S3 => S3,  -- ufix1
              S4 => S4,  -- ufix1
              S5 => S5,  -- ufix1
              axi_DelayCycles => write_axi_DelayCycles,  -- ufix10
              axi_EnableOutput => write_axi_EnableOutput,  -- ufix1
              axi_InverseBotSwitch => write_axi_InverseBotSwitch,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              s0_out => s0_out_sig,  -- ufix1
              s1_out => s1_out_sig,  -- ufix1
              s2_out => s2_out_sig,  -- ufix1
              s3_out => s3_out_sig,  -- ufix1
              s4_out => s4_out_sig,  -- ufix1
              s5_out => s5_out_sig,  -- ufix1
              axi_fb_enable => axi_fb_enable_sig,  -- ufix1
              axi_fb_DelayCycles => axi_fb_DelayCycles_sig,  -- ufix10
              axi_fb_InverseBotSwitch => axi_fb_InverseBotSwitch_sig,  -- ufix1
              enableFB => enableFB_sig  -- ufix1
              );

  ip_timestamp <= to_unsigned(2104221435, 32);

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  s0_out <= s0_out_sig;

  s1_out <= s1_out_sig;

  s2_out <= s2_out_sig;

  s3_out <= s3_out_sig;

  s4_out <= s4_out_sig;

  s5_out <= s5_out_sig;

  enableFB <= enableFB_sig;

  AXI4_BID <= AXI4_BID_tmp;

  AXI4_BRESP <= AXI4_BRESP_tmp;

  AXI4_RID <= AXI4_RID_tmp;

  AXI4_RDATA <= AXI4_RDATA_tmp;

  AXI4_RRESP <= AXI4_RRESP_tmp;

END rtl;

