-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_PI_Controller_sample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    self_i : IN STD_LOGIC_VECTOR (223 downto 0);
    self_o : OUT STD_LOGIC_VECTOR (223 downto 0);
    self_o_ap_vld : OUT STD_LOGIC;
    referenceValue : IN STD_LOGIC_VECTOR (31 downto 0);
    actualValue : IN STD_LOGIC_VECTOR (31 downto 0);
    ext_clamping : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uz_PI_Controller_sample is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uz_PI_Controller_sample_uz_PI_Controller_sample,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu9eg-ffrc900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.221000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1306,HLS_SYN_LUT=1710,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln101_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln104_1_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_2_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_2_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_3_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_3_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_4_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_4_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_5_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_5_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_858 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_16_reg_864 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln107_fu_346_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln107_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_sum_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal old_I_sum_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal old_I_sum_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal or_ln36_1_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_1_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln109_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln36_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fcmp_ln36_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln104_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln104_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bitcast_ln104_1_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln104_1_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln24_3_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_3_reg_931 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal and_ln24_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_2_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal or_ln36_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sign_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sign_1_fu_617_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_2_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_3_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_3_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_156_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_169_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_212_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_1_fu_272_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_294_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_3_fu_304_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln36_1_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_1_fu_378_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln36_3_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_2_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln24_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_416_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_426_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln24_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_2_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_2_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_4_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln36_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_fu_517_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln36_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln36_2_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_3_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_2_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln84_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln84_1_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_630_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln84_fu_640_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_648_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln84_1_fu_658_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln84_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln84_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln84_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_1_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_2_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln84_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln107_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln109_1_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal clamping_active_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_3_fu_740_p6 : STD_LOGIC_VECTOR (223 downto 0);
    signal or_ln109_3_fu_755_p6 : STD_LOGIC_VECTOR (223 downto 0);
    signal select_ln105_fu_766_p3 : STD_LOGIC_VECTOR (223 downto 0);
    signal trunc_ln107_1_fu_774_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_722_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_784_p4 : STD_LOGIC_VECTOR (214 downto 0);
    signal or_ln107_fu_778_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_145_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_164_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_169_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component uz_PI_Controller_sample_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_Controller_sample_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component uz_PI_Controller_sample_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_145_p0,
        din1 => grp_fu_145_p1,
        opcode => grp_fu_145_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U2 : component uz_PI_Controller_sample_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => old_I_sum_reg_886,
        din1 => reg_193,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_156_p0,
        din1 => grp_fu_156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U4 : component uz_PI_Controller_sample_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_184,
        din1 => grp_fu_160_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U5 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        din1 => grp_fu_164_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_164_opcode,
        dout => grp_fu_164_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U6 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_169_p0,
        din1 => grp_fu_169_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_169_opcode,
        dout => grp_fu_169_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U7 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_174_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_174_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U8 : component uz_PI_Controller_sample_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => output_2_reg_946,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_179_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                P_sum_reg_881 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                and_ln24_3_reg_931 <= and_ln24_3_fu_468_p2;
                and_ln24_reg_936 <= and_ln24_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bitcast_ln104_1_reg_925 <= bitcast_ln104_1_fu_408_p1;
                bitcast_ln104_reg_918 <= bitcast_ln104_fu_404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                fcmp_ln36_reg_908 <= grp_fu_169_p2;
                fcmp_ln36_reg_913 <= grp_fu_174_p2;
                tmp_7_reg_903 <= grp_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln24_2_reg_838 <= icmp_ln24_2_fu_282_p2;
                icmp_ln24_3_reg_843 <= icmp_ln24_3_fu_288_p2;
                icmp_ln24_4_reg_848 <= icmp_ln24_4_fu_314_p2;
                icmp_ln24_5_reg_853 <= icmp_ln24_5_fu_320_p2;
                tmp_15_reg_858 <= self_i(223 downto 64);
                tmp_16_reg_864 <= self_i(31 downto 16);
                trunc_ln104_1_reg_833 <= self_i(223 downto 192);
                trunc_ln107_reg_870 <= trunc_ln107_fu_346_p1;
                trunc_ln3_reg_828 <= self_i(191 downto 160);
                trunc_ln6_reg_876 <= self_i(159 downto 128);
                trunc_ln_reg_813 <= self_i(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                icmp_ln84_1_reg_982 <= icmp_ln84_1_fu_668_p2;
                icmp_ln84_2_reg_987 <= icmp_ln84_2_fu_674_p2;
                icmp_ln84_3_reg_992 <= icmp_ln84_3_fu_680_p2;
                icmp_ln84_reg_977 <= icmp_ln84_fu_662_p2;
                tmp_11_reg_972 <= grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                old_I_sum_reg_886 <= old_I_sum_fu_360_p1;
                or_ln36_1_reg_892 <= or_ln36_1_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                or_ln36_reg_955 <= or_ln36_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                output_2_reg_946 <= output_2_fu_497_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_184 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_193 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln24_reg_936))) then
                select_ln26_reg_941 <= select_ln26_fu_491_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln24_1_fu_452_p2 <= (or_ln24_fu_442_p2 and or_ln24_1_fu_448_p2);
    and_ln24_2_fu_458_p2 <= (grp_fu_164_p2 and and_ln24_1_fu_452_p2);
    and_ln24_3_fu_468_p2 <= (or_ln24_fu_442_p2 and or_ln24_2_fu_464_p2);
    and_ln24_4_fu_474_p2 <= (grp_fu_169_p2 and and_ln24_3_fu_468_p2);
    and_ln24_fu_480_p2 <= (and_ln24_4_fu_474_p2 and and_ln24_2_fu_458_p2);
    and_ln26_fu_486_p2 <= (grp_fu_164_p2 and and_ln24_3_reg_931);
    and_ln36_1_fu_570_p2 <= (or_ln36_reg_955 and and_ln36_fu_564_p2);
    and_ln36_2_fu_584_p2 <= (tmp_7_reg_903 and or_ln36_1_reg_892);
    and_ln36_3_fu_612_p2 <= (or_ln36_1_reg_892 and and_ln36_fu_606_p2);
    and_ln36_fu_539_p2 <= (or_ln36_reg_955 and grp_fu_164_p2);
    and_ln36_fu_564_p2 <= (xor_ln36_fu_558_p2 and xor_ln36_fu_552_p2);
    and_ln36_fu_606_p2 <= (xor_ln36_fu_601_p2 and xor_ln36_fu_596_p2);
    and_ln84_1_fu_704_p2 <= (or_ln84_fu_696_p2 and or_ln84_1_fu_700_p2);
    and_ln84_2_fu_710_p2 <= (grp_fu_164_p2 and and_ln84_1_fu_704_p2);
    and_ln84_fu_686_p2 <= (tmp_11_reg_972 and or_ln36_reg_955);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= reg_184;
    bitcast_ln101_fu_222_p1 <= trunc_ln1_fu_212_p4;
    bitcast_ln104_1_fu_408_p1 <= trunc_ln104_1_reg_833;
    bitcast_ln104_fu_404_p1 <= trunc_ln3_reg_828;
    bitcast_ln107_fu_736_p1 <= grp_fu_145_p2;
    bitcast_ln109_1_fu_751_p1 <= grp_fu_152_p2;
    bitcast_ln109_fu_400_p1 <= trunc_ln6_reg_876;
    bitcast_ln24_fu_412_p1 <= reg_184;
    bitcast_ln36_1_fu_364_p1 <= reg_193;
    bitcast_ln36_fu_504_p1 <= output_2_reg_946;
    bitcast_ln84_1_fu_644_p1 <= sign_1_fu_617_p3;
    bitcast_ln84_fu_626_p1 <= sign_fu_575_p3;
    clamping_active_fu_730_p2 <= (output_fu_716_p2 or ext_clamping);

    grp_fu_145_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, and_ln24_reg_936, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = and_ln24_reg_936)))) then 
            grp_fu_145_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_145_opcode <= ap_const_lv2_0;
        else 
            grp_fu_145_opcode <= "XX";
        end if; 
    end process;


    grp_fu_145_p0_assign_proc : process(ap_CS_fsm_state1, referenceValue, reg_184, old_I_sum_fu_360_p1, old_I_sum_reg_886, ap_CS_fsm_state10, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_145_p0 <= old_I_sum_reg_886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_145_p0 <= reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_145_p0 <= old_I_sum_fu_360_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_145_p0 <= referenceValue;
        else 
            grp_fu_145_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_145_p1_assign_proc : process(ap_CS_fsm_state1, actualValue, P_sum_reg_881, ap_CS_fsm_state10, select_ln26_reg_941, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_145_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_145_p1 <= select_ln26_reg_941;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_145_p1 <= P_sum_reg_881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_145_p1 <= actualValue;
        else 
            grp_fu_145_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_156_p0_assign_proc : process(reg_184, reg_193, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_156_p0 <= reg_193;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_156_p0 <= reg_184;
        else 
            grp_fu_156_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_156_p1_assign_proc : process(ap_CS_fsm_state6, bitcast_ln101_fu_222_p1, ap_CS_fsm_state10, bitcast_ln109_fu_400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_156_p1 <= bitcast_ln109_fu_400_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_156_p1 <= bitcast_ln101_fu_222_p1;
        else 
            grp_fu_156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_160_p1 <= trunc_ln2_fu_227_p4;

    grp_fu_164_opcode_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15, and_ln24_reg_936, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_164_opcode <= ap_const_lv5_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = and_ln24_reg_936))) then 
            grp_fu_164_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_164_opcode <= ap_const_lv5_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_164_opcode <= ap_const_lv5_4;
        else 
            grp_fu_164_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_164_p0_assign_proc : process(reg_184, reg_193, ap_CS_fsm_state10, ap_CS_fsm_state15, output_2_reg_946, ap_CS_fsm_state24, sign_fu_575_p3, ap_CS_fsm_state25, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_164_p0 <= sign_fu_575_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_164_p0 <= output_2_reg_946;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_164_p0 <= reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_164_p0 <= reg_193;
        else 
            grp_fu_164_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_164_p1_assign_proc : process(ap_CS_fsm_state10, bitcast_ln104_reg_918, ap_CS_fsm_state15, bitcast_ln104_1_fu_408_p1, ap_CS_fsm_state24, ap_CS_fsm_state25, sign_1_fu_617_p3, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_164_p1 <= sign_1_fu_617_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_164_p1 <= bitcast_ln104_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_164_p1 <= bitcast_ln104_1_fu_408_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_164_p1 <= ap_const_lv32_0;
        else 
            grp_fu_164_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_169_opcode_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_169_opcode <= ap_const_lv5_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_169_opcode <= ap_const_lv5_8;
        else 
            grp_fu_169_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_169_p0_assign_proc : process(reg_184, reg_193, ap_CS_fsm_state10, ap_CS_fsm_state15, output_2_reg_946, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_169_p0 <= output_2_reg_946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_169_p0 <= reg_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_169_p0 <= reg_193;
        else 
            grp_fu_169_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_169_p1_assign_proc : process(ap_CS_fsm_state10, bitcast_ln104_fu_404_p1, ap_CS_fsm_state15, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_169_p1 <= bitcast_ln104_fu_404_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_169_p1 <= ap_const_lv32_0;
        else 
            grp_fu_169_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_174_p0_assign_proc : process(reg_193, ap_CS_fsm_state10, output_2_reg_946, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_174_p0 <= output_2_reg_946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_174_p0 <= reg_193;
        else 
            grp_fu_174_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln24_1_fu_436_p2 <= "1" when (trunc_ln24_fu_426_p1 = ap_const_lv23_0) else "0";
    icmp_ln24_2_fu_282_p2 <= "0" when (tmp_1_fu_262_p4 = ap_const_lv8_FF) else "1";
    icmp_ln24_3_fu_288_p2 <= "1" when (trunc_ln24_1_fu_272_p4 = ap_const_lv23_0) else "0";
    icmp_ln24_4_fu_314_p2 <= "0" when (tmp_4_fu_294_p4 = ap_const_lv8_FF) else "1";
    icmp_ln24_5_fu_320_p2 <= "1" when (trunc_ln24_3_fu_304_p4 = ap_const_lv23_0) else "0";
    icmp_ln24_fu_430_p2 <= "0" when (tmp_fu_416_p4 = ap_const_lv8_FF) else "1";
    icmp_ln36_1_fu_527_p2 <= "1" when (trunc_ln36_fu_517_p1 = ap_const_lv23_0) else "0";
    icmp_ln36_2_fu_382_p2 <= "0" when (tmp_6_fu_368_p4 = ap_const_lv8_FF) else "1";
    icmp_ln36_3_fu_388_p2 <= "1" when (trunc_ln36_1_fu_378_p1 = ap_const_lv23_0) else "0";
    icmp_ln36_fu_521_p2 <= "0" when (tmp_9_fu_507_p4 = ap_const_lv8_FF) else "1";
    icmp_ln84_1_fu_668_p2 <= "1" when (trunc_ln84_fu_640_p1 = ap_const_lv23_0) else "0";
    icmp_ln84_2_fu_674_p2 <= "0" when (tmp_13_fu_648_p4 = ap_const_lv8_FF) else "1";
    icmp_ln84_3_fu_680_p2 <= "1" when (trunc_ln84_1_fu_658_p1 = ap_const_lv23_0) else "0";
    icmp_ln84_fu_662_p2 <= "0" when (tmp_12_fu_630_p4 = ap_const_lv8_FF) else "1";
    old_I_sum_fu_360_p1 <= trunc_ln_reg_813;
    or_ln107_3_fu_740_p6 <= ((((tmp_15_reg_858 & bitcast_ln107_fu_736_p1) & tmp_16_reg_864) & ap_const_lv8_0) & trunc_ln107_reg_870);
    or_ln107_fu_778_p2 <= (trunc_ln107_1_fu_774_p1 or shl_ln_fu_722_p3);
    or_ln109_3_fu_755_p6 <= ((((tmp_15_reg_858 & bitcast_ln109_1_fu_751_p1) & tmp_16_reg_864) & ap_const_lv8_0) & trunc_ln107_reg_870);
    or_ln24_1_fu_448_p2 <= (icmp_ln24_3_reg_843 or icmp_ln24_2_reg_838);
    or_ln24_2_fu_464_p2 <= (icmp_ln24_5_reg_853 or icmp_ln24_4_reg_848);
    or_ln24_fu_442_p2 <= (icmp_ln24_fu_430_p2 or icmp_ln24_1_fu_436_p2);
    or_ln36_1_fu_394_p2 <= (icmp_ln36_3_fu_388_p2 or icmp_ln36_2_fu_382_p2);
    or_ln36_fu_533_p2 <= (icmp_ln36_fu_521_p2 or icmp_ln36_1_fu_527_p2);
    or_ln84_1_fu_700_p2 <= (icmp_ln84_3_reg_992 or icmp_ln84_2_reg_987);
    or_ln84_fu_696_p2 <= (icmp_ln84_reg_977 or icmp_ln84_1_reg_982);
    output_2_fu_497_p3 <= 
        ap_const_lv32_0 when (and_ln24_reg_936(0) = '1') else 
        grp_fu_145_p2;
    output_fu_716_p2 <= (xor_ln84_fu_690_p2 and and_ln84_2_fu_710_p2);
    select_ln105_fu_766_p3 <= 
        or_ln107_3_fu_740_p6 when (clamping_active_fu_730_p2(0) = '1') else 
        or_ln109_3_fu_755_p6;
    select_ln26_fu_491_p3 <= 
        bitcast_ln104_reg_918 when (and_ln26_fu_486_p2(0) = '1') else 
        bitcast_ln104_1_reg_925;
    select_ln36_2_fu_588_p3 <= 
        ap_const_lv32_BF800000 when (and_ln36_2_fu_584_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln36_fu_544_p3 <= 
        ap_const_lv32_BF800000 when (and_ln36_fu_539_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    self_o <= (tmp_17_fu_784_p4 & or_ln107_fu_778_p2);

    self_o_ap_vld_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            self_o_ap_vld <= ap_const_logic_1;
        else 
            self_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_722_p3 <= (output_fu_716_p2 & ap_const_lv8_0);
    sign_1_fu_617_p3 <= 
        select_ln36_2_fu_588_p3 when (and_ln36_3_fu_612_p2(0) = '1') else 
        ap_const_lv32_0;
    sign_fu_575_p3 <= 
        select_ln36_fu_544_p3 when (and_ln36_1_fu_570_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_12_fu_630_p4 <= bitcast_ln84_fu_626_p1(30 downto 23);
    tmp_13_fu_648_p4 <= bitcast_ln84_1_fu_644_p1(30 downto 23);
    tmp_17_fu_784_p4 <= select_ln105_fu_766_p3(223 downto 9);
    tmp_1_fu_262_p4 <= self_i(222 downto 215);
    tmp_4_fu_294_p4 <= self_i(190 downto 183);
    tmp_6_fu_368_p4 <= bitcast_ln36_1_fu_364_p1(30 downto 23);
    tmp_9_fu_507_p4 <= bitcast_ln36_fu_504_p1(30 downto 23);
    tmp_fu_416_p4 <= bitcast_ln24_fu_412_p1(30 downto 23);
    trunc_ln107_1_fu_774_p1 <= select_ln105_fu_766_p3(9 - 1 downto 0);
    trunc_ln107_fu_346_p1 <= self_i(8 - 1 downto 0);
    trunc_ln1_fu_212_p4 <= self_i(127 downto 96);
    trunc_ln24_1_fu_272_p4 <= self_i(214 downto 192);
    trunc_ln24_3_fu_304_p4 <= self_i(182 downto 160);
    trunc_ln24_fu_426_p1 <= bitcast_ln24_fu_412_p1(23 - 1 downto 0);
    trunc_ln2_fu_227_p4 <= self_i(95 downto 64);
    trunc_ln36_1_fu_378_p1 <= bitcast_ln36_1_fu_364_p1(23 - 1 downto 0);
    trunc_ln36_fu_517_p1 <= bitcast_ln36_fu_504_p1(23 - 1 downto 0);
    trunc_ln84_1_fu_658_p1 <= bitcast_ln84_1_fu_644_p1(23 - 1 downto 0);
    trunc_ln84_fu_640_p1 <= bitcast_ln84_fu_626_p1(23 - 1 downto 0);
    xor_ln36_fu_552_p2 <= (grp_fu_169_p2 xor ap_const_lv1_1);
    xor_ln36_fu_558_p2 <= (grp_fu_174_p2 xor ap_const_lv1_1);
    xor_ln36_fu_596_p2 <= (fcmp_ln36_reg_908 xor ap_const_lv1_1);
    xor_ln36_fu_601_p2 <= (fcmp_ln36_reg_913 xor ap_const_lv1_1);
    xor_ln84_fu_690_p2 <= (ap_const_lv1_1 xor and_ln84_fu_686_p2);
end behav;
