-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uz_Park_sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uz_Park_sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_15_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_V_fu_299_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_V_reg_1212 : STD_LOGIC_VECTOR (7 downto 0);
    signal closepath_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_319_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_16_reg_1226 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln628_fu_352_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln628_reg_1236 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1019_1_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal Med_V_reg_1247 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_V_reg_1252 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Mx_bits_V_3_fu_442_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_V_3_reg_1257 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_fu_498_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_reg_1262 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_V_1_fu_514_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_V_1_reg_1268 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Mx_V_fu_531_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1274 : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_V_3_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1279 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_601_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1284 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_reg_1289 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1271_fu_625_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln1019_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1306 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal cos_basis_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_fu_812_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1346 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal t1_V_reg_1356 : STD_LOGIC_VECTOR (28 downto 0);
    signal rhs_1_reg_1361 : STD_LOGIC_VECTOR (21 downto 0);
    signal result_V_reg_1371 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Result_21_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_22_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_22_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1653_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal targetBlock_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_c_0_023_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_c_0_023_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_c_1_022_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_c_1_022_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_shift_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_shift_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_in_shift_V_1_cast_out : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_in_shift_V_1_cast_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_shift_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_shift_1_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_trunc_ln2_out : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_trunc_ln2_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start_reg : STD_LOGIC := '0';
    signal shift_loc_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_shift_V_1_cast_loc_fu_188 : STD_LOGIC_VECTOR (27 downto 0);
    signal shift_1_loc_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_loc_fu_180 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln541_1_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data_V_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln214_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_329_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_337_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal din_sig_V_fu_309_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln930_fu_362_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_7_fu_365_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_17_fu_381_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_392_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_392_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1027_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_fu_397_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_s_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_436_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_4_fu_450_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_18_fu_460_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_2_fu_468_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_19_fu_478_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1198_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_assign_fu_490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ex_V_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1454_fu_523_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_fu_526_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_507_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln841_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1535_fu_547_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1512_fu_559_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_565_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1488_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1512_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1488_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1513_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_trunc_fu_615_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_639_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_23_fu_696_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_702_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_740_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln307_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_fu_778_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_2_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_squared_fu_820_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1156_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal B_squared_fu_820_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_850_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_2_fu_850_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1163_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln813_fu_885_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln813_1_fu_888_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_2_fu_876_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_1_fu_891_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1347_fu_897_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_2_fu_901_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_V_1_fu_870_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_6_fu_915_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_6_fu_915_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_2_fu_931_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_950_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal Ex_V_4_fu_982_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln186_fu_988_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln329_fu_1011_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln329_fu_1017_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln318_fu_1004_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1027_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1040_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_10_fu_1050_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln335_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_1078_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1067_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln288_fu_1071_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_exp_V_1_fu_1090_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln300_1_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln318_1_fu_1060_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln300_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_3_fu_1115_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln300_fu_1127_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal results_exp_V_fu_1098_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sig_V_fu_1135_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_24_fu_1143_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1156_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1156_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1163_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal grp_fu_1163_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_2_fu_850_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_6_fu_915_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal ret_V_fu_392_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component uz_Park_sin_or_cos_float_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_Result_24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_Result_23 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_0_023_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_0_023_out_ap_vld : OUT STD_LOGIC;
        c_1_022_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_1_022_out_ap_vld : OUT STD_LOGIC );
    end component;


    component uz_Park_sin_or_cos_float_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_V : IN STD_LOGIC_VECTOR (28 downto 0);
        c_1_022_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        c_0_023_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        shift_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        shift_out_ap_vld : OUT STD_LOGIC;
        in_shift_V_1_cast_out : OUT STD_LOGIC_VECTOR (27 downto 0);
        in_shift_V_1_cast_out_ap_vld : OUT STD_LOGIC;
        shift_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        shift_1_out_ap_vld : OUT STD_LOGIC;
        trunc_ln2_out : OUT STD_LOGIC_VECTOR (27 downto 0);
        trunc_ln2_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_Park_mul_80s_24ns_80_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component uz_Park_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_Park_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uz_Park_mul_23s_22ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component uz_Park_mul_30s_29ns_58_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component uz_Park_mul_mul_15ns_15ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component uz_Park_mul_mul_15ns_15s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component uz_Park_sin_or_cos_float_s_ref_4oPi_table_100_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component uz_Park_sin_or_cos_float_s_second_order_float_sin_cos_K0_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component uz_Park_sin_or_cos_float_s_second_order_float_sin_cos_K1_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component uz_Park_sin_or_cos_float_s_second_order_float_sin_cos_K2_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component uz_Park_sin_or_cos_float_s_ref_4oPi_table_100_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_sin_cos_K0_V_U : component uz_Park_sin_or_cos_float_s_second_order_float_sin_cos_K0_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K0_V_address0,
        ce0 => second_order_float_sin_cos_K0_V_ce0,
        q0 => second_order_float_sin_cos_K0_V_q0);

    second_order_float_sin_cos_K1_V_U : component uz_Park_sin_or_cos_float_s_second_order_float_sin_cos_K1_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K1_V_address0,
        ce0 => second_order_float_sin_cos_K1_V_ce0,
        q0 => second_order_float_sin_cos_K1_V_q0);

    second_order_float_sin_cos_K2_V_U : component uz_Park_sin_or_cos_float_s_second_order_float_sin_cos_K2_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K2_V_address0,
        ce0 => second_order_float_sin_cos_K2_V_ce0,
        q0 => second_order_float_sin_cos_K2_V_q0);

    grp_sin_or_cos_float_Pipeline_1_fu_268 : component uz_Park_sin_or_cos_float_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start,
        ap_done => grp_sin_or_cos_float_Pipeline_1_fu_268_ap_done,
        ap_idle => grp_sin_or_cos_float_Pipeline_1_fu_268_ap_idle,
        ap_ready => grp_sin_or_cos_float_Pipeline_1_fu_268_ap_ready,
        p_Result_24 => p_Result_22_reg_1382,
        p_Result_23 => p_Result_21_reg_1377,
        c_0_023_out => grp_sin_or_cos_float_Pipeline_1_fu_268_c_0_023_out,
        c_0_023_out_ap_vld => grp_sin_or_cos_float_Pipeline_1_fu_268_c_0_023_out_ap_vld,
        c_1_022_out => grp_sin_or_cos_float_Pipeline_1_fu_268_c_1_022_out,
        c_1_022_out_ap_vld => grp_sin_or_cos_float_Pipeline_1_fu_268_c_1_022_out_ap_vld);

    grp_sin_or_cos_float_Pipeline_2_fu_276 : component uz_Park_sin_or_cos_float_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start,
        ap_done => grp_sin_or_cos_float_Pipeline_2_fu_276_ap_done,
        ap_idle => grp_sin_or_cos_float_Pipeline_2_fu_276_ap_idle,
        ap_ready => grp_sin_or_cos_float_Pipeline_2_fu_276_ap_ready,
        result_V => result_V_reg_1371,
        c_1_022_reload => grp_sin_or_cos_float_Pipeline_1_fu_268_c_1_022_out,
        c_0_023_reload => grp_sin_or_cos_float_Pipeline_1_fu_268_c_0_023_out,
        shift_out => grp_sin_or_cos_float_Pipeline_2_fu_276_shift_out,
        shift_out_ap_vld => grp_sin_or_cos_float_Pipeline_2_fu_276_shift_out_ap_vld,
        in_shift_V_1_cast_out => grp_sin_or_cos_float_Pipeline_2_fu_276_in_shift_V_1_cast_out,
        in_shift_V_1_cast_out_ap_vld => grp_sin_or_cos_float_Pipeline_2_fu_276_in_shift_V_1_cast_out_ap_vld,
        shift_1_out => grp_sin_or_cos_float_Pipeline_2_fu_276_shift_1_out,
        shift_1_out_ap_vld => grp_sin_or_cos_float_Pipeline_2_fu_276_shift_1_out_ap_vld,
        trunc_ln2_out => grp_sin_or_cos_float_Pipeline_2_fu_276_trunc_ln2_out,
        trunc_ln2_out_ap_vld => grp_sin_or_cos_float_Pipeline_2_fu_276_trunc_ln2_out_ap_vld,
        ap_return => grp_sin_or_cos_float_Pipeline_2_fu_276_ap_return);

    mul_80s_24ns_80_1_1_U12 : component uz_Park_mul_80s_24ns_80_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 80)
    port map (
        din0 => Med_V_reg_1247,
        din1 => ret_V_fu_392_p1,
        dout => ret_V_fu_392_p2);

    mux_83_1_1_1_U13 : component uz_Park_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => k_V_1_reg_1268,
        dout => tmp_s_fu_639_p10);

    mux_164_1_1_1_U14 : component uz_Park_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_23_fu_696_p3,
        dout => tmp_6_fu_702_p18);

    mux_164_1_1_1_U15 : component uz_Park_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_23_fu_696_p3,
        dout => tmp_7_fu_740_p18);

    mul_23s_22ns_45_1_1_U16 : component uz_Park_mul_23s_22ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 22,
        dout_WIDTH => 45)
    port map (
        din0 => second_order_float_sin_cos_K1_V_q0,
        din1 => r_V_2_fu_850_p1,
        dout => r_V_2_fu_850_p2);

    mul_30s_29ns_58_1_1_U17 : component uz_Park_mul_30s_29ns_58_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        din0 => ret_V_2_fu_901_p2,
        din1 => r_V_6_fu_915_p1,
        dout => r_V_6_fu_915_p2);

    mul_mul_15ns_15ns_30_4_1_U18 : component uz_Park_mul_mul_15ns_15ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1156_p0,
        din1 => grp_fu_1156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1156_p2);

    mul_mul_15ns_15s_30_4_1_U19 : component uz_Park_mul_mul_15ns_15s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1163_p0,
        din1 => second_order_float_sin_cos_K2_V_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_1163_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_Pipeline_1_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_Pipeline_2_fu_276_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                B_reg_1284 <= B_fu_601_p1;
                Ex_V_3_reg_1279 <= Ex_V_3_fu_541_p2;
                Mx_V_reg_1274 <= r_fu_526_p2(57 downto 29);
                icmp_ln1019_2_reg_1306 <= icmp_ln1019_2_fu_634_p2;
                icmp_ln1019_reg_1300 <= icmp_ln1019_fu_629_p2;
                k_V_1_reg_1268 <= k_V_1_fu_514_p3;
                tmp_1_reg_1289 <= select_ln1513_fu_593_p3(28 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Med_V_reg_1247 <= r_V_7_fu_365_p2(99 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Mx_bits_V_3_reg_1257 <= Mx_bits_V_3_fu_442_p3;
                Mx_zeros_reg_1262 <= Mx_zeros_fu_498_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln300_reg_1340 <= and_ln300_fu_786_p2;
                cos_basis_reg_1319 <= cos_basis_fu_666_p3;
                results_sign_V_4_reg_1346 <= results_sign_V_4_fu_812_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                closepath_reg_1219 <= closepath_fu_313_p2;
                din_exp_V_reg_1212 <= data_V_fu_287_p1(30 downto 23);
                icmp_ln1019_1_reg_1241 <= icmp_ln1019_1_fu_356_p2;
                p_Result_15_reg_1206 <= data_V_fu_287_p1(31 downto 31);
                p_Result_16_reg_1226 <= p_Result_16_fu_319_p1;
                trunc_ln628_reg_1236 <= trunc_ln628_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln1653_reg_1393 <= icmp_ln1653_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sin_or_cos_float_Pipeline_2_fu_276_in_shift_V_1_cast_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                in_shift_V_1_cast_loc_fu_188 <= grp_sin_or_cos_float_Pipeline_2_fu_276_in_shift_V_1_cast_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                k_V_reg_1252 <= ret_V_fu_392_p2(79 downto 77);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    p_Result_21_reg_1377(31 downto 16) <= p_Result_21_fu_941_p3(31 downto 16);
                    p_Result_22_reg_1382(31 downto 19) <= p_Result_22_fu_960_p3(31 downto 19);
                result_V_reg_1371 <= r_V_6_fu_915_p2(57 downto 29);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                rhs_1_reg_1361 <= r_V_2_fu_850_p2(44 downto 23);
                t1_V_reg_1356 <= second_order_float_sin_cos_K0_V_q0(29 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sin_or_cos_float_Pipeline_2_fu_276_shift_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                shift_1_loc_fu_184 <= grp_sin_or_cos_float_Pipeline_2_fu_276_shift_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sin_or_cos_float_Pipeline_2_fu_276_shift_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                shift_loc_fu_192 <= grp_sin_or_cos_float_Pipeline_2_fu_276_shift_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                targetBlock_reg_1398 <= grp_sin_or_cos_float_Pipeline_2_fu_276_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sin_or_cos_float_Pipeline_2_fu_276_trunc_ln2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                trunc_ln2_loc_fu_180 <= grp_sin_or_cos_float_Pipeline_2_fu_276_trunc_ln2_out;
            end if;
        end if;
    end process;
    p_Result_21_reg_1377(15 downto 0) <= "1000000000000000";
    p_Result_22_reg_1382(18 downto 0) <= "1000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, grp_sin_or_cos_float_Pipeline_1_fu_268_ap_done, grp_sin_or_cos_float_Pipeline_2_fu_276_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_sin_or_cos_float_Pipeline_1_fu_268_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_sin_or_cos_float_Pipeline_2_fu_276_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    B_fu_601_p1 <= select_ln1513_fu_593_p3(22 - 1 downto 0);
    B_squared_fu_820_p1 <= grp_fu_1156_p2;
    B_squared_fu_820_p4 <= B_squared_fu_820_p1(29 downto 15);
    B_trunc_fu_615_p4 <= select_ln1513_fu_593_p3(21 downto 7);
    Ex_V_3_fu_541_p2 <= std_logic_vector(unsigned(select_ln482_fu_507_p3) - unsigned(zext_ln841_fu_520_p1));
    Ex_V_4_fu_982_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1319(0) = '1') else 
        Ex_V_3_reg_1279;
    Ex_V_fu_502_p2 <= std_logic_vector(unsigned(din_exp_V_reg_1212) + unsigned(ap_const_lv8_83));
    Mx_V_1_fu_870_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1319(0) = '1') else 
        Mx_V_reg_1274;
    Mx_V_fu_531_p4 <= r_fu_526_p2(57 downto 29);
    Mx_bits_V_1_fu_436_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(Mx_bits_V_fu_397_p4));
    Mx_bits_V_3_fu_442_p3 <= 
        Mx_bits_V_1_fu_436_p2 when (p_Result_s_fu_430_p2(0) = '1') else 
        Mx_bits_V_fu_397_p4;
    Mx_bits_V_fu_397_p4 <= ret_V_fu_392_p2(76 downto 19);
    Mx_zeros_fu_498_p1 <= op_assign_fu_490_p3(6 - 1 downto 0);
    add_ln214_fu_323_p2 <= std_logic_vector(unsigned(din_exp_V_fu_299_p4) + unsigned(ap_const_lv8_C2));
    add_ln329_fu_1011_p2 <= std_logic_vector(signed(sext_ln186_fu_988_p1) + signed(ap_const_lv9_7F));
    addr_V_fu_329_p3 <= 
        ap_const_lv8_3F when (closepath_fu_313_p2(0) = '1') else 
        add_ln214_fu_323_p2;
    and_ln300_1_fu_1105_p2 <= (icmp_ln1019_reg_1300 and icmp_ln1019_1_reg_1241);
    and_ln300_fu_786_p2 <= (icmp_ln1019_reg_1300 and icmp_ln1019_1_reg_1241);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_sin_or_cos_float_Pipeline_1_fu_268_ap_done)
    begin
        if ((grp_sin_or_cos_float_Pipeline_1_fu_268_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_sin_or_cos_float_Pipeline_2_fu_276_ap_done)
    begin
        if ((grp_sin_or_cos_float_Pipeline_2_fu_276_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_24_fu_1143_p4;
    closepath_fu_313_p2 <= "1" when (unsigned(din_exp_V_fu_299_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_666_p3 <= 
        xor_ln271_fu_660_p2 when (do_cos(0) = '1') else 
        tmp_s_fu_639_p10;
    data_V_fu_287_p1 <= t_in;
    din_exp_V_fu_299_p4 <= data_V_fu_287_p1(30 downto 23);
    din_sig_V_fu_309_p1 <= data_V_fu_287_p1(23 - 1 downto 0);
    empty_fu_1067_p1 <= newexp_fu_1021_p2(8 - 1 downto 0);
    grp_fu_1156_p0 <= zext_ln1271_fu_625_p1(15 - 1 downto 0);
    grp_fu_1156_p1 <= zext_ln1271_fu_625_p1(15 - 1 downto 0);
    grp_fu_1163_p0 <= grp_fu_1163_p00(15 - 1 downto 0);
    grp_fu_1163_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_fu_820_p4),30));
    grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start <= grp_sin_or_cos_float_Pipeline_1_fu_268_ap_start_reg;
    grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start <= grp_sin_or_cos_float_Pipeline_2_fu_276_ap_start_reg;
    icmp_ln1019_1_fu_356_p2 <= "1" when (din_sig_V_fu_309_p1 = ap_const_lv23_0) else "0";
    icmp_ln1019_2_fu_634_p2 <= "1" when (din_exp_V_reg_1212 = ap_const_lv8_FF) else "0";
    icmp_ln1019_fu_629_p2 <= "1" when (din_exp_V_reg_1212 = ap_const_lv8_0) else "0";
    icmp_ln1653_fu_977_p2 <= "1" when (result_V_reg_1371 = ap_const_lv29_0) else "0";
    isNeg_fu_551_p3 <= Ex_V_3_fu_541_p2(7 downto 7);
    k_V_1_fu_514_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1219(0) = '1') else 
        k_V_reg_1252;
    lshr_ln1488_fu_581_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1488_fu_577_p1),to_integer(unsigned('0' & sext_ln1512_fu_573_p1(31-1 downto 0)))));
    lshr_ln_fu_337_p4 <= addr_V_fu_329_p3(7 downto 4);
    newexp_fu_1021_p2 <= std_logic_vector(signed(sext_ln329_fu_1017_p1) - signed(select_ln318_fu_1004_p3));
    
    op_assign_fu_490_p3_proc : process(sext_ln1198_fu_486_p1)
    begin
        op_assign_fu_490_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_fu_486_p1(i) = '1' then
                op_assign_fu_490_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    or_ln300_fu_1123_p2 <= (icmp_ln1019_2_reg_1306 or and_ln300_reg_1340);
    or_ln311_fu_1085_p2 <= (or_ln335_fu_1035_p2 or icmp_ln1019_2_reg_1306);
    or_ln335_fu_1035_p2 <= (tmp_8_fu_1027_p3 or icmp_ln1653_reg_1393);
    p_Result_16_fu_319_p1 <= data_V_fu_287_p1(23 - 1 downto 0);
    p_Result_17_fu_381_p3 <= (ap_const_lv1_1 & p_Result_16_reg_1226);
    p_Result_18_fu_460_p3 <= (tmp_4_fu_450_p4 & ap_const_lv1_1);
    p_Result_19_fu_478_p3 <= (ap_const_lv1_1 & p_Result_2_fu_468_p4);
    p_Result_20_fu_682_p3 <= (sin_basis_fu_674_p3 & tmp_1_reg_1289);
    p_Result_21_fu_941_p3 <= (tmp_2_fu_931_p4 & ap_const_lv16_8000);
    p_Result_22_fu_960_p3 <= (tmp_3_fu_950_p4 & ap_const_lv19_40000);
    p_Result_23_fu_696_p3 <= (p_Result_15_reg_1206 & k_V_1_reg_1268);
    p_Result_24_fu_1143_p4 <= ((results_sign_V_4_reg_1346 & results_exp_V_fu_1098_p3) & results_sig_V_fu_1135_p3);
    
    p_Result_2_fu_468_p4_proc : process(p_Result_18_fu_460_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_2_fu_468_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_18_fu_460_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_2_fu_468_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_2_fu_468_p4_i) := p_Result_18_fu_460_p3(30-1-p_Result_2_fu_468_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_2_fu_468_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Result_s_fu_430_p2 <= (xor_ln1027_fu_425_p2 and tmp_fu_417_p3);
    r_V_2_fu_850_p1 <= r_V_2_fu_850_p10(22 - 1 downto 0);
    r_V_2_fu_850_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1284),45));
    r_V_6_fu_915_p1 <= r_V_6_fu_915_p10(29 - 1 downto 0);
    r_V_6_fu_915_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_1_fu_870_p3),58));
    r_V_7_fu_365_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & zext_ln930_fu_362_p1(31-1 downto 0)))));
    r_fu_526_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_V_3_reg_1257),to_integer(unsigned('0' & zext_ln1454_fu_523_p1(31-1 downto 0)))));
    ref_4oPi_table_100_V_address0 <= zext_ln541_1_fu_347_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_V_1_fu_1090_p3 <= 
        select_ln311_fu_1078_p3 when (or_ln311_fu_1085_p2(0) = '1') else 
        empty_fu_1067_p1;
    results_exp_V_fu_1098_p3 <= 
        select_ln288_fu_1071_p3 when (and_ln300_reg_1340(0) = '1') else 
        results_exp_V_1_fu_1090_p3;
    results_sig_V_fu_1135_p3 <= 
        select_ln300_3_fu_1115_p3 when (or_ln300_fu_1123_p2(0) = '1') else 
        select_ln300_fu_1127_p3;
    results_sign_V_2_fu_796_p2 <= (xor_ln307_fu_790_p2 and p_Result_15_reg_1206);
    results_sign_V_3_fu_806_p2 <= (xor_ln311_fu_801_p2 and results_sign_V_fu_778_p3);
    results_sign_V_4_fu_812_p3 <= 
        results_sign_V_2_fu_796_p2 when (and_ln300_fu_786_p2(0) = '1') else 
        results_sign_V_3_fu_806_p2;
    results_sign_V_fu_778_p3 <= 
        tmp_6_fu_702_p18 when (cos_basis_fu_666_p3(0) = '1') else 
        tmp_7_fu_740_p18;
    ret_V_1_fu_891_p2 <= std_logic_vector(signed(sext_ln813_fu_885_p1) + signed(sext_ln813_1_fu_888_p1));
    ret_V_2_fu_901_p2 <= std_logic_vector(unsigned(ret_V_1_fu_891_p2) + unsigned(sext_ln1347_fu_897_p1));
    ret_V_fu_392_p1 <= ret_V_fu_392_p10(24 - 1 downto 0);
    ret_V_fu_392_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_17_fu_381_p3),80));
    rhs_2_fu_876_p4 <= grp_fu_1163_p2(29 downto 16);
    second_order_float_sin_cos_K0_V_address0 <= zext_ln541_fu_689_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K0_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            second_order_float_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K1_V_address0 <= zext_ln541_fu_689_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K1_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            second_order_float_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K2_V_address0 <= zext_ln541_fu_689_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K2_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            second_order_float_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1513_fu_593_p3 <= 
        lshr_ln1488_fu_581_p2 when (isNeg_fu_551_p3(0) = '1') else 
        shl_ln1454_fu_587_p2;
    select_ln288_fu_1071_p3 <= 
        ap_const_lv8_7F when (do_cos(0) = '1') else 
        ap_const_lv8_0;
    select_ln300_3_fu_1115_p3 <= 
        ap_const_lv23_7FFFFF when (xor_ln300_fu_1109_p2(0) = '1') else 
        ap_const_lv23_0;
    select_ln300_fu_1127_p3 <= 
        ap_const_lv23_0 when (or_ln335_fu_1035_p2(0) = '1') else 
        select_ln318_1_fu_1060_p3;
    select_ln311_fu_1078_p3 <= 
        ap_const_lv8_FF when (icmp_ln1019_2_reg_1306(0) = '1') else 
        ap_const_lv8_0;
    select_ln318_1_fu_1060_p3 <= 
        tmp_9_fu_1040_p4 when (targetBlock_reg_1398(0) = '1') else 
        tmp_10_fu_1050_p4;
    select_ln318_fu_1004_p3 <= 
        shift_loc_fu_192 when (targetBlock_reg_1398(0) = '1') else 
        shift_1_loc_fu_184;
    select_ln482_fu_507_p3 <= 
        Ex_V_fu_502_p2 when (closepath_reg_1219(0) = '1') else 
        ap_const_lv8_0;
        sext_ln1198_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_19_fu_478_p3),32));

        sext_ln1347_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_fu_876_p4),30));

        sext_ln1512_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_565_p3),32));

        sext_ln1535_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_3_fu_541_p2),9));

        sext_ln186_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_4_fu_982_p3),9));

        sext_ln329_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln329_fu_1011_p2),32));

        sext_ln813_1_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_reg_1361),30));

        sext_ln813_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_reg_1356),30));

    shl_ln1454_fu_587_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1488_fu_577_p1),to_integer(unsigned('0' & sext_ln1512_fu_573_p1(31-1 downto 0)))));
    sin_basis_fu_674_p3 <= 
        tmp_s_fu_639_p10 when (do_cos(0) = '1') else 
        xor_ln271_fu_660_p2;
    sub_ln1512_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln1535_fu_547_p1));
    tmp_10_fu_1050_p4 <= trunc_ln2_loc_fu_180(27 downto 5);
    tmp_2_fu_931_p4 <= r_V_6_fu_915_p2(57 downto 42);
    tmp_3_fu_950_p4 <= r_V_6_fu_915_p2(41 downto 29);
    tmp_4_fu_450_p4 <= Mx_bits_V_3_fu_442_p3(57 downto 29);
    tmp_8_fu_1027_p3 <= newexp_fu_1021_p2(31 downto 31);
    tmp_9_fu_1040_p4 <= in_shift_V_1_cast_loc_fu_188(27 downto 5);
    tmp_fu_417_p3 <= ret_V_fu_392_p2(77 downto 77);
    trunc_ln628_fu_352_p1 <= addr_V_fu_329_p3(4 - 1 downto 0);
    ush_fu_565_p3 <= 
        sub_ln1512_fu_559_p2 when (isNeg_fu_551_p3(0) = '1') else 
        sext_ln1535_fu_547_p1;
    xor_ln1027_fu_425_p2 <= (closepath_reg_1219 xor ap_const_lv1_1);
    xor_ln271_fu_660_p2 <= (tmp_s_fu_639_p10 xor ap_const_lv1_1);
    xor_ln300_fu_1109_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1105_p2);
    xor_ln307_fu_790_p2 <= (do_cos xor ap_const_lv1_1);
    xor_ln311_fu_801_p2 <= (icmp_ln1019_2_reg_1306 xor ap_const_lv1_1);
    zext_ln1271_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_fu_615_p4),30));
    zext_ln1454_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1262),58));
    zext_ln1488_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_fu_531_p4),32));
    zext_ln541_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_337_p4),64));
    zext_ln541_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_682_p3),64));
    zext_ln841_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1262),8));
    zext_ln930_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_reg_1236),100));
end behav;
