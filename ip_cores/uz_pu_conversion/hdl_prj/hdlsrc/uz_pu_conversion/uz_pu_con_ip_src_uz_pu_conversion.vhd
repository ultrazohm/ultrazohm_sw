-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\uz_pu_conversion\uz_pu_con_ip_src_uz_pu_conversion.vhd
-- Created: 2022-08-10 10:10:26
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pu_con_ip_src_uz_pu_conversion
-- Source Path: uz_pu_conversion/uz_pu_conversion
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pu_con_ip_src_uz_pu_conversion_pkg.ALL;

ENTITY uz_pu_con_ip_src_uz_pu_conversion IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        in0                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in1                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in2                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in3                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in4                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in5                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in6                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in7                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in8                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in9                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in10                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in11                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in12                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in13                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in14                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in15                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in16                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in17                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in18                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in19                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in20                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in21                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in22                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in23                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in24                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in25                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in26                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in27                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in28                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in29                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in30                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        in31                              :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
        AXI_pu_conv_in0                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in1                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in2                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in3                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in4                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in5                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in6                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in7                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in8                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in9                   :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in10                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in11                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in12                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in13                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in14                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in15                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in16                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in17                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in18                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in19                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in20                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in21                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in22                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in23                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in24                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in25                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in26                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in27                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in28                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in29                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in30                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        AXI_pu_conv_in31                  :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        adc_valid_trigger                 :   IN    std_logic;
        out0                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out2                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out3                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out4                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out5                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out6                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out7                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out8                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out9                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out10                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out11                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out12                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out13                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out14                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out15                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out16                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out17                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out18                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out19                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out20                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out21                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out22                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out23                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out24                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out25                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out26                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out27                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out28                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out29                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out30                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out31                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        pu_conv_done                      :   OUT   std_logic;
        out0_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out1_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out2_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out3_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out4_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out5_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out6_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out7_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out8_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out9_AXI                          :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out10_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out11_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out12_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out13_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out14_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out15_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out16_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out17_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out18_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out19_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out20_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out21_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out22_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out23_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out24_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out25_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out26_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out27_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out28_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out29_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out30_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        out31_AXI                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
        );
END uz_pu_con_ip_src_uz_pu_conversion;


ARCHITECTURE rtl OF uz_pu_con_ip_src_uz_pu_conversion IS

  -- Component Declarations
  COMPONENT uz_pu_con_ip_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pu_con_ip_src_Detect_Rise_Positive
    USE ENTITY work.uz_pu_con_ip_src_Detect_Rise_Positive(rtl);

  -- Signals
  SIGNAL AXI_pu_conv_in0_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL Delay32_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay32_out1                     : std_logic;
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL in0_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay33_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay33_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay_out1                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product_cast                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product_mul_temp                 : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product_cast_1                   : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product_out1                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg                      : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product_out1_1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in1_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL in1_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay34_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay34_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch1_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay1_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product1_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product1_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product1_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product1_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_1                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product1_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in2_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL in2_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay35_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay35_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch2_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay2_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product2_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product2_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product2_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product2_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_2                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product2_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in3_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL in3_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay36_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay36_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch3_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay3_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product3_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product3_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product3_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product3_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_3                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product3_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in4_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL in4_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay37_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay37_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch4_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product4_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product4_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product4_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product4_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_4                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product4_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in5_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL in5_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay38_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay38_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch5_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product5_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product5_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product5_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product5_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_5                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product5_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in6_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL in6_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay39_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay39_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch6_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay6_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product6_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product6_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product6_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product6_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_6                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product6_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in7_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL in7_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay40_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay40_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch7_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay7_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product7_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product7_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product7_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product7_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_7                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product7_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in8_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL in8_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay41_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay41_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch8_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay8_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product8_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product8_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product8_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product8_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_8                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product8_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in9_unsigned         : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL in9_signed                       : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay42_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay42_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch9_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay9_out1                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product9_cast                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product9_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product9_cast_1                  : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product9_out1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_9                    : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product9_out1_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in10_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL in10_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay43_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay43_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch10_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay10_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product10_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product10_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product10_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product10_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_10                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product10_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in11_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL in11_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay44_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay44_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch11_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay11_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product11_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product11_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product11_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product11_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_11                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product11_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in12_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL in12_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay45_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay45_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch12_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay12_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product12_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product12_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product12_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product12_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_12                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product12_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in13_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL in13_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay46_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay46_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch13_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay13_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product13_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product13_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product13_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product13_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_13                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product13_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in14_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL in14_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay47_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay47_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch14_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay14_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product14_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product14_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product14_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product14_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_14                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product14_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in15_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL in15_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay48_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay48_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch15_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay15_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product15_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product15_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product15_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product15_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_15                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product15_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in16_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL in16_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay49_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay49_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch16_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay16_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product16_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product16_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product16_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product16_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_16                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product16_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in17_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL in17_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay50_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay50_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch17_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay17_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product17_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product17_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product17_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product17_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_17                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product17_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in18_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL in18_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay51_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay51_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch18_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay18_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product24_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product24_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product24_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product24_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_18                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product24_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in19_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL in19_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay52_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay52_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch19_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay19_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product25_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product25_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product25_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product25_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_19                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product25_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in20_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL in20_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay53_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay53_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch20_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay20_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product26_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product26_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product26_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product26_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_20                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product26_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in21_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL in21_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay54_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay54_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch21_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay21_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product27_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product27_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product27_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product27_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_21                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product27_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in22_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL in22_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay55_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay55_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch22_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay22_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product28_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product28_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product28_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product28_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_22                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product28_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in23_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL in23_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay56_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay56_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch23_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay23_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product29_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product29_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product29_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product29_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_23                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product29_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in24_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL in24_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay57_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay57_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch24_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay24_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product30_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product30_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product30_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product30_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_24                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product30_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in25_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL in25_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay58_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay58_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch25_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay25_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product31_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product31_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product31_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product31_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_25                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product31_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in26_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL in26_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay59_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay59_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch26_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay26_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product18_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product18_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product18_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product18_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_26                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product18_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in27_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL in27_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay60_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay60_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch27_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay27_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product19_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product19_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product19_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product19_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_27                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product19_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in28_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL in28_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay61_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay61_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch28_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay28_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product20_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product20_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product20_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product20_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_28                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product20_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in29_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL in29_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay62_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay62_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch29_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay29_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product21_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product21_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product21_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product21_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_29                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product21_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in30_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL in30_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay63_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay63_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch30_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay30_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product22_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product22_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product22_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product22_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_30                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product22_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL AXI_pu_conv_in31_unsigned        : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL in31_signed                      : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay64_reg                      : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay64_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Switch31_out1                    : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Delay31_out1                     : signed(26 DOWNTO 0);  -- sfix27_En15
  SIGNAL Product23_cast                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Product23_mul_temp               : signed(45 DOWNTO 0);  -- sfix46_En33
  SIGNAL Product23_cast_1                 : signed(44 DOWNTO 0);  -- sfix45_En33
  SIGNAL Product23_out1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL reduced_reg_31                   : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Product23_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay129_reg                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay129_out1                    : std_logic;

BEGIN
  u_Detect_Rise_Positive : uz_pu_con_ip_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              U => Delay32_out1,
              Y => Detect_Rise_Positive_out1
              );

  AXI_pu_conv_in0_unsigned <= unsigned(AXI_pu_conv_in0);

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay32_reg <= (OTHERS => '0');
      ELSE 
        Delay32_reg(0) <= adc_valid_trigger;
        Delay32_reg(1) <= Delay32_reg(0);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(1);

  
  switch_compare_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in0_signed <= signed(in0);

  Delay33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay33_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay33_reg(0) <= in0_signed;
        Delay33_reg(1) <= Delay33_reg(0);
      END IF;
    END IF;
  END PROCESS Delay33_process;

  Delay33_out1 <= Delay33_reg(1);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= Delay_out1 WHEN switch_compare_1 = '0' ELSE
      Delay33_out1;

  Product_cast <= signed(resize(AXI_pu_conv_in0_unsigned, 19));
  Product_mul_temp <= Product_cast * Switch_out1;
  Product_cast_1 <= Product_mul_temp(44 DOWNTO 0);
  Product_out1 <= Product_cast_1(35 DOWNTO 18);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg(0) <= Product_out1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Product_out1_1 <= reduced_reg(1);

  out0 <= std_logic_vector(Product_out1_1);

  AXI_pu_conv_in1_unsigned <= unsigned(AXI_pu_conv_in1);

  
  switch_compare_1_1 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in1_signed <= signed(in1);

  Delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay34_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay34_reg(0) <= in1_signed;
        Delay34_reg(1) <= Delay34_reg(0);
      END IF;
    END IF;
  END PROCESS Delay34_process;

  Delay34_out1 <= Delay34_reg(1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch1_out1 <= Delay1_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay34_out1;

  Product1_cast <= signed(resize(AXI_pu_conv_in1_unsigned, 19));
  Product1_mul_temp <= Product1_cast * Switch1_out1;
  Product1_cast_1 <= Product1_mul_temp(44 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(35 DOWNTO 18);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_1(0) <= Product1_out1;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Product1_out1_1 <= reduced_reg_1(1);

  out1 <= std_logic_vector(Product1_out1_1);

  AXI_pu_conv_in2_unsigned <= unsigned(AXI_pu_conv_in2);

  
  switch_compare_1_2 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in2_signed <= signed(in2);

  Delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay35_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay35_reg(0) <= in2_signed;
        Delay35_reg(1) <= Delay35_reg(0);
      END IF;
    END IF;
  END PROCESS Delay35_process;

  Delay35_out1 <= Delay35_reg(1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch2_out1 <= Delay2_out1 WHEN switch_compare_1_2 = '0' ELSE
      Delay35_out1;

  Product2_cast <= signed(resize(AXI_pu_conv_in2_unsigned, 19));
  Product2_mul_temp <= Product2_cast * Switch2_out1;
  Product2_cast_1 <= Product2_mul_temp(44 DOWNTO 0);
  Product2_out1 <= Product2_cast_1(35 DOWNTO 18);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_2(0) <= Product2_out1;
        reduced_reg_2(1) <= reduced_reg_2(0);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  Product2_out1_1 <= reduced_reg_2(1);

  out2 <= std_logic_vector(Product2_out1_1);

  AXI_pu_conv_in3_unsigned <= unsigned(AXI_pu_conv_in3);

  
  switch_compare_1_3 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in3_signed <= signed(in3);

  Delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay36_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay36_reg(0) <= in3_signed;
        Delay36_reg(1) <= Delay36_reg(0);
      END IF;
    END IF;
  END PROCESS Delay36_process;

  Delay36_out1 <= Delay36_reg(1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay3_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch3_out1 <= Delay3_out1 WHEN switch_compare_1_3 = '0' ELSE
      Delay36_out1;

  Product3_cast <= signed(resize(AXI_pu_conv_in3_unsigned, 19));
  Product3_mul_temp <= Product3_cast * Switch3_out1;
  Product3_cast_1 <= Product3_mul_temp(44 DOWNTO 0);
  Product3_out1 <= Product3_cast_1(35 DOWNTO 18);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_3 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_3(0) <= Product3_out1;
        reduced_reg_3(1) <= reduced_reg_3(0);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  Product3_out1_1 <= reduced_reg_3(1);

  out3 <= std_logic_vector(Product3_out1_1);

  AXI_pu_conv_in4_unsigned <= unsigned(AXI_pu_conv_in4);

  
  switch_compare_1_4 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in4_signed <= signed(in4);

  Delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay37_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay37_reg(0) <= in4_signed;
        Delay37_reg(1) <= Delay37_reg(0);
      END IF;
    END IF;
  END PROCESS Delay37_process;

  Delay37_out1 <= Delay37_reg(1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay4_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch4_out1 <= Delay4_out1 WHEN switch_compare_1_4 = '0' ELSE
      Delay37_out1;

  Product4_cast <= signed(resize(AXI_pu_conv_in4_unsigned, 19));
  Product4_mul_temp <= Product4_cast * Switch4_out1;
  Product4_cast_1 <= Product4_mul_temp(44 DOWNTO 0);
  Product4_out1 <= Product4_cast_1(35 DOWNTO 18);

  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_4 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_4(0) <= Product4_out1;
        reduced_reg_4(1) <= reduced_reg_4(0);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  Product4_out1_1 <= reduced_reg_4(1);

  out4 <= std_logic_vector(Product4_out1_1);

  AXI_pu_conv_in5_unsigned <= unsigned(AXI_pu_conv_in5);

  
  switch_compare_1_5 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in5_signed <= signed(in5);

  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay38_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay38_reg(0) <= in5_signed;
        Delay38_reg(1) <= Delay38_reg(0);
      END IF;
    END IF;
  END PROCESS Delay38_process;

  Delay38_out1 <= Delay38_reg(1);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay5_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch5_out1 <= Delay5_out1 WHEN switch_compare_1_5 = '0' ELSE
      Delay38_out1;

  Product5_cast <= signed(resize(AXI_pu_conv_in5_unsigned, 19));
  Product5_mul_temp <= Product5_cast * Switch5_out1;
  Product5_cast_1 <= Product5_mul_temp(44 DOWNTO 0);
  Product5_out1 <= Product5_cast_1(35 DOWNTO 18);

  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_5 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_5(0) <= Product5_out1;
        reduced_reg_5(1) <= reduced_reg_5(0);
      END IF;
    END IF;
  END PROCESS reduced_5_process;

  Product5_out1_1 <= reduced_reg_5(1);

  out5 <= std_logic_vector(Product5_out1_1);

  AXI_pu_conv_in6_unsigned <= unsigned(AXI_pu_conv_in6);

  
  switch_compare_1_6 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in6_signed <= signed(in6);

  Delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay39_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay39_reg(0) <= in6_signed;
        Delay39_reg(1) <= Delay39_reg(0);
      END IF;
    END IF;
  END PROCESS Delay39_process;

  Delay39_out1 <= Delay39_reg(1);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay6_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch6_out1 <= Delay6_out1 WHEN switch_compare_1_6 = '0' ELSE
      Delay39_out1;

  Product6_cast <= signed(resize(AXI_pu_conv_in6_unsigned, 19));
  Product6_mul_temp <= Product6_cast * Switch6_out1;
  Product6_cast_1 <= Product6_mul_temp(44 DOWNTO 0);
  Product6_out1 <= Product6_cast_1(35 DOWNTO 18);

  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_6 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_6(0) <= Product6_out1;
        reduced_reg_6(1) <= reduced_reg_6(0);
      END IF;
    END IF;
  END PROCESS reduced_6_process;

  Product6_out1_1 <= reduced_reg_6(1);

  out6 <= std_logic_vector(Product6_out1_1);

  AXI_pu_conv_in7_unsigned <= unsigned(AXI_pu_conv_in7);

  
  switch_compare_1_7 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in7_signed <= signed(in7);

  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay40_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay40_reg(0) <= in7_signed;
        Delay40_reg(1) <= Delay40_reg(0);
      END IF;
    END IF;
  END PROCESS Delay40_process;

  Delay40_out1 <= Delay40_reg(1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay7_out1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch7_out1 <= Delay7_out1 WHEN switch_compare_1_7 = '0' ELSE
      Delay40_out1;

  Product7_cast <= signed(resize(AXI_pu_conv_in7_unsigned, 19));
  Product7_mul_temp <= Product7_cast * Switch7_out1;
  Product7_cast_1 <= Product7_mul_temp(44 DOWNTO 0);
  Product7_out1 <= Product7_cast_1(35 DOWNTO 18);

  reduced_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_7 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_7(0) <= Product7_out1;
        reduced_reg_7(1) <= reduced_reg_7(0);
      END IF;
    END IF;
  END PROCESS reduced_7_process;

  Product7_out1_1 <= reduced_reg_7(1);

  out7 <= std_logic_vector(Product7_out1_1);

  AXI_pu_conv_in8_unsigned <= unsigned(AXI_pu_conv_in8);

  
  switch_compare_1_8 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in8_signed <= signed(in8);

  Delay41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay41_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay41_reg(0) <= in8_signed;
        Delay41_reg(1) <= Delay41_reg(0);
      END IF;
    END IF;
  END PROCESS Delay41_process;

  Delay41_out1 <= Delay41_reg(1);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay8_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch8_out1 <= Delay8_out1 WHEN switch_compare_1_8 = '0' ELSE
      Delay41_out1;

  Product8_cast <= signed(resize(AXI_pu_conv_in8_unsigned, 19));
  Product8_mul_temp <= Product8_cast * Switch8_out1;
  Product8_cast_1 <= Product8_mul_temp(44 DOWNTO 0);
  Product8_out1 <= Product8_cast_1(35 DOWNTO 18);

  reduced_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_8 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_8(0) <= Product8_out1;
        reduced_reg_8(1) <= reduced_reg_8(0);
      END IF;
    END IF;
  END PROCESS reduced_8_process;

  Product8_out1_1 <= reduced_reg_8(1);

  out8 <= std_logic_vector(Product8_out1_1);

  AXI_pu_conv_in9_unsigned <= unsigned(AXI_pu_conv_in9);

  
  switch_compare_1_9 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in9_signed <= signed(in9);

  Delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay42_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay42_reg(0) <= in9_signed;
        Delay42_reg(1) <= Delay42_reg(0);
      END IF;
    END IF;
  END PROCESS Delay42_process;

  Delay42_out1 <= Delay42_reg(1);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay9_out1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch9_out1 <= Delay9_out1 WHEN switch_compare_1_9 = '0' ELSE
      Delay42_out1;

  Product9_cast <= signed(resize(AXI_pu_conv_in9_unsigned, 19));
  Product9_mul_temp <= Product9_cast * Switch9_out1;
  Product9_cast_1 <= Product9_mul_temp(44 DOWNTO 0);
  Product9_out1 <= Product9_cast_1(35 DOWNTO 18);

  reduced_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_9 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_9(0) <= Product9_out1;
        reduced_reg_9(1) <= reduced_reg_9(0);
      END IF;
    END IF;
  END PROCESS reduced_9_process;

  Product9_out1_1 <= reduced_reg_9(1);

  out9 <= std_logic_vector(Product9_out1_1);

  AXI_pu_conv_in10_unsigned <= unsigned(AXI_pu_conv_in10);

  
  switch_compare_1_10 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in10_signed <= signed(in10);

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay43_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay43_reg(0) <= in10_signed;
        Delay43_reg(1) <= Delay43_reg(0);
      END IF;
    END IF;
  END PROCESS Delay43_process;

  Delay43_out1 <= Delay43_reg(1);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay10_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch10_out1 <= Delay10_out1 WHEN switch_compare_1_10 = '0' ELSE
      Delay43_out1;

  Product10_cast <= signed(resize(AXI_pu_conv_in10_unsigned, 19));
  Product10_mul_temp <= Product10_cast * Switch10_out1;
  Product10_cast_1 <= Product10_mul_temp(44 DOWNTO 0);
  Product10_out1 <= Product10_cast_1(35 DOWNTO 18);

  reduced_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_10 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_10(0) <= Product10_out1;
        reduced_reg_10(1) <= reduced_reg_10(0);
      END IF;
    END IF;
  END PROCESS reduced_10_process;

  Product10_out1_1 <= reduced_reg_10(1);

  out10 <= std_logic_vector(Product10_out1_1);

  AXI_pu_conv_in11_unsigned <= unsigned(AXI_pu_conv_in11);

  
  switch_compare_1_11 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in11_signed <= signed(in11);

  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay44_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay44_reg(0) <= in11_signed;
        Delay44_reg(1) <= Delay44_reg(0);
      END IF;
    END IF;
  END PROCESS Delay44_process;

  Delay44_out1 <= Delay44_reg(1);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay11_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay11_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch11_out1 <= Delay11_out1 WHEN switch_compare_1_11 = '0' ELSE
      Delay44_out1;

  Product11_cast <= signed(resize(AXI_pu_conv_in11_unsigned, 19));
  Product11_mul_temp <= Product11_cast * Switch11_out1;
  Product11_cast_1 <= Product11_mul_temp(44 DOWNTO 0);
  Product11_out1 <= Product11_cast_1(35 DOWNTO 18);

  reduced_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_11 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_11(0) <= Product11_out1;
        reduced_reg_11(1) <= reduced_reg_11(0);
      END IF;
    END IF;
  END PROCESS reduced_11_process;

  Product11_out1_1 <= reduced_reg_11(1);

  out11 <= std_logic_vector(Product11_out1_1);

  AXI_pu_conv_in12_unsigned <= unsigned(AXI_pu_conv_in12);

  
  switch_compare_1_12 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in12_signed <= signed(in12);

  Delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay45_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay45_reg(0) <= in12_signed;
        Delay45_reg(1) <= Delay45_reg(0);
      END IF;
    END IF;
  END PROCESS Delay45_process;

  Delay45_out1 <= Delay45_reg(1);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay12_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay12_out1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  Switch12_out1 <= Delay12_out1 WHEN switch_compare_1_12 = '0' ELSE
      Delay45_out1;

  Product12_cast <= signed(resize(AXI_pu_conv_in12_unsigned, 19));
  Product12_mul_temp <= Product12_cast * Switch12_out1;
  Product12_cast_1 <= Product12_mul_temp(44 DOWNTO 0);
  Product12_out1 <= Product12_cast_1(35 DOWNTO 18);

  reduced_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_12 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_12(0) <= Product12_out1;
        reduced_reg_12(1) <= reduced_reg_12(0);
      END IF;
    END IF;
  END PROCESS reduced_12_process;

  Product12_out1_1 <= reduced_reg_12(1);

  out12 <= std_logic_vector(Product12_out1_1);

  AXI_pu_conv_in13_unsigned <= unsigned(AXI_pu_conv_in13);

  
  switch_compare_1_13 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in13_signed <= signed(in13);

  Delay46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay46_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay46_reg(0) <= in13_signed;
        Delay46_reg(1) <= Delay46_reg(0);
      END IF;
    END IF;
  END PROCESS Delay46_process;

  Delay46_out1 <= Delay46_reg(1);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay13_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay13_out1 <= Switch13_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  
  Switch13_out1 <= Delay13_out1 WHEN switch_compare_1_13 = '0' ELSE
      Delay46_out1;

  Product13_cast <= signed(resize(AXI_pu_conv_in13_unsigned, 19));
  Product13_mul_temp <= Product13_cast * Switch13_out1;
  Product13_cast_1 <= Product13_mul_temp(44 DOWNTO 0);
  Product13_out1 <= Product13_cast_1(35 DOWNTO 18);

  reduced_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_13 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_13(0) <= Product13_out1;
        reduced_reg_13(1) <= reduced_reg_13(0);
      END IF;
    END IF;
  END PROCESS reduced_13_process;

  Product13_out1_1 <= reduced_reg_13(1);

  out13 <= std_logic_vector(Product13_out1_1);

  AXI_pu_conv_in14_unsigned <= unsigned(AXI_pu_conv_in14);

  
  switch_compare_1_14 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in14_signed <= signed(in14);

  Delay47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay47_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay47_reg(0) <= in14_signed;
        Delay47_reg(1) <= Delay47_reg(0);
      END IF;
    END IF;
  END PROCESS Delay47_process;

  Delay47_out1 <= Delay47_reg(1);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay14_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay14_out1 <= Switch14_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  
  Switch14_out1 <= Delay14_out1 WHEN switch_compare_1_14 = '0' ELSE
      Delay47_out1;

  Product14_cast <= signed(resize(AXI_pu_conv_in14_unsigned, 19));
  Product14_mul_temp <= Product14_cast * Switch14_out1;
  Product14_cast_1 <= Product14_mul_temp(44 DOWNTO 0);
  Product14_out1 <= Product14_cast_1(35 DOWNTO 18);

  reduced_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_14 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_14(0) <= Product14_out1;
        reduced_reg_14(1) <= reduced_reg_14(0);
      END IF;
    END IF;
  END PROCESS reduced_14_process;

  Product14_out1_1 <= reduced_reg_14(1);

  out14 <= std_logic_vector(Product14_out1_1);

  AXI_pu_conv_in15_unsigned <= unsigned(AXI_pu_conv_in15);

  
  switch_compare_1_15 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in15_signed <= signed(in15);

  Delay48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay48_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay48_reg(0) <= in15_signed;
        Delay48_reg(1) <= Delay48_reg(0);
      END IF;
    END IF;
  END PROCESS Delay48_process;

  Delay48_out1 <= Delay48_reg(1);

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay15_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay15_out1 <= Switch15_out1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  
  Switch15_out1 <= Delay15_out1 WHEN switch_compare_1_15 = '0' ELSE
      Delay48_out1;

  Product15_cast <= signed(resize(AXI_pu_conv_in15_unsigned, 19));
  Product15_mul_temp <= Product15_cast * Switch15_out1;
  Product15_cast_1 <= Product15_mul_temp(44 DOWNTO 0);
  Product15_out1 <= Product15_cast_1(35 DOWNTO 18);

  reduced_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_15 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_15(0) <= Product15_out1;
        reduced_reg_15(1) <= reduced_reg_15(0);
      END IF;
    END IF;
  END PROCESS reduced_15_process;

  Product15_out1_1 <= reduced_reg_15(1);

  out15 <= std_logic_vector(Product15_out1_1);

  AXI_pu_conv_in16_unsigned <= unsigned(AXI_pu_conv_in16);

  
  switch_compare_1_16 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in16_signed <= signed(in16);

  Delay49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay49_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay49_reg(0) <= in16_signed;
        Delay49_reg(1) <= Delay49_reg(0);
      END IF;
    END IF;
  END PROCESS Delay49_process;

  Delay49_out1 <= Delay49_reg(1);

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay16_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay16_out1 <= Switch16_out1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  
  Switch16_out1 <= Delay16_out1 WHEN switch_compare_1_16 = '0' ELSE
      Delay49_out1;

  Product16_cast <= signed(resize(AXI_pu_conv_in16_unsigned, 19));
  Product16_mul_temp <= Product16_cast * Switch16_out1;
  Product16_cast_1 <= Product16_mul_temp(44 DOWNTO 0);
  Product16_out1 <= Product16_cast_1(35 DOWNTO 18);

  reduced_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_16 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_16(0) <= Product16_out1;
        reduced_reg_16(1) <= reduced_reg_16(0);
      END IF;
    END IF;
  END PROCESS reduced_16_process;

  Product16_out1_1 <= reduced_reg_16(1);

  out16 <= std_logic_vector(Product16_out1_1);

  AXI_pu_conv_in17_unsigned <= unsigned(AXI_pu_conv_in17);

  
  switch_compare_1_17 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in17_signed <= signed(in17);

  Delay50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay50_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay50_reg(0) <= in17_signed;
        Delay50_reg(1) <= Delay50_reg(0);
      END IF;
    END IF;
  END PROCESS Delay50_process;

  Delay50_out1 <= Delay50_reg(1);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay17_out1 <= Switch17_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  
  Switch17_out1 <= Delay17_out1 WHEN switch_compare_1_17 = '0' ELSE
      Delay50_out1;

  Product17_cast <= signed(resize(AXI_pu_conv_in17_unsigned, 19));
  Product17_mul_temp <= Product17_cast * Switch17_out1;
  Product17_cast_1 <= Product17_mul_temp(44 DOWNTO 0);
  Product17_out1 <= Product17_cast_1(35 DOWNTO 18);

  reduced_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_17 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_17(0) <= Product17_out1;
        reduced_reg_17(1) <= reduced_reg_17(0);
      END IF;
    END IF;
  END PROCESS reduced_17_process;

  Product17_out1_1 <= reduced_reg_17(1);

  out17 <= std_logic_vector(Product17_out1_1);

  AXI_pu_conv_in18_unsigned <= unsigned(AXI_pu_conv_in18);

  
  switch_compare_1_18 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in18_signed <= signed(in18);

  Delay51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay51_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay51_reg(0) <= in18_signed;
        Delay51_reg(1) <= Delay51_reg(0);
      END IF;
    END IF;
  END PROCESS Delay51_process;

  Delay51_out1 <= Delay51_reg(1);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay18_out1 <= Switch18_out1;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  Switch18_out1 <= Delay18_out1 WHEN switch_compare_1_18 = '0' ELSE
      Delay51_out1;

  Product24_cast <= signed(resize(AXI_pu_conv_in18_unsigned, 19));
  Product24_mul_temp <= Product24_cast * Switch18_out1;
  Product24_cast_1 <= Product24_mul_temp(44 DOWNTO 0);
  Product24_out1 <= Product24_cast_1(35 DOWNTO 18);

  reduced_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_18 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_18(0) <= Product24_out1;
        reduced_reg_18(1) <= reduced_reg_18(0);
      END IF;
    END IF;
  END PROCESS reduced_18_process;

  Product24_out1_1 <= reduced_reg_18(1);

  out18 <= std_logic_vector(Product24_out1_1);

  AXI_pu_conv_in19_unsigned <= unsigned(AXI_pu_conv_in19);

  
  switch_compare_1_19 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in19_signed <= signed(in19);

  Delay52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay52_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay52_reg(0) <= in19_signed;
        Delay52_reg(1) <= Delay52_reg(0);
      END IF;
    END IF;
  END PROCESS Delay52_process;

  Delay52_out1 <= Delay52_reg(1);

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay19_out1 <= Switch19_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  Switch19_out1 <= Delay19_out1 WHEN switch_compare_1_19 = '0' ELSE
      Delay52_out1;

  Product25_cast <= signed(resize(AXI_pu_conv_in19_unsigned, 19));
  Product25_mul_temp <= Product25_cast * Switch19_out1;
  Product25_cast_1 <= Product25_mul_temp(44 DOWNTO 0);
  Product25_out1 <= Product25_cast_1(35 DOWNTO 18);

  reduced_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_19 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_19(0) <= Product25_out1;
        reduced_reg_19(1) <= reduced_reg_19(0);
      END IF;
    END IF;
  END PROCESS reduced_19_process;

  Product25_out1_1 <= reduced_reg_19(1);

  out19 <= std_logic_vector(Product25_out1_1);

  AXI_pu_conv_in20_unsigned <= unsigned(AXI_pu_conv_in20);

  
  switch_compare_1_20 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in20_signed <= signed(in20);

  Delay53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay53_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay53_reg(0) <= in20_signed;
        Delay53_reg(1) <= Delay53_reg(0);
      END IF;
    END IF;
  END PROCESS Delay53_process;

  Delay53_out1 <= Delay53_reg(1);

  Delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay20_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay20_out1 <= Switch20_out1;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  
  Switch20_out1 <= Delay20_out1 WHEN switch_compare_1_20 = '0' ELSE
      Delay53_out1;

  Product26_cast <= signed(resize(AXI_pu_conv_in20_unsigned, 19));
  Product26_mul_temp <= Product26_cast * Switch20_out1;
  Product26_cast_1 <= Product26_mul_temp(44 DOWNTO 0);
  Product26_out1 <= Product26_cast_1(35 DOWNTO 18);

  reduced_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_20 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_20(0) <= Product26_out1;
        reduced_reg_20(1) <= reduced_reg_20(0);
      END IF;
    END IF;
  END PROCESS reduced_20_process;

  Product26_out1_1 <= reduced_reg_20(1);

  out20 <= std_logic_vector(Product26_out1_1);

  AXI_pu_conv_in21_unsigned <= unsigned(AXI_pu_conv_in21);

  
  switch_compare_1_21 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in21_signed <= signed(in21);

  Delay54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay54_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay54_reg(0) <= in21_signed;
        Delay54_reg(1) <= Delay54_reg(0);
      END IF;
    END IF;
  END PROCESS Delay54_process;

  Delay54_out1 <= Delay54_reg(1);

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay21_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay21_out1 <= Switch21_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  
  Switch21_out1 <= Delay21_out1 WHEN switch_compare_1_21 = '0' ELSE
      Delay54_out1;

  Product27_cast <= signed(resize(AXI_pu_conv_in21_unsigned, 19));
  Product27_mul_temp <= Product27_cast * Switch21_out1;
  Product27_cast_1 <= Product27_mul_temp(44 DOWNTO 0);
  Product27_out1 <= Product27_cast_1(35 DOWNTO 18);

  reduced_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_21 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_21(0) <= Product27_out1;
        reduced_reg_21(1) <= reduced_reg_21(0);
      END IF;
    END IF;
  END PROCESS reduced_21_process;

  Product27_out1_1 <= reduced_reg_21(1);

  out21 <= std_logic_vector(Product27_out1_1);

  AXI_pu_conv_in22_unsigned <= unsigned(AXI_pu_conv_in22);

  
  switch_compare_1_22 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in22_signed <= signed(in22);

  Delay55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay55_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay55_reg(0) <= in22_signed;
        Delay55_reg(1) <= Delay55_reg(0);
      END IF;
    END IF;
  END PROCESS Delay55_process;

  Delay55_out1 <= Delay55_reg(1);

  Delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay22_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay22_out1 <= Switch22_out1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  
  Switch22_out1 <= Delay22_out1 WHEN switch_compare_1_22 = '0' ELSE
      Delay55_out1;

  Product28_cast <= signed(resize(AXI_pu_conv_in22_unsigned, 19));
  Product28_mul_temp <= Product28_cast * Switch22_out1;
  Product28_cast_1 <= Product28_mul_temp(44 DOWNTO 0);
  Product28_out1 <= Product28_cast_1(35 DOWNTO 18);

  reduced_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_22 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_22(0) <= Product28_out1;
        reduced_reg_22(1) <= reduced_reg_22(0);
      END IF;
    END IF;
  END PROCESS reduced_22_process;

  Product28_out1_1 <= reduced_reg_22(1);

  out22 <= std_logic_vector(Product28_out1_1);

  AXI_pu_conv_in23_unsigned <= unsigned(AXI_pu_conv_in23);

  
  switch_compare_1_23 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in23_signed <= signed(in23);

  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay56_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay56_reg(0) <= in23_signed;
        Delay56_reg(1) <= Delay56_reg(0);
      END IF;
    END IF;
  END PROCESS Delay56_process;

  Delay56_out1 <= Delay56_reg(1);

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay23_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay23_out1 <= Switch23_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  
  Switch23_out1 <= Delay23_out1 WHEN switch_compare_1_23 = '0' ELSE
      Delay56_out1;

  Product29_cast <= signed(resize(AXI_pu_conv_in23_unsigned, 19));
  Product29_mul_temp <= Product29_cast * Switch23_out1;
  Product29_cast_1 <= Product29_mul_temp(44 DOWNTO 0);
  Product29_out1 <= Product29_cast_1(35 DOWNTO 18);

  reduced_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_23 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_23(0) <= Product29_out1;
        reduced_reg_23(1) <= reduced_reg_23(0);
      END IF;
    END IF;
  END PROCESS reduced_23_process;

  Product29_out1_1 <= reduced_reg_23(1);

  out23 <= std_logic_vector(Product29_out1_1);

  AXI_pu_conv_in24_unsigned <= unsigned(AXI_pu_conv_in24);

  
  switch_compare_1_24 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in24_signed <= signed(in24);

  Delay57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay57_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay57_reg(0) <= in24_signed;
        Delay57_reg(1) <= Delay57_reg(0);
      END IF;
    END IF;
  END PROCESS Delay57_process;

  Delay57_out1 <= Delay57_reg(1);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay24_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay24_out1 <= Switch24_out1;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  
  Switch24_out1 <= Delay24_out1 WHEN switch_compare_1_24 = '0' ELSE
      Delay57_out1;

  Product30_cast <= signed(resize(AXI_pu_conv_in24_unsigned, 19));
  Product30_mul_temp <= Product30_cast * Switch24_out1;
  Product30_cast_1 <= Product30_mul_temp(44 DOWNTO 0);
  Product30_out1 <= Product30_cast_1(35 DOWNTO 18);

  reduced_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_24 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_24(0) <= Product30_out1;
        reduced_reg_24(1) <= reduced_reg_24(0);
      END IF;
    END IF;
  END PROCESS reduced_24_process;

  Product30_out1_1 <= reduced_reg_24(1);

  out24 <= std_logic_vector(Product30_out1_1);

  AXI_pu_conv_in25_unsigned <= unsigned(AXI_pu_conv_in25);

  
  switch_compare_1_25 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in25_signed <= signed(in25);

  Delay58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay58_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay58_reg(0) <= in25_signed;
        Delay58_reg(1) <= Delay58_reg(0);
      END IF;
    END IF;
  END PROCESS Delay58_process;

  Delay58_out1 <= Delay58_reg(1);

  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay25_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay25_out1 <= Switch25_out1;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  
  Switch25_out1 <= Delay25_out1 WHEN switch_compare_1_25 = '0' ELSE
      Delay58_out1;

  Product31_cast <= signed(resize(AXI_pu_conv_in25_unsigned, 19));
  Product31_mul_temp <= Product31_cast * Switch25_out1;
  Product31_cast_1 <= Product31_mul_temp(44 DOWNTO 0);
  Product31_out1 <= Product31_cast_1(35 DOWNTO 18);

  reduced_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_25 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_25(0) <= Product31_out1;
        reduced_reg_25(1) <= reduced_reg_25(0);
      END IF;
    END IF;
  END PROCESS reduced_25_process;

  Product31_out1_1 <= reduced_reg_25(1);

  out25 <= std_logic_vector(Product31_out1_1);

  AXI_pu_conv_in26_unsigned <= unsigned(AXI_pu_conv_in26);

  
  switch_compare_1_26 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in26_signed <= signed(in26);

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay59_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay59_reg(0) <= in26_signed;
        Delay59_reg(1) <= Delay59_reg(0);
      END IF;
    END IF;
  END PROCESS Delay59_process;

  Delay59_out1 <= Delay59_reg(1);

  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay26_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay26_out1 <= Switch26_out1;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  
  Switch26_out1 <= Delay26_out1 WHEN switch_compare_1_26 = '0' ELSE
      Delay59_out1;

  Product18_cast <= signed(resize(AXI_pu_conv_in26_unsigned, 19));
  Product18_mul_temp <= Product18_cast * Switch26_out1;
  Product18_cast_1 <= Product18_mul_temp(44 DOWNTO 0);
  Product18_out1 <= Product18_cast_1(35 DOWNTO 18);

  reduced_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_26 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_26(0) <= Product18_out1;
        reduced_reg_26(1) <= reduced_reg_26(0);
      END IF;
    END IF;
  END PROCESS reduced_26_process;

  Product18_out1_1 <= reduced_reg_26(1);

  out26 <= std_logic_vector(Product18_out1_1);

  AXI_pu_conv_in27_unsigned <= unsigned(AXI_pu_conv_in27);

  
  switch_compare_1_27 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in27_signed <= signed(in27);

  Delay60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay60_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay60_reg(0) <= in27_signed;
        Delay60_reg(1) <= Delay60_reg(0);
      END IF;
    END IF;
  END PROCESS Delay60_process;

  Delay60_out1 <= Delay60_reg(1);

  Delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay27_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay27_out1 <= Switch27_out1;
      END IF;
    END IF;
  END PROCESS Delay27_process;


  
  Switch27_out1 <= Delay27_out1 WHEN switch_compare_1_27 = '0' ELSE
      Delay60_out1;

  Product19_cast <= signed(resize(AXI_pu_conv_in27_unsigned, 19));
  Product19_mul_temp <= Product19_cast * Switch27_out1;
  Product19_cast_1 <= Product19_mul_temp(44 DOWNTO 0);
  Product19_out1 <= Product19_cast_1(35 DOWNTO 18);

  reduced_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_27 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_27(0) <= Product19_out1;
        reduced_reg_27(1) <= reduced_reg_27(0);
      END IF;
    END IF;
  END PROCESS reduced_27_process;

  Product19_out1_1 <= reduced_reg_27(1);

  out27 <= std_logic_vector(Product19_out1_1);

  AXI_pu_conv_in28_unsigned <= unsigned(AXI_pu_conv_in28);

  
  switch_compare_1_28 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in28_signed <= signed(in28);

  Delay61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay61_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay61_reg(0) <= in28_signed;
        Delay61_reg(1) <= Delay61_reg(0);
      END IF;
    END IF;
  END PROCESS Delay61_process;

  Delay61_out1 <= Delay61_reg(1);

  Delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay28_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay28_out1 <= Switch28_out1;
      END IF;
    END IF;
  END PROCESS Delay28_process;


  
  Switch28_out1 <= Delay28_out1 WHEN switch_compare_1_28 = '0' ELSE
      Delay61_out1;

  Product20_cast <= signed(resize(AXI_pu_conv_in28_unsigned, 19));
  Product20_mul_temp <= Product20_cast * Switch28_out1;
  Product20_cast_1 <= Product20_mul_temp(44 DOWNTO 0);
  Product20_out1 <= Product20_cast_1(35 DOWNTO 18);

  reduced_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_28 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_28(0) <= Product20_out1;
        reduced_reg_28(1) <= reduced_reg_28(0);
      END IF;
    END IF;
  END PROCESS reduced_28_process;

  Product20_out1_1 <= reduced_reg_28(1);

  out28 <= std_logic_vector(Product20_out1_1);

  AXI_pu_conv_in29_unsigned <= unsigned(AXI_pu_conv_in29);

  
  switch_compare_1_29 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in29_signed <= signed(in29);

  Delay62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay62_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay62_reg(0) <= in29_signed;
        Delay62_reg(1) <= Delay62_reg(0);
      END IF;
    END IF;
  END PROCESS Delay62_process;

  Delay62_out1 <= Delay62_reg(1);

  Delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay29_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay29_out1 <= Switch29_out1;
      END IF;
    END IF;
  END PROCESS Delay29_process;


  
  Switch29_out1 <= Delay29_out1 WHEN switch_compare_1_29 = '0' ELSE
      Delay62_out1;

  Product21_cast <= signed(resize(AXI_pu_conv_in29_unsigned, 19));
  Product21_mul_temp <= Product21_cast * Switch29_out1;
  Product21_cast_1 <= Product21_mul_temp(44 DOWNTO 0);
  Product21_out1 <= Product21_cast_1(35 DOWNTO 18);

  reduced_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_29 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_29(0) <= Product21_out1;
        reduced_reg_29(1) <= reduced_reg_29(0);
      END IF;
    END IF;
  END PROCESS reduced_29_process;

  Product21_out1_1 <= reduced_reg_29(1);

  out29 <= std_logic_vector(Product21_out1_1);

  AXI_pu_conv_in30_unsigned <= unsigned(AXI_pu_conv_in30);

  
  switch_compare_1_30 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in30_signed <= signed(in30);

  Delay63_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay63_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay63_reg(0) <= in30_signed;
        Delay63_reg(1) <= Delay63_reg(0);
      END IF;
    END IF;
  END PROCESS Delay63_process;

  Delay63_out1 <= Delay63_reg(1);

  Delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay30_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay30_out1 <= Switch30_out1;
      END IF;
    END IF;
  END PROCESS Delay30_process;


  
  Switch30_out1 <= Delay30_out1 WHEN switch_compare_1_30 = '0' ELSE
      Delay63_out1;

  Product22_cast <= signed(resize(AXI_pu_conv_in30_unsigned, 19));
  Product22_mul_temp <= Product22_cast * Switch30_out1;
  Product22_cast_1 <= Product22_mul_temp(44 DOWNTO 0);
  Product22_out1 <= Product22_cast_1(35 DOWNTO 18);

  reduced_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_30 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_30(0) <= Product22_out1;
        reduced_reg_30(1) <= reduced_reg_30(0);
      END IF;
    END IF;
  END PROCESS reduced_30_process;

  Product22_out1_1 <= reduced_reg_30(1);

  out30 <= std_logic_vector(Product22_out1_1);

  AXI_pu_conv_in31_unsigned <= unsigned(AXI_pu_conv_in31);

  
  switch_compare_1_31 <= '1' WHEN Detect_Rise_Positive_out1 > '0' ELSE
      '0';

  in31_signed <= signed(in31);

  Delay64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay64_reg <= (OTHERS => to_signed(16#0000000#, 27));
      ELSE 
        Delay64_reg(0) <= in31_signed;
        Delay64_reg(1) <= Delay64_reg(0);
      END IF;
    END IF;
  END PROCESS Delay64_process;

  Delay64_out1 <= Delay64_reg(1);

  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay31_out1 <= to_signed(16#0000000#, 27);
      ELSE 
        Delay31_out1 <= Switch31_out1;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  
  Switch31_out1 <= Delay31_out1 WHEN switch_compare_1_31 = '0' ELSE
      Delay64_out1;

  Product23_cast <= signed(resize(AXI_pu_conv_in31_unsigned, 19));
  Product23_mul_temp <= Product23_cast * Switch31_out1;
  Product23_cast_1 <= Product23_mul_temp(44 DOWNTO 0);
  Product23_out1 <= Product23_cast_1(35 DOWNTO 18);

  reduced_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_31 <= (OTHERS => to_signed(16#00000#, 18));
      ELSE 
        reduced_reg_31(0) <= Product23_out1;
        reduced_reg_31(1) <= reduced_reg_31(0);
      END IF;
    END IF;
  END PROCESS reduced_31_process;

  Product23_out1_1 <= reduced_reg_31(1);

  out31 <= std_logic_vector(Product23_out1_1);

  Delay129_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay129_reg <= (OTHERS => '0');
      ELSE 
        Delay129_reg(0) <= Detect_Rise_Positive_out1;
        Delay129_reg(1) <= Delay129_reg(0);
      END IF;
    END IF;
  END PROCESS Delay129_process;

  Delay129_out1 <= Delay129_reg(1);

  out0_AXI <= std_logic_vector(Product_out1_1);

  out1_AXI <= std_logic_vector(Product1_out1_1);

  out2_AXI <= std_logic_vector(Product2_out1_1);

  out3_AXI <= std_logic_vector(Product3_out1_1);

  out4_AXI <= std_logic_vector(Product4_out1_1);

  out5_AXI <= std_logic_vector(Product5_out1_1);

  out6_AXI <= std_logic_vector(Product6_out1_1);

  out7_AXI <= std_logic_vector(Product7_out1_1);

  out8_AXI <= std_logic_vector(Product8_out1_1);

  out9_AXI <= std_logic_vector(Product9_out1_1);

  out10_AXI <= std_logic_vector(Product10_out1_1);

  out11_AXI <= std_logic_vector(Product11_out1_1);

  out12_AXI <= std_logic_vector(Product12_out1_1);

  out13_AXI <= std_logic_vector(Product13_out1_1);

  out14_AXI <= std_logic_vector(Product14_out1_1);

  out15_AXI <= std_logic_vector(Product15_out1_1);

  out16_AXI <= std_logic_vector(Product16_out1_1);

  out17_AXI <= std_logic_vector(Product17_out1_1);

  out18_AXI <= std_logic_vector(Product24_out1_1);

  out19_AXI <= std_logic_vector(Product25_out1_1);

  out20_AXI <= std_logic_vector(Product26_out1_1);

  out21_AXI <= std_logic_vector(Product27_out1_1);

  out22_AXI <= std_logic_vector(Product28_out1_1);

  out23_AXI <= std_logic_vector(Product29_out1_1);

  out24_AXI <= std_logic_vector(Product30_out1_1);

  out25_AXI <= std_logic_vector(Product31_out1_1);

  out26_AXI <= std_logic_vector(Product18_out1_1);

  out27_AXI <= std_logic_vector(Product19_out1_1);

  out28_AXI <= std_logic_vector(Product20_out1_1);

  out29_AXI <= std_logic_vector(Product21_out1_1);

  out30_AXI <= std_logic_vector(Product22_out1_1);

  out31_AXI <= std_logic_vector(Product23_out1_1);

  pu_conv_done <= Delay129_out1;

END rtl;

