-- -------------------------------------------------------------
-- Created: 2017-07-07 14:30:00
-- 
-- Generated by Wendel S.
-- 
-- 
-- -------------------------------------------------------------
-- Description
-- -------------------------------------------------------------
-- InterLock_Module
-- Top Level File of the InterLock Block
-- Instantiation of the Delay
-- -------------------------------------------------------------
-- Version 1.0
-- -------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
library UNISIM;
use UNISIM.VComponents.all;


entity InterLock_Module_v1_0 is
	generic(
		-- Users to add parameters here
        INVERSE_BOTTOMSWITCH : boolean  := true; -- 1 =Bottom Gate is Inverse and 0 = Bottom Gate is normal
		DELAY_COUNT          : integer := 10
		-- User parameters ends
		-- Do not modify the parameters beyond this line      

		-- Parameters of Axi Slave Bus Interface S00_AXI
	);
	port (
		-- Users to add ports here
		clk             : in std_logic;
		reset_n         : in std_logic;
        S0_OUT     		: out std_logic;
        S1_OUT      	: out std_logic;
        S2_OUT      	: out std_logic;
		S3_OUT   		: out std_logic;
        S4_OUT 			: out std_logic;
        S5_OUT			: out std_logic;
        Enable_Gate_IN  : in  std_logic;
        S0_IN        	: in std_logic;
        S1_IN        	: in std_logic;
        S2_IN 			: in std_logic;
		S3_IN      		: in std_logic;
		S4_IN 			: in std_logic;
		S5_IN      		: in std_logic
		
		);
end InterLock_Module_v1_0;

architecture arch_imp of InterLock_Module_v1_0 is

    signal slv_S0_IN : std_logic;
	signal slv_S1_IN : std_logic;
	signal slv_S2_IN : std_logic;
	signal slv_S3_IN : std_logic;
	signal slv_S4_IN : std_logic;
	signal slv_S5_IN : std_logic;
	signal slv_Enable_Gate : std_logic;
    signal slv_S0_OUT : std_logic;
	signal slv_S1_OUT : std_logic;
	signal slv_S2_OUT : std_logic;
	signal slv_S3_OUT : std_logic;
	signal slv_S4_OUT : std_logic;
	signal slv_S5_OUT : std_logic;
    signal clk_en : STD_LOGIC := '1';

   -- component delay for InterLock time    
    component INTERLOCK_DELAY IS
      generic(INVERSE_BOTTOMSWITCH : boolean := true;
	          DELAY_COUNT : integer := 10
      );
      PORT(clk                               :   IN    std_logic;
           reset                             :   IN    std_logic;
           clk_enable                        :   IN    std_logic;
		   Switch_S0_IN						 :   IN    std_logic;
		   Switch_S1_IN						 :   IN    std_logic;
		   Switch_S2_IN						 :   IN    std_logic;
		   Switch_S3_IN						 :   IN    std_logic;
		   Switch_S4_IN						 :   IN    std_logic;
		   Switch_S5_IN						 :   IN    std_logic;
		   Enable_Gate                       :   IN    std_logic;
		   Switch_S0_OUT					 :   OUT    std_logic;
		   Switch_S1_OUT					 :   OUT    std_logic;
		   Switch_S2_OUT					 :   OUT    std_logic;
		   Switch_S3_OUT					 :   OUT    std_logic;
		   Switch_S4_OUT					 :   OUT    std_logic;
		   Switch_S5_OUT					 :   OUT    std_logic;		   
           ce_out                            :   OUT   std_logic
           );
    end component INTERLOCK_DELAY;
    
begin

    slv_S0_IN <= S0_IN;
    slv_S1_IN <= S1_IN;
    slv_S2_IN <= S2_IN;
    slv_S3_IN <= S3_IN;
    slv_S4_IN <= S4_IN;
    slv_S5_IN <= S5_IN;
    slv_Enable_Gate <= Enable_Gate_IN;
    S0_OUT <= slv_S0_OUT;
	S1_OUT <= slv_S1_OUT;
	S2_OUT <= slv_S2_OUT;
	S3_OUT <= slv_S3_OUT;
	S4_OUT <= slv_S4_OUT;
	S5_OUT <= slv_S5_OUT;


-- Instantiation of the delay for InterLock time 
GEN_calc: for I in 0 to 0 generate
    calc: INTERLOCK_DELAY 
          generic map(INVERSE_BOTTOMSWITCH => INVERSE_BOTTOMSWITCH,
					  DELAY_COUNT => DELAY_COUNT 
                )
          port map(Switch_S0_IN => slv_S0_IN,
					Switch_S1_IN => slv_S1_IN, 
					Switch_S2_IN => slv_S2_IN, 
					Switch_S3_IN => slv_S3_IN, 
					Switch_S4_IN => slv_S4_IN, 
					Switch_S5_IN => slv_S5_IN, 
					Enable_Gate  => slv_Enable_Gate,
					Switch_S0_OUT => slv_S0_OUT,
					Switch_S1_OUT => slv_S1_OUT, 
					Switch_S2_OUT => slv_S2_OUT, 
					Switch_S3_OUT => slv_S3_OUT, 
					Switch_S4_OUT => slv_S4_OUT, 
					Switch_S5_OUT => slv_S5_OUT, 					
                   clk => clk,
                   reset => not(reset_n),
                   clk_enable => clk_en,                   
                   ce_out => open                         
          );
end generate GEN_calc;

end arch_imp;
