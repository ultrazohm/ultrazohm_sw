-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\FCS_MPC_switching_states_2_level_inverter\hdlsrc\FCS_MPC_switching_states_2_level_inverter\FCS_MPC_switching_states_2_level_inverter_dut.vhd
-- Created: 2022-07-12 15:04:20
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FCS_MPC_switching_states_2_level_inverter_dut
-- Source Path: FCS_MPC_switching_states_2_level_inverter/FCS_MPC_switching_states_2_level_inverter_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FCS_MPC_switching_states_2_level_inverter_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        I                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        done_min_J                        :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        HB1T                              :   OUT   std_logic;  -- ufix1
        HB1B                              :   OUT   std_logic;  -- ufix1
        HB2T                              :   OUT   std_logic;  -- ufix1
        HB2B                              :   OUT   std_logic;  -- ufix1
        HB3T                              :   OUT   std_logic;  -- ufix1
        HB3B                              :   OUT   std_logic;  -- ufix1
        done                              :   OUT   std_logic  -- ufix1
        );
END FCS_MPC_switching_states_2_level_inverter_dut;


ARCHITECTURE rtl OF FCS_MPC_switching_states_2_level_inverter_dut IS

  -- Component Declarations
  COMPONENT FCS_MPC_switching_states_2_level_inverter_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          I                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          done_min_J                      :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          HB1T                            :   OUT   std_logic;  -- ufix1
          HB1B                            :   OUT   std_logic;  -- ufix1
          HB2T                            :   OUT   std_logic;  -- ufix1
          HB2B                            :   OUT   std_logic;  -- ufix1
          HB3T                            :   OUT   std_logic;  -- ufix1
          HB3B                            :   OUT   std_logic;  -- ufix1
          done                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : FCS_MPC_switching_states_2_level_inverter_src_Subsystem
    USE ENTITY work.FCS_MPC_switching_states_2_level_inverter_src_Subsystem(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL done_min_J_sig                   : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL HB1T_sig                         : std_logic;  -- ufix1
  SIGNAL HB1B_sig                         : std_logic;  -- ufix1
  SIGNAL HB2T_sig                         : std_logic;  -- ufix1
  SIGNAL HB2B_sig                         : std_logic;  -- ufix1
  SIGNAL HB3T_sig                         : std_logic;  -- ufix1
  SIGNAL HB3B_sig                         : std_logic;  -- ufix1
  SIGNAL done_sig                         : std_logic;  -- ufix1

BEGIN
  u_FCS_MPC_switching_states_2_level_inverter_src_Subsystem : FCS_MPC_switching_states_2_level_inverter_src_Subsystem
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              I => I,  -- sfix32
              done_min_J => done_min_J_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              HB1T => HB1T_sig,  -- ufix1
              HB1B => HB1B_sig,  -- ufix1
              HB2T => HB2T_sig,  -- ufix1
              HB2B => HB2B_sig,  -- ufix1
              HB3T => HB3T_sig,  -- ufix1
              HB3B => HB3B_sig,  -- ufix1
              done => done_sig  -- ufix1
              );

  done_min_J_sig <= done_min_J;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  HB1T <= HB1T_sig;

  HB1B <= HB1B_sig;

  HB2T <= HB2T_sig;

  HB2B <= HB2B_sig;

  HB3T <= HB3T_sig;

  HB3B <= HB3B_sig;

  done <= done_sig;

END rtl;

