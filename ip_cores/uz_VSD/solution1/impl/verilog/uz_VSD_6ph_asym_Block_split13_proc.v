// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uz_VSD_6ph_asym_Block_split13_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        cpy_in_0_out_din,
        cpy_in_0_out_full_n,
        cpy_in_0_out_write,
        cpy_in_1_out_din,
        cpy_in_1_out_full_n,
        cpy_in_1_out_write,
        cpy_in_2_out_din,
        cpy_in_2_out_full_n,
        cpy_in_2_out_write,
        cpy_in_3_out_din,
        cpy_in_3_out_full_n,
        cpy_in_3_out_write,
        cpy_in_4_out_din,
        cpy_in_4_out_full_n,
        cpy_in_4_out_write,
        cpy_in_5_out_din,
        cpy_in_5_out_full_n,
        cpy_in_5_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [2:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [2:0] in_r_address1;
output   in_r_ce1;
input  [31:0] in_r_q1;
output  [31:0] cpy_in_0_out_din;
input   cpy_in_0_out_full_n;
output   cpy_in_0_out_write;
output  [31:0] cpy_in_1_out_din;
input   cpy_in_1_out_full_n;
output   cpy_in_1_out_write;
output  [31:0] cpy_in_2_out_din;
input   cpy_in_2_out_full_n;
output   cpy_in_2_out_write;
output  [31:0] cpy_in_3_out_din;
input   cpy_in_3_out_full_n;
output   cpy_in_3_out_write;
output  [31:0] cpy_in_4_out_din;
input   cpy_in_4_out_full_n;
output   cpy_in_4_out_write;
output  [31:0] cpy_in_5_out_din;
input   cpy_in_5_out_full_n;
output   cpy_in_5_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[2:0] in_r_address0;
reg in_r_ce0;
reg[2:0] in_r_address1;
reg in_r_ce1;
reg cpy_in_0_out_write;
reg cpy_in_1_out_write;
reg cpy_in_2_out_write;
reg cpy_in_3_out_write;
reg cpy_in_4_out_write;
reg cpy_in_5_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cpy_in_0_out_blk_n;
wire    ap_CS_fsm_state4;
reg    cpy_in_1_out_blk_n;
reg    cpy_in_2_out_blk_n;
reg    cpy_in_3_out_blk_n;
reg    cpy_in_4_out_blk_n;
reg    cpy_in_5_out_blk_n;
reg    ap_block_state1;
reg   [31:0] in_load_reg_187;
wire    ap_CS_fsm_state2;
reg   [31:0] in_load_1_reg_192;
reg   [31:0] in_load_2_reg_207;
wire    ap_CS_fsm_state3;
reg   [31:0] in_load_3_reg_212;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_load_1_reg_192 <= in_r_q0;
        in_load_reg_187 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_load_2_reg_207 <= in_r_q1;
        in_load_3_reg_212 <= in_r_q0;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_in_0_out_blk_n = cpy_in_0_out_full_n;
    end else begin
        cpy_in_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        cpy_in_0_out_write = 1'b1;
    end else begin
        cpy_in_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_in_1_out_blk_n = cpy_in_1_out_full_n;
    end else begin
        cpy_in_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        cpy_in_1_out_write = 1'b1;
    end else begin
        cpy_in_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_in_2_out_blk_n = cpy_in_2_out_full_n;
    end else begin
        cpy_in_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        cpy_in_2_out_write = 1'b1;
    end else begin
        cpy_in_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_in_3_out_blk_n = cpy_in_3_out_full_n;
    end else begin
        cpy_in_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        cpy_in_3_out_write = 1'b1;
    end else begin
        cpy_in_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_in_4_out_blk_n = cpy_in_4_out_full_n;
    end else begin
        cpy_in_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        cpy_in_4_out_write = 1'b1;
    end else begin
        cpy_in_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cpy_in_5_out_blk_n = cpy_in_5_out_full_n;
    end else begin
        cpy_in_5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        cpy_in_5_out_write = 1'b1;
    end else begin
        cpy_in_5_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address0 = 64'd1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address1 = 64'd0;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((cpy_in_5_out_full_n == 1'b0) | (cpy_in_4_out_full_n == 1'b0) | (cpy_in_3_out_full_n == 1'b0) | (cpy_in_2_out_full_n == 1'b0) | (cpy_in_1_out_full_n == 1'b0) | (cpy_in_0_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign cpy_in_0_out_din = in_load_reg_187;

assign cpy_in_1_out_din = in_load_1_reg_192;

assign cpy_in_2_out_din = in_load_2_reg_207;

assign cpy_in_3_out_din = in_load_3_reg_212;

assign cpy_in_4_out_din = in_r_q1;

assign cpy_in_5_out_din = in_r_q0;

assign start_out = real_start;

endmodule //uz_VSD_6ph_asym_Block_split13_proc
