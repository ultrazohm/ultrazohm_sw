-- -------------------------------------------------------------
-- 
-- File Name: E:\010_ELSYS\MATLAB\GIT\5803_Matlab_Simulink_Zynq\ADC_Strom_OHMrichter_Allegro_10A\ADC_VALUE_TO_CURRENT\ADC_VALUE_TO_CURRENT.vhd
-- Created: 2017-08-15 11:28:51
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- CALC_CURRENT                  ce_out        0.2
-- CALC_CURRENT_VALID            ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ADC_VALUE_TO_CURRENT
-- Source Path: ADC_VALUE_TO_CURRENT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ADC_VALUE_TO_CURRENT_pkg.ALL;

ENTITY ADC_VALUE_TO_CURRENT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ADC_IN                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        ADC_DATA_VALID                    :   IN    std_logic;
        ADC_SET_OFFSET                    :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        CALC_CURRENT                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        CALC_CURRENT_VALID                :   OUT   std_logic
        );
END ADC_VALUE_TO_CURRENT;


ARCHITECTURE rtl OF ADC_VALUE_TO_CURRENT IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL ADC_IN_signed                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL STEPS_A_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Product1_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Delay_reg                        : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Delay5_out1                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add_sub_cast                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Add_sub_cast_1                   : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Add_out1                         : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Add_out1_dtc                     : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Switch_out1                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En11

BEGIN
  enb <= clk_enable;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= ADC_DATA_VALID;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  ADC_IN_signed <= signed(ADC_IN);

  --Chile = 0.00041018*2^16 = 27(dec) = 1B(hex)-- STEPS_A_out1 <= to_unsigned(16#001B#, 16);
  STEPS_A_out1 <= to_unsigned(16#0030#, 16);

  Product1_cast <= signed(resize(STEPS_A_out1, 17));
  Product1_mul_temp <= ADC_IN_signed * Product1_cast;
  Product1_cast_1 <= Product1_mul_temp(31 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(20 DOWNTO 5);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg(0) <= Product1_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  Logical_Operator_out1 <= ADC_SET_OFFSET AND ADC_DATA_VALID;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch1_out1 <= Delay5_out1 WHEN Logical_Operator_out1 = '0' ELSE
      Product1_out1;

  Add_sub_cast <= resize(Delay_out1, 17);
  Add_sub_cast_1 <= resize(Switch1_out1, 17);
  Add_out1 <= Add_sub_cast - Add_sub_cast_1;

  Add_out1_dtc <= Add_out1(15 DOWNTO 0);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch_out1 <= Delay4_out1 WHEN Delay3_out1 = '0' ELSE
      Add_out1_dtc;

  CALC_CURRENT <= std_logic_vector(Switch_out1);

  ce_out <= clk_enable;

  CALC_CURRENT_VALID <= Delay3_out1;

END rtl;

