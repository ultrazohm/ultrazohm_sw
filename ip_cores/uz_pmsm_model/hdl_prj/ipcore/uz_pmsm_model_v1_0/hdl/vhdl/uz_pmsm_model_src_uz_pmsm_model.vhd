-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_pmsm_model/uz_pmsm_model_src_uz_pmsm_model.vhd
-- Created: 2021-07-23 16:45:56
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- Explicit user oversample request: 50x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outputs_0                     ce_out        5e-07
-- outputs_1                     ce_out        5e-07
-- outputs_2                     ce_out        5e-07
-- outputs_3                     ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_pmsm_model_src_uz_pmsm_model
-- Source Path: uz_pmsm_model/uz_pmsm_model
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.uz_pmsm_model_src_uz_pmsm_model_pkg.ALL;

ENTITY uz_pmsm_model_src_uz_pmsm_model IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        reset_integrators                 :   IN    std_logic;
        simulate_mechanical               :   IN    std_logic;
        reciprocal_J                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        mu                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        M_n0                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reciprocal_L_d                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reciprocal_L_q                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        R1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        polepairs                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psi_pm                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_0                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_2                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        inputs_3                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        outputs_0                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        outputs_3                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END uz_pmsm_model_src_uz_pmsm_model;


ARCHITECTURE rtl OF uz_pmsm_model_src_uz_pmsm_model IS

  -- Component Declarations
  COMPONENT uz_pmsm_model_src_uz_pmsm_model_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_50_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_convert_single2double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_signum_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_abs_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_add_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_sub_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT uz_pmsm_model_src_nfp_convert_double2single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : uz_pmsm_model_src_uz_pmsm_model_tc
    USE ENTITY work.uz_pmsm_model_src_uz_pmsm_model_tc(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_convert_single2double
    USE ENTITY work.uz_pmsm_model_src_nfp_convert_single2double(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_signum_double
    USE ENTITY work.uz_pmsm_model_src_nfp_signum_double(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_abs_double
    USE ENTITY work.uz_pmsm_model_src_nfp_abs_double(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_mul_double
    USE ENTITY work.uz_pmsm_model_src_nfp_mul_double(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_add_double
    USE ENTITY work.uz_pmsm_model_src_nfp_add_double(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_sub_double
    USE ENTITY work.uz_pmsm_model_src_nfp_sub_double(rtl);

  FOR ALL : uz_pmsm_model_src_nfp_convert_double2single
    USE ENTITY work.uz_pmsm_model_src_nfp_convert_double2single(rtl);

  -- Signals
  SIGNAL enb_1_50_1                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL reset_integrators_1              : std_logic;
  SIGNAL reset_integrators_2              : std_logic;
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL inputs                           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL inputs_4                         : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL u_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL simulate_mechanical_1            : std_logic;
  SIGNAL omega_mech                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL omega_mech_1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion14_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_3                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL u_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL load_torque                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_iv_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sign1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Abs_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product12_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum5_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product4_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product7_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product10_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_out1_2                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered_bypass_reg        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product3_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi                             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_1                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_2                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_3                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL M_Mi_4                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay_bypass_reg                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product11_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered2_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_3                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product8_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_op_stage1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1_2                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain_out1_2                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum3_out1_3                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_4                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_lowered1_bypass_reg       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_toDel_5                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay1_delOut_2                  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum2_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_d_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_d_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_q_1                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL i_q_2                            : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Mux_out1                         : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL t1_bypass_reg                    : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL t1_bypass_reg_next               : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL Mux_out1_1                       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]

BEGIN
  u_uz_pmsm_model_tc : uz_pmsm_model_src_uz_pmsm_model_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_50_1 => enb_1_50_1
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_L_d,  -- single
              nfp_out => Data_Type_Conversion7_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_1 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => inputs_4(0),  -- single
              nfp_out => u_d  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_2 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => R1,  -- single
              nfp_out => Data_Type_Conversion6_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_3 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => inputs_4(2),  -- single
              nfp_out => omega_mech  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_4 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_J,  -- single
              nfp_out => Data_Type_Conversion14_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_5 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => inputs_4(1),  -- single
              nfp_out => u_q  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_6 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => reciprocal_L_q,  -- single
              nfp_out => Data_Type_Conversion8_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_7 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => polepairs,  -- single
              nfp_out => Data_Type_Conversion10_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_8 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => mu,  -- single
              nfp_out => Data_Type_Conversion12_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_9 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => M_n0,  -- single
              nfp_out => Data_Type_Conversion13_out1  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_10 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => inputs_4(3),  -- single
              nfp_out => load_torque  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_single2double_11 : uz_pmsm_model_src_nfp_convert_single2double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => psi_pm,  -- single
              nfp_out => Data_Type_Conversion9_out1  -- double
              );

  u_nfp_signum_comp : uz_pmsm_model_src_nfp_signum_double
    PORT MAP( nfp_in => Delay1_out1,  -- double
              nfp_out => Sign1_out1  -- double
              );

  u_nfp_abs_comp : uz_pmsm_model_src_nfp_abs_double
    PORT MAP( nfp_in => Delay1_out1,  -- double
              nfp_out => Abs_out1  -- double
              );

  u_nfp_mul_comp : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion12_out1,  -- double
              nfp_in2 => Abs_out1,  -- double
              nfp_out => Product12_out1  -- double
              );

  u_nfp_add_comp : uz_pmsm_model_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product12_out1,  -- double
              nfp_in2 => Data_Type_Conversion13_out1,  -- double
              nfp_out => Sum5_out1  -- double
              );

  u_nfp_mul_comp_1 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum5_out1,  -- double
              nfp_in2 => Sign1_out1,  -- double
              nfp_out => Product4_out1  -- double
              );

  u_nfp_mul_comp_2 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_d,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Product2_out1  -- double
              );

  u_nfp_mul_comp_3 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_q,  -- double
              nfp_in2 => Data_Type_Conversion6_out1,  -- double
              nfp_out => Product7_out1  -- double
              );

  u_nfp_mul_comp_4 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out1,  -- double
              nfp_in2 => Delay1_out1_2,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_sub_comp : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_q,  -- double
              nfp_in2 => Product1_out1,  -- double
              nfp_out => Sum1_op_stage1  -- double
              );

  u_nfp_sub_comp_1 : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum1_op_stage1,  -- double
              nfp_in2 => Product7_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_mul_comp_5 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_3,  -- double
              nfp_in2 => Sum1_out1,  -- double
              nfp_out => Gain_out1  -- double
              );

  u_nfp_add_comp_1 : uz_pmsm_model_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Sum3_out1  -- double
              );

  u_nfp_mul_comp_6 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_1,  -- double
              nfp_in2 => Data_Type_Conversion8_out1,  -- double
              nfp_out => I_q  -- double
              );

  u_nfp_mul_comp_7 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_2,  -- double
              nfp_in2 => I_q,  -- double
              nfp_out => Product3_out1  -- double
              );

  u_nfp_sub_comp_2 : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1,  -- double
              nfp_in2 => Product2_out1,  -- double
              nfp_out => Sum3_out1_1  -- double
              );

  u_nfp_mul_comp_8 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_2,  -- double
              nfp_in2 => Sum3_out1_1,  -- double
              nfp_out => M_Mi  -- double
              );

  u_nfp_mul_comp_9 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_1,  -- double
              nfp_in2 => Data_Type_Conversion10_out1,  -- double
              nfp_out => M_Mi_2  -- double
              );

  u_nfp_sub_comp_3 : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => M_Mi_4,  -- double
              nfp_in2 => Product4_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_sub_comp_4 : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_out1_1,  -- double
              nfp_in2 => load_torque,  -- double
              nfp_out => Sum1_out1_1  -- double
              );

  u_nfp_mul_comp_10 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion14_out1,  -- double
              nfp_in2 => Sum1_out1_1,  -- double
              nfp_out => Product11_out1  -- double
              );

  u_nfp_mul_comp_11 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst_1,  -- double
              nfp_in2 => Product11_out1,  -- double
              nfp_out => Gain_out1_1  -- double
              );

  u_nfp_add_comp_2 : uz_pmsm_model_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_1,  -- double
              nfp_in2 => Delay1_out1,  -- double
              nfp_out => Sum3_out1_2  -- double
              );

  u_nfp_mul_comp_12 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Switch_out1,  -- double
              nfp_in2 => Data_Type_Conversion10_out1,  -- double
              nfp_out => Product10_out1  -- double
              );

  u_nfp_mul_comp_13 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out1,  -- double
              nfp_in2 => Delay1_out1_1,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_14 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => I_d,  -- double
              nfp_in2 => Data_Type_Conversion6_out1,  -- double
              nfp_out => Product8_out1  -- double
              );

  u_nfp_sub_comp_5 : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => u_d,  -- double
              nfp_in2 => Product8_out1,  -- double
              nfp_out => Sum_op_stage1  -- double
              );

  u_nfp_add_comp_3 : uz_pmsm_model_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum_op_stage1,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => Sum_out1_2  -- double
              );

  u_nfp_mul_comp_15 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => kconst,  -- double
              nfp_in2 => Sum_out1_2,  -- double
              nfp_out => Gain_out1_2  -- double
              );

  u_nfp_add_comp_4 : uz_pmsm_model_src_nfp_add_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Gain_out1_2,  -- double
              nfp_in2 => Delay1_out1_2,  -- double
              nfp_out => Sum3_out1_3  -- double
              );

  u_nfp_sub_comp_6 : uz_pmsm_model_src_nfp_sub_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay1_out1_2,  -- double
              nfp_in2 => Data_Type_Conversion9_out1,  -- double
              nfp_out => Sum2_out1  -- double
              );

  u_nfp_mul_comp_16 : uz_pmsm_model_src_nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Data_Type_Conversion7_out1,  -- double
              nfp_in2 => Sum2_out1,  -- double
              nfp_out => I_d  -- double
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_double2single : uz_pmsm_model_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => i_d_2,  -- double
              nfp_out => Mux_out1(0)  -- single
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_double2single_1 : uz_pmsm_model_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => i_q_2,  -- double
              nfp_out => Mux_out1(1)  -- single
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_double2single_2 : uz_pmsm_model_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => M_Mi_2,  -- double
              nfp_out => Mux_out1(2)  -- single
              );

  u_uz_pmsm_model_uz_pmsm_model_nfp_convert_double2single_3 : uz_pmsm_model_src_nfp_convert_double2single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Switch1_out1,  -- double
              nfp_out => Mux_out1(3)  -- single
              );

  reset_integrators_1 <= reset_integrators;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reset_integrators_2 <= '0';
      ELSIF enb = '1' THEN
        reset_integrators_2 <= reset_integrators_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  kconst <= X"3ea0c6f7a0b5ed8d";

  inputs(0) <= inputs_0;
  inputs(1) <= inputs_1;
  inputs(2) <= inputs_2;
  inputs(3) <= inputs_3;

  inputs_4 <= inputs;

  simulate_mechanical_1 <= simulate_mechanical;

  omega_mech_1 <= omega_mech;

  kconst_1 <= X"3ea0c6f7a0b5ed8d";

  kconst_2 <= X"3ff8000000000000";

  kconst_3 <= X"3ea0c6f7a0b5ed8d";

  Delay1_iv <= X"0000000000000000";

  Delay1_iv_1 <= X"0000000000000000";

  Delay1_iv_2 <= X"0000000000000000";

  
  Delay1_toDel <= Sum3_out1 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv;

  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_50_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_toDel;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_toDel_1 <= Delay1_toDel WHEN enb_1_50_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_toDel_1;

  
  Delay1_out1_1 <= Delay1_delOut WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv;

  M_Mi_1 <= M_Mi;

  M_Mi_3 <= M_Mi_2;

  M_Mi_4 <= M_Mi_3;

  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_50_1 = '1' THEN
        Delay_bypass_reg <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Sum_out1_1 <= Sum_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay_bypass_reg;

  
  Delay1_toDel_2 <= Sum3_out1_2 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_1;

  Delay1_lowered2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered2_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_50_1 = '1' THEN
        Delay1_lowered2_bypass_reg <= Delay1_toDel_2;
      END IF;
    END IF;
  END PROCESS Delay1_lowered2_bypass_process;

  
  Delay1_toDel_3 <= Delay1_toDel_2 WHEN enb_1_50_1 = '1' ELSE
      Delay1_lowered2_bypass_reg;

  Delay1_delOut_1 <= Delay1_toDel_3;

  
  Delay1_out1 <= Delay1_delOut_1 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_1;

  
  Switch_out1 <= omega_mech_1 WHEN simulate_mechanical_1 = '0' ELSE
      Delay1_out1;

  
  Delay1_toDel_4 <= Sum3_out1_3 WHEN reset_integrators_2 = '0' ELSE
      Delay1_iv_2;

  Delay1_lowered1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_lowered1_bypass_reg <= X"0000000000000000";
      ELSIF enb_1_50_1 = '1' THEN
        Delay1_lowered1_bypass_reg <= Delay1_toDel_4;
      END IF;
    END IF;
  END PROCESS Delay1_lowered1_bypass_process;

  
  Delay1_toDel_5 <= Delay1_toDel_4 WHEN enb_1_50_1 = '1' ELSE
      Delay1_lowered1_bypass_reg;

  Delay1_delOut_2 <= Delay1_toDel_5;

  
  Delay1_out1_2 <= Delay1_delOut_2 WHEN reset_integrators_1 = '0' ELSE
      Delay1_iv_2;

  I_d_1 <= I_d;

  i_d_2 <= I_d_1;

  I_q_1 <= I_q;

  i_q_2 <= I_q_1;

  
  Switch1_out1 <= omega_mech_1 WHEN simulate_mechanical_1 = '0' ELSE
      Delay1_out1;


  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        t1_bypass_reg(0) <= X"00000000";
        t1_bypass_reg(1) <= X"00000000";
        t1_bypass_reg(2) <= X"00000000";
        t1_bypass_reg(3) <= X"00000000";
      ELSIF enb_1_50_1 = '1' THEN
        t1_bypass_reg(0) <= t1_bypass_reg_next(0);
        t1_bypass_reg(1) <= t1_bypass_reg_next(1);
        t1_bypass_reg(2) <= t1_bypass_reg_next(2);
        t1_bypass_reg(3) <= t1_bypass_reg_next(3);
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Mux_out1_1(0) <= Mux_out1(0) WHEN enb_1_50_1 = '1' ELSE
      t1_bypass_reg(0);
  
  Mux_out1_1(1) <= Mux_out1(1) WHEN enb_1_50_1 = '1' ELSE
      t1_bypass_reg(1);
  
  Mux_out1_1(2) <= Mux_out1(2) WHEN enb_1_50_1 = '1' ELSE
      t1_bypass_reg(2);
  
  Mux_out1_1(3) <= Mux_out1(3) WHEN enb_1_50_1 = '1' ELSE
      t1_bypass_reg(3);
  t1_bypass_reg_next(0) <= Mux_out1(0);
  t1_bypass_reg_next(1) <= Mux_out1(1);
  t1_bypass_reg_next(2) <= Mux_out1(2);
  t1_bypass_reg_next(3) <= Mux_out1(3);

  ce_out <= enb_1_50_1;

  outputs_0 <= Mux_out1_1(0);

  outputs_1 <= Mux_out1_1(1);

  outputs_2 <= Mux_out1_1(2);

  outputs_3 <= Mux_out1_1(3);

END rtl;

