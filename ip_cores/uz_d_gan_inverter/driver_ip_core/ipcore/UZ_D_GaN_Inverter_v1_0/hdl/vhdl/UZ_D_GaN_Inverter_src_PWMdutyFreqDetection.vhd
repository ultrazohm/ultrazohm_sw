-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\UZ_D_GaN_Inverter\UZ_D_GaN_Inverter_src_PWMdutyFreqDetection.vhd
-- Created: 2021-05-07 11:44:45
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: UZ_D_GaN_Inverter_src_PWMdutyFreqDetection
-- Source Path: UZ_D_GaN_Inverter/UZ_D_GaN_Inverter/PWMdutyFreqDetection
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY UZ_D_GaN_Inverter_src_PWMdutyFreqDetection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In1                               :   IN    std_logic;  -- ufix1
        AXI_period                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_hightime                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_lowtime                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        AXI_dutycyc                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END UZ_D_GaN_Inverter_src_PWMdutyFreqDetection;


ARCHITECTURE rtl OF UZ_D_GaN_Inverter_src_PWMdutyFreqDetection IS

  -- Component Declarations
  COMPONENT UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;  -- ufix1
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;  -- ufix1
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UZ_D_GaN_Inverter_src_HDL_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dout                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En31
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Rise_Positive(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    USE ENTITY work.UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive(rtl);

  FOR ALL : UZ_D_GaN_Inverter_src_HDL_Reciprocal
    USE ENTITY work.UZ_D_GaN_Inverter_src_HDL_Reciprocal(rtl);

  -- Signals
  SIGNAL Detect_Rise_Positive_out1        : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Delay17_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_period_tmp                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay18_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Detect_Fall_Nonpositive_out1     : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL AXI_hightime_tmp                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay19_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI_lowtime_tmp                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Reciprocal_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL HDL_Reciprocal_out1_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Product_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En31
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Gain_mul_temp                    : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL AXI_dutycyc_tmp                  : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  u_Detect_Rise_Positive : UZ_D_GaN_Inverter_src_Detect_Rise_Positive
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => In1,  -- ufix1
              Y => Detect_Rise_Positive_out1
              );

  u_Detect_Fall_Nonpositive : UZ_D_GaN_Inverter_src_Detect_Fall_Nonpositive
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => In1,  -- ufix1
              Y => Detect_Fall_Nonpositive_out1
              );

  u_HDL_Reciprocal : UZ_D_GaN_Inverter_src_HDL_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din => std_logic_vector(AXI_period_tmp),  -- uint32
              dout => HDL_Reciprocal_out1  -- ufix32_En31
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 2500000
  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(1, 32);
      ELSIF enb = '1' THEN
        IF Detect_Rise_Positive_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSIF HDL_Counter_out1 >= to_unsigned(2500000, 32) THEN 
          HDL_Counter_out1 <= to_unsigned(1, 32);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(1, 32) ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Compare_To_Constant1_out1 > '0' ELSE
      '0';

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay17_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay17_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay18_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay18_out1 <= AXI_period_tmp;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  
  AXI_period_tmp <= Delay18_out1 WHEN switch_compare_1 = '0' ELSE
      Delay17_out1;

  AXI_period <= std_logic_vector(AXI_period_tmp);

  
  Compare_To_Constant_out1 <= '1' WHEN Detect_Fall_Nonpositive_out1 = '1' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant_out1 > '0' ELSE
      '0';

  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay19_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay19_out1 <= AXI_hightime_tmp;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  
  AXI_hightime_tmp <= Delay19_out1 WHEN switch_compare_1_1 = '0' ELSE
      Delay17_out1;

  AXI_hightime <= std_logic_vector(AXI_hightime_tmp);

  AXI_lowtime_tmp <= AXI_period_tmp - AXI_hightime_tmp;

  AXI_lowtime <= std_logic_vector(AXI_lowtime_tmp);

  HDL_Reciprocal_out1_unsigned <= unsigned(HDL_Reciprocal_out1);

  Product_mul_temp <= AXI_hightime_tmp * HDL_Reciprocal_out1_unsigned;
  Product_out1 <= signed(Product_mul_temp(32 DOWNTO 1));

  Gain_mul_temp <= to_signed(1677721600, 32) * Product_out1;
  AXI_dutycyc_tmp <= Gain_mul_temp(61 DOWNTO 30);

  AXI_dutycyc <= std_logic_vector(AXI_dutycyc_tmp);

END rtl;

