-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi_rom is 
    generic(
             DWIDTH     : integer := 44; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000000000000000000000000000000000000", 
    1 => "00000100000000000000000001111100000000000001", 
    2 => "00001000000000000000000111111000000000001010", 
    3 => "00001100000000000000010001110100000000100011", 
    4 => "00010000000000000000011111110000000001010100", 
    5 => "00010100000000000000110001101100000010100101", 
    6 => "00011000000000000001000111101000000100011101", 
    7 => "00011100000000000001100001100100000111000110", 
    8 => "00100000000000000001111111100000001010100110", 
    9 => "00100100000000000010100001011100001111000110", 
    10 => "00101000000000000011000111011000010100101111", 
    11 => "00101100000000000011110001010100011011100111", 
    12 => "00110000000000000100011111010000100011110111", 
    13 => "00110100000000000101010001001100101101100110", 
    14 => "00111000000000000110000111001000111000111110", 
    15 => "00111100000000000111000001000101000110000110", 
    16 => "01000000000000000111111111000001010101000101", 
    17 => "01000100000000001001000000111101100110000100", 
    18 => "01001000000000001010000110111001111001001100", 
    19 => "01001100000000001011010000110110001110100011", 
    20 => "01010000000000001100011110110010100110010010", 
    21 => "01010100000000001101110000101111000000100001", 
    22 => "01011000000000001111000110101011011101010111", 
    23 => "01011100000000010000100000100111111100111110", 
    24 => "01100000000000010001111110100100011111011101", 
    25 => "01100100000000010011100000100001000100111011", 
    26 => "01101000000000010101000110011101101101100010", 
    27 => "01101100000000010110110000011010011001011000", 
    28 => "01110000000000011000011110010111001000100110", 
    29 => "01110100000000011010010000010011111011010100", 
    30 => "01111000000000011100000110010000110001101010", 
    31 => "01111100000000011110000000001101101011110000", 
    32 => "10000000000000011111111110001010101001101110", 
    33 => "10000100000000100010000000000111101011101100", 
    34 => "10001000000000100100000110000100110001110010", 
    35 => "10001100000000100110010000000001111100000111", 
    36 => "10010000000000101000011101111111001010110101", 
    37 => "10010100000000101010101111111100011110000010", 
    38 => "10011000000000101101000101111001110101111000", 
    39 => "10011100000000101111011111110111010010011101", 
    40 => "10100000000000110001111101110100110011111011", 
    41 => "10100100000000110100011111110010011010011000", 
    42 => "10101000000000110111000101110000000101111101", 
    43 => "10101100000000111001101111101101110110110010", 
    44 => "10110000000000111100011101101011101100111111", 
    45 => "10110100000000111111001111101001101000101101", 
    46 => "10111000000001000010000101100111101010000010", 
    47 => "10111100000001000100111111100101110001000111", 
    48 => "11000000000001000111111101100011111110000100", 
    49 => "11000100000001001010111111100010010001000001", 
    50 => "11001000000001001110000101100000101010000110", 
    51 => "11001100000001010001001111011111001001011011", 
    52 => "11010000000001010100011101011101101111001000", 
    53 => "11010100000001010111101111011100011011010101", 
    54 => "11011000000001011011000101011011001110001010", 
    55 => "11011100000001011110011111011010000111101111", 
    56 => "11100000000001100001111101011001001000001100", 
    57 => "11100100000001100101011111011000001111101001", 
    58 => "11101000000001101001000101010111011110001110", 
    59 => "11101100000001101100101111010110110100000011", 
    60 => "11110000000001110000011101010110010001010000", 
    61 => "11110100000001110100001111010101110101111101", 
    62 => "11111000000001111000000101010101100010010010", 
    63 => "11111100000001111011111111010101010110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi is
    generic (
        DataWidth : INTEGER := 44;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi is
    component uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi_rom_U :  component uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_fYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


