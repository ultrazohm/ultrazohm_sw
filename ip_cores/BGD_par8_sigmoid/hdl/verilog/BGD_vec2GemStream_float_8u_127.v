// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_vec2GemStream_float_8u_127 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_m_dout,
        p_m_empty_n,
        p_m_read,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [255:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_m_dout;
input   p_m_empty_n;
output   p_m_read;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
output  [13:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [13:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_m_read;
reg p_n_read;
reg[13:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln86_reg_453;
reg    p_m_blk_n;
reg    p_n_blk_n;
reg    p_in_offset_blk_n;
reg   [60:0] indvar_flatten_reg_184;
reg   [28:0] i_reg_195;
reg   [13:0] p_in_offset_read_reg_431;
reg    ap_block_state1;
wire   [28:0] trunc_ln_fu_206_p4;
reg   [28:0] trunc_ln_reg_443;
wire   [60:0] bound_fu_224_p2;
reg   [60:0] bound_reg_448;
wire   [0:0] icmp_ln86_fu_230_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [60:0] add_ln86_fu_235_p2;
reg   [60:0] add_ln86_reg_457;
reg    ap_enable_reg_pp0_iter0;
wire   [28:0] select_ln86_fu_246_p3;
reg   [28:0] select_ln86_reg_462;
wire   [13:0] tmp_1_fu_258_p3;
reg   [13:0] tmp_1_reg_467;
reg   [31:0] p_in_load_reg_483;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] p_in_load_1_reg_493;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] p_in_load_2_reg_503;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] p_in_load_3_reg_513;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] p_in_load_4_reg_523;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] p_in_load_5_reg_533;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [13:0] add_ln92_7_fu_371_p2;
reg   [13:0] add_ln92_7_reg_543;
reg   [31:0] p_in_load_6_reg_548;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [28:0] add_ln87_fu_380_p2;
reg   [28:0] add_ln87_reg_558;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage7_subdone;
reg   [60:0] ap_phi_mux_indvar_flatten_phi_fu_188_p4;
reg   [28:0] ap_phi_mux_i_phi_fu_199_p4;
wire   [63:0] zext_ln92_fu_271_p1;
wire   [63:0] zext_ln92_1_fu_286_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln92_2_fu_301_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln92_3_fu_316_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln92_4_fu_331_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln92_5_fu_346_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln92_6_fu_361_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln92_7_fu_376_p1;
wire    ap_block_pp0_stage7;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] bound_fu_224_p0;
wire   [31:0] bound_fu_224_p1;
wire   [0:0] icmp_ln87_fu_241_p2;
wire   [10:0] empty_fu_254_p1;
wire   [13:0] add_ln92_fu_266_p2;
wire   [13:0] or_ln92_fu_276_p2;
wire   [13:0] add_ln92_1_fu_281_p2;
wire   [13:0] or_ln92_1_fu_291_p2;
wire   [13:0] add_ln92_2_fu_296_p2;
wire   [13:0] or_ln92_2_fu_306_p2;
wire   [13:0] add_ln92_3_fu_311_p2;
wire   [13:0] or_ln92_3_fu_321_p2;
wire   [13:0] add_ln92_4_fu_326_p2;
wire   [13:0] or_ln92_4_fu_336_p2;
wire   [13:0] add_ln92_5_fu_341_p2;
wire   [13:0] or_ln92_5_fu_351_p2;
wire   [13:0] add_ln92_6_fu_356_p2;
wire   [13:0] or_ln92_6_fu_366_p2;
wire   [31:0] l_v_7_fu_406_p1;
wire   [31:0] l_v_6_fu_403_p1;
wire   [31:0] l_v_5_fu_400_p1;
wire   [31:0] l_v_4_fu_397_p1;
wire   [31:0] l_v_3_fu_394_p1;
wire   [31:0] l_v_2_fu_391_p1;
wire   [31:0] l_v_1_fu_388_p1;
wire   [31:0] l_v_fu_385_p1;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] bound_fu_224_p00;
wire   [60:0] bound_fu_224_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

BGD_mul_29ns_32ns_61_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 61 ))
mul_29ns_32ns_61_1_1_U31(
    .din0(bound_fu_224_p0),
    .din1(bound_fu_224_p1),
    .dout(bound_fu_224_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_195 <= add_ln87_reg_558;
    end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_195 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_184 <= add_ln86_reg_457;
    end else if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_184 <= 61'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln86_reg_457 <= add_ln86_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln87_reg_558 <= add_ln87_fu_380_p2;
        p_in_load_6_reg_548 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_ln92_7_reg_543 <= add_ln92_7_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_448 <= bound_fu_224_p2;
        p_in_offset_read_reg_431 <= p_in_offset_dout;
        trunc_ln_reg_443 <= {{p_n_dout[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_reg_453 <= icmp_ln86_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_1_reg_493 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_2_reg_503 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_3_reg_513 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_4_reg_523 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_5_reg_533 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_load_reg_483 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_230_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln86_reg_462 <= select_ln86_fu_246_p3;
        tmp_1_reg_467[13 : 3] <= tmp_1_fu_258_p3[13 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_230_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_199_p4 = add_ln87_reg_558;
    end else begin
        ap_phi_mux_i_phi_fu_199_p4 = i_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_188_p4 = add_ln86_reg_457;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_188_p4 = indvar_flatten_reg_184;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            p_in_address1 = zext_ln92_7_fu_376_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            p_in_address1 = zext_ln92_6_fu_361_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            p_in_address1 = zext_ln92_5_fu_346_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            p_in_address1 = zext_ln92_4_fu_331_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            p_in_address1 = zext_ln92_3_fu_316_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            p_in_address1 = zext_ln92_2_fu_301_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            p_in_address1 = zext_ln92_1_fu_286_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_in_address1 = zext_ln92_fu_271_p1;
        end else begin
            p_in_address1 = 'bx;
        end
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_blk_n = p_m_empty_n;
    end else begin
        p_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_m_read = 1'b1;
    end else begin
        p_m_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_453 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln86_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln86_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln86_fu_235_p2 = (ap_phi_mux_indvar_flatten_phi_fu_188_p4 + 61'd1);

assign add_ln87_fu_380_p2 = (29'd1 + select_ln86_reg_462);

assign add_ln92_1_fu_281_p2 = (p_in_offset_read_reg_431 + or_ln92_fu_276_p2);

assign add_ln92_2_fu_296_p2 = (p_in_offset_read_reg_431 + or_ln92_1_fu_291_p2);

assign add_ln92_3_fu_311_p2 = (p_in_offset_read_reg_431 + or_ln92_2_fu_306_p2);

assign add_ln92_4_fu_326_p2 = (p_in_offset_read_reg_431 + or_ln92_3_fu_321_p2);

assign add_ln92_5_fu_341_p2 = (p_in_offset_read_reg_431 + or_ln92_4_fu_336_p2);

assign add_ln92_6_fu_356_p2 = (p_in_offset_read_reg_431 + or_ln92_5_fu_351_p2);

assign add_ln92_7_fu_371_p2 = (p_in_offset_read_reg_431 + or_ln92_6_fu_366_p2);

assign add_ln92_fu_266_p2 = (p_in_offset_read_reg_431 + tmp_1_fu_258_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln86_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln86_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln86_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_in_offset_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (p_m_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln86_reg_453 == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_224_p0 = bound_fu_224_p00;

assign bound_fu_224_p00 = trunc_ln_fu_206_p4;

assign bound_fu_224_p1 = bound_fu_224_p10;

assign bound_fu_224_p10 = p_m_dout;

assign empty_fu_254_p1 = select_ln86_fu_246_p3[10:0];

assign icmp_ln86_fu_230_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_188_p4 == bound_reg_448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_241_p2 = ((ap_phi_mux_i_phi_fu_199_p4 == trunc_ln_reg_443) ? 1'b1 : 1'b0);

assign l_v_1_fu_388_p1 = p_in_load_1_reg_493;

assign l_v_2_fu_391_p1 = p_in_load_2_reg_503;

assign l_v_3_fu_394_p1 = p_in_load_3_reg_513;

assign l_v_4_fu_397_p1 = p_in_load_4_reg_523;

assign l_v_5_fu_400_p1 = p_in_load_5_reg_533;

assign l_v_6_fu_403_p1 = p_in_load_6_reg_548;

assign l_v_7_fu_406_p1 = p_in_q1;

assign l_v_fu_385_p1 = p_in_load_reg_483;

assign or_ln92_1_fu_291_p2 = (tmp_1_reg_467 | 14'd2);

assign or_ln92_2_fu_306_p2 = (tmp_1_reg_467 | 14'd3);

assign or_ln92_3_fu_321_p2 = (tmp_1_reg_467 | 14'd4);

assign or_ln92_4_fu_336_p2 = (tmp_1_reg_467 | 14'd5);

assign or_ln92_5_fu_351_p2 = (tmp_1_reg_467 | 14'd6);

assign or_ln92_6_fu_366_p2 = (tmp_1_reg_467 | 14'd7);

assign or_ln92_fu_276_p2 = (tmp_1_reg_467 | 14'd1);

assign p_out_din = {{{{{{{{l_v_7_fu_406_p1}, {l_v_6_fu_403_p1}}, {l_v_5_fu_400_p1}}, {l_v_4_fu_397_p1}}, {l_v_3_fu_394_p1}}, {l_v_2_fu_391_p1}}, {l_v_1_fu_388_p1}}, {l_v_fu_385_p1}};

assign select_ln86_fu_246_p3 = ((icmp_ln87_fu_241_p2[0:0] === 1'b1) ? 29'd0 : ap_phi_mux_i_phi_fu_199_p4);

assign tmp_1_fu_258_p3 = {{empty_fu_254_p1}, {3'd0}};

assign trunc_ln_fu_206_p4 = {{p_n_dout[31:3]}};

assign zext_ln92_1_fu_286_p1 = add_ln92_1_fu_281_p2;

assign zext_ln92_2_fu_301_p1 = add_ln92_2_fu_296_p2;

assign zext_ln92_3_fu_316_p1 = add_ln92_3_fu_311_p2;

assign zext_ln92_4_fu_331_p1 = add_ln92_4_fu_326_p2;

assign zext_ln92_5_fu_346_p1 = add_ln92_5_fu_341_p2;

assign zext_ln92_6_fu_361_p1 = add_ln92_6_fu_356_p2;

assign zext_ln92_7_fu_376_p1 = add_ln92_7_reg_543;

assign zext_ln92_fu_271_p1 = add_ln92_fu_266_p2;

always @ (posedge ap_clk) begin
    tmp_1_reg_467[2:0] <= 3'b000;
end

endmodule //BGD_vec2GemStream_float_8u_127
