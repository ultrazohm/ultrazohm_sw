-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BGD_gem2StreamTranspose_float_16u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_out_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_n_empty_n : IN STD_LOGIC;
    p_n_read : OUT STD_LOGIC;
    p_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_empty_n : IN STD_LOGIC;
    p_k_read : OUT STD_LOGIC;
    p_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_in_ce0 : OUT STD_LOGIC;
    p_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_in_ce1 : OUT STD_LOGIC;
    p_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_in_offset_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    p_in_offset_empty_n : IN STD_LOGIC;
    p_in_offset_read : OUT STD_LOGIC;
    p_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_n_out_full_n : IN STD_LOGIC;
    p_n_out_write : OUT STD_LOGIC;
    p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out_full_n : IN STD_LOGIC;
    p_k_out_write : OUT STD_LOGIC );
end;


architecture behav of BGD_gem2StreamTranspose_float_16u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";
    constant ap_const_lv14_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_const_lv14_9 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001001";
    constant ap_const_lv14_A : STD_LOGIC_VECTOR (13 downto 0) := "00000000001010";
    constant ap_const_lv14_B : STD_LOGIC_VECTOR (13 downto 0) := "00000000001011";
    constant ap_const_lv14_C : STD_LOGIC_VECTOR (13 downto 0) := "00000000001100";
    constant ap_const_lv14_D : STD_LOGIC_VECTOR (13 downto 0) := "00000000001101";
    constant ap_const_lv14_E : STD_LOGIC_VECTOR (13 downto 0) := "00000000001110";
    constant ap_const_lv14_F : STD_LOGIC_VECTOR (13 downto 0) := "00000000001111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal icmp_ln165_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_890_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_n_blk_n : STD_LOGIC;
    signal p_k_blk_n : STD_LOGIC;
    signal p_in_offset_blk_n : STD_LOGIC;
    signal p_n_out_blk_n : STD_LOGIC;
    signal p_k_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_282 : STD_LOGIC_VECTOR (59 downto 0);
    signal k_reg_293 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_offset_read_reg_836 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal empty_fu_315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_reg_856 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_319_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln_reg_875 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln173_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln173_reg_880 : STD_LOGIC_VECTOR (9 downto 0);
    signal bound_fu_341_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_reg_885 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln165_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln165_fu_352_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln165_reg_894 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln167_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_fu_363_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln165_reg_904 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln_fu_375_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_909 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln173_fu_383_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln173_reg_926 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln165_1_fu_416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln165_1_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln165_fu_423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln165_reg_956 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal l_val_m_Val_1_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal l_val_m_Val_2_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_3_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal l_val_m_Val_4_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_5_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal l_val_m_Val_6_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_7_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal l_val_m_Val_8_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln167_fu_572_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln167_reg_1121 : STD_LOGIC_VECTOR (27 downto 0);
    signal l_val_m_Val_9_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_10_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_810_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_24_reg_1146 : STD_LOGIC_VECTOR (13 downto 0);
    signal l_val_m_Val_0_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_11_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_823_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_28_reg_1171 : STD_LOGIC_VECTOR (13 downto 0);
    signal l_val_m_Val_12_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_m_Val_13_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_286_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_phi_fu_297_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_phi_mux_i_phi_fu_308_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln173_1_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_2_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_3_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln173_4_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_5_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln173_6_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_7_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln173_8_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_9_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln173_10_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_11_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_12_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln173_13_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_14_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_15_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal bound_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_341_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_83_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln165_1_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_3_fu_437_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln173_3_fu_437_p2 : signal is "no";
    signal grp_fu_739_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_5_fu_446_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_5_fu_446_p2 : signal is "no";
    signal grp_fu_747_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_7_fu_465_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_7_fu_465_p2 : signal is "no";
    signal grp_fu_754_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_9_fu_474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_9_fu_474_p2 : signal is "no";
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_11_fu_493_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_11_fu_493_p2 : signal is "no";
    signal grp_fu_768_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_13_fu_502_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_13_fu_502_p2 : signal is "no";
    signal grp_fu_775_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_15_fu_521_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_15_fu_521_p2 : signal is "no";
    signal grp_fu_782_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_17_fu_530_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_17_fu_530_p2 : signal is "no";
    signal grp_fu_789_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_19_fu_549_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_19_fu_549_p2 : signal is "no";
    signal grp_fu_796_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_21_fu_558_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_21_fu_558_p2 : signal is "no";
    signal shl_ln173_1_fu_577_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_fu_584_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_1_fu_589_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_803_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_23_fu_599_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_23_fu_599_p2 : signal is "no";
    signal add_ln173_25_fu_608_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_25_fu_608_p2 : signal is "no";
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_27_fu_617_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_27_fu_617_p2 : signal is "no";
    signal add_ln173_29_fu_626_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_29_fu_626_p2 : signal is "no";
    signal grp_fu_829_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_31_fu_635_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of add_ln173_31_fu_635_p2 : signal is "no";
    signal l_v_135_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_134_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_133_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_132_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_131_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_130_fu_674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_129_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_128_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_127_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_126_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_125_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_124_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_123_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_122_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_121_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_v_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_739_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_747_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_754_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_768_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_775_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_782_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_789_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_796_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_810_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_823_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_829_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_731_ce : STD_LOGIC;
    signal grp_fu_739_ce : STD_LOGIC;
    signal grp_fu_747_ce : STD_LOGIC;
    signal grp_fu_754_ce : STD_LOGIC;
    signal grp_fu_761_ce : STD_LOGIC;
    signal grp_fu_768_ce : STD_LOGIC;
    signal grp_fu_775_ce : STD_LOGIC;
    signal grp_fu_782_ce : STD_LOGIC;
    signal grp_fu_789_ce : STD_LOGIC;
    signal grp_fu_796_ce : STD_LOGIC;
    signal grp_fu_803_ce : STD_LOGIC;
    signal grp_fu_810_ce : STD_LOGIC;
    signal grp_fu_816_ce : STD_LOGIC;
    signal grp_fu_823_ce : STD_LOGIC;
    signal grp_fu_829_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_341_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_fu_341_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component BGD_mul_32ns_28ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component BGD_mul_10s_10s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component BGD_mac_muladd_14s_14s_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    mul_32ns_28ns_60_1_1_U156 : component BGD_mul_32ns_28ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 28,
        dout_WIDTH => 60)
    port map (
        din0 => bound_fu_341_p0,
        din1 => bound_fu_341_p1,
        dout => bound_fu_341_p2);

    mul_10s_10s_10_1_1_U157 : component BGD_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => empty_83_fu_371_p1,
        din1 => trunc_ln173_reg_880,
        dout => mul_ln173_fu_383_p2);

    mac_muladd_14s_14s_14ns_14_4_1_U158 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_731_p1,
        din2 => trunc_ln165_fu_423_p1,
        ce => grp_fu_731_ce,
        dout => grp_fu_731_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U159 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_739_p1,
        din2 => trunc_ln165_fu_423_p1,
        ce => grp_fu_739_ce,
        dout => grp_fu_739_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U160 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_747_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_747_ce,
        dout => grp_fu_747_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U161 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_754_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_754_ce,
        dout => grp_fu_754_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U162 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_761_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_761_ce,
        dout => grp_fu_761_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U163 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_768_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_768_ce,
        dout => grp_fu_768_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U164 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_775_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_775_ce,
        dout => grp_fu_775_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U165 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_782_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_782_ce,
        dout => grp_fu_782_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U166 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_789_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_789_ce,
        dout => grp_fu_789_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U167 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_796_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_796_ce,
        dout => grp_fu_796_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U168 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_803_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_803_ce,
        dout => grp_fu_803_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U169 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_810_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_810_ce,
        dout => grp_fu_810_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U170 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_816_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_816_ce,
        dout => grp_fu_816_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U171 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_823_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_823_ce,
        dout => grp_fu_823_p3);

    mac_muladd_14s_14s_14ns_14_4_1_U172 : component BGD_mac_muladd_14s_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_856,
        din1 => grp_fu_829_p1,
        din2 => trunc_ln165_reg_956,
        ce => grp_fu_829_ce,
        dout => grp_fu_829_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                i_reg_304 <= select_ln165_1_reg_951;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_304 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_282 <= add_ln165_reg_894;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_282 <= ap_const_lv60_0;
            end if; 
        end if;
    end process;

    k_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_293 <= add_ln167_reg_1121;
            elsif ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_293 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln165_reg_894 <= add_ln165_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln167_reg_1121 <= add_ln167_fu_572_p2;
                l_val_m_Val_7_reg_1096 <= p_in_q1;
                l_val_m_Val_8_reg_1101 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln173_24_reg_1146 <= grp_fu_810_p3;
                l_val_m_Val_10_reg_1136 <= p_in_q0;
                l_val_m_Val_9_reg_1131 <= p_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln173_28_reg_1171 <= grp_fu_823_p3;
                l_val_m_Val_0_reg_1151 <= p_in_q1;
                l_val_m_Val_11_reg_1156 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_885 <= bound_fu_341_p2;
                empty_reg_856 <= empty_fu_315_p1;
                p_in_offset_read_reg_836 <= p_in_offset_dout;
                trunc_ln173_reg_880 <= trunc_ln173_fu_329_p1;
                trunc_ln_reg_875 <= p_n_dout(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln165_reg_890 <= icmp_ln165_fu_347_p2;
                icmp_ln165_reg_890_pp0_iter1_reg <= icmp_ln165_reg_890;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_fu_347_p2 = ap_const_lv1_0))) then
                icmp_ln167_reg_899 <= icmp_ln167_fu_358_p2;
                mul_ln173_reg_926 <= mul_ln173_fu_383_p2;
                select_ln165_reg_904 <= select_ln165_fu_363_p3;
                    shl_ln_reg_909(13 downto 4) <= shl_ln_fu_375_p3(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                l_val_m_Val_12_reg_1176 <= p_in_q1;
                l_val_m_Val_13_reg_1181 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_1_reg_1006 <= p_in_q1;
                l_val_m_Val_2_reg_1011 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_3_reg_1036 <= p_in_q1;
                l_val_m_Val_4_reg_1041 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                l_val_m_Val_5_reg_1066 <= p_in_q1;
                l_val_m_Val_6_reg_1071 <= p_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln165_1_reg_951 <= select_ln165_1_fu_416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln165_reg_956 <= trunc_ln165_fu_423_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_909(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, icmp_ln165_reg_890, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln165_reg_890 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((icmp_ln165_reg_890 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln165_1_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_phi_fu_308_p4));
    add_ln165_fu_352_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_286_p4) + unsigned(ap_const_lv60_1));
    add_ln167_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv28_1) + unsigned(select_ln165_reg_904));
    add_ln173_11_fu_493_p2 <= std_logic_vector(signed(grp_fu_761_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_13_fu_502_p2 <= std_logic_vector(signed(grp_fu_768_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_15_fu_521_p2 <= std_logic_vector(signed(grp_fu_775_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_17_fu_530_p2 <= std_logic_vector(signed(grp_fu_782_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_19_fu_549_p2 <= std_logic_vector(signed(grp_fu_789_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_1_fu_589_p2 <= std_logic_vector(unsigned(add_ln173_fu_584_p2) + unsigned(p_in_offset_read_reg_836));
    add_ln173_21_fu_558_p2 <= std_logic_vector(signed(grp_fu_796_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_23_fu_599_p2 <= std_logic_vector(signed(grp_fu_803_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_25_fu_608_p2 <= std_logic_vector(signed(add_ln173_24_reg_1146) + signed(p_in_offset_read_reg_836));
    add_ln173_27_fu_617_p2 <= std_logic_vector(signed(grp_fu_816_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_29_fu_626_p2 <= std_logic_vector(signed(add_ln173_28_reg_1171) + signed(p_in_offset_read_reg_836));
    add_ln173_31_fu_635_p2 <= std_logic_vector(signed(grp_fu_829_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_3_fu_437_p2 <= std_logic_vector(signed(grp_fu_731_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_5_fu_446_p2 <= std_logic_vector(signed(grp_fu_739_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_7_fu_465_p2 <= std_logic_vector(signed(grp_fu_747_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_9_fu_474_p2 <= std_logic_vector(signed(grp_fu_754_p3) + signed(p_in_offset_read_reg_836));
    add_ln173_fu_584_p2 <= std_logic_vector(unsigned(trunc_ln165_reg_956) + unsigned(shl_ln173_1_fu_577_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln165_reg_890_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_01001 <= ((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln165_reg_890_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_11001 <= ((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(p_out_full_n, ap_enable_reg_pp0_iter1, icmp_ln165_reg_890_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_subdone <= ((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_out_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
                ap_block_state1 <= ((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage3_iter1_assign_proc : process(p_out_full_n, icmp_ln165_reg_890_pp0_iter1_reg)
    begin
                ap_block_state13_pp0_stage3_iter1 <= ((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (p_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln165_reg_890)
    begin
        if ((icmp_ln165_reg_890 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_308_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln165_reg_890_pp0_iter1_reg, i_reg_304, select_ln165_1_reg_951, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_i_phi_fu_308_p4 <= select_ln165_1_reg_951;
        else 
            ap_phi_mux_i_phi_fu_308_p4 <= i_reg_304;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_286_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln165_reg_890, indvar_flatten_reg_282, ap_CS_fsm_pp0_stage0, add_ln165_reg_894, ap_block_pp0_stage0)
    begin
        if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_286_p4 <= add_ln165_reg_894;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_286_p4 <= indvar_flatten_reg_282;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_297_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln165_reg_890, k_reg_293, ap_CS_fsm_pp0_stage0, add_ln167_reg_1121, ap_block_pp0_stage0)
    begin
        if (((icmp_ln165_reg_890 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_k_phi_fu_297_p4 <= add_ln167_reg_1121;
        else 
            ap_phi_mux_k_phi_fu_297_p4 <= k_reg_293;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_341_p0 <= bound_fu_341_p00(32 - 1 downto 0);
    bound_fu_341_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_k_dout),60));
    bound_fu_341_p1 <= bound_fu_341_p10(28 - 1 downto 0);
    bound_fu_341_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_319_p4),60));
    empty_83_fu_371_p1 <= select_ln165_fu_363_p3(10 - 1 downto 0);
    empty_fu_315_p1 <= p_k_dout(14 - 1 downto 0);

    grp_fu_731_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_731_ce <= ap_const_logic_1;
        else 
            grp_fu_731_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_731_p1 <= (shl_ln_fu_375_p3 or ap_const_lv14_1);

    grp_fu_739_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_739_ce <= ap_const_logic_1;
        else 
            grp_fu_739_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_739_p1 <= (shl_ln_fu_375_p3 or ap_const_lv14_2);

    grp_fu_747_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_747_ce <= ap_const_logic_1;
        else 
            grp_fu_747_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_747_p1 <= (shl_ln_reg_909 or ap_const_lv14_3);

    grp_fu_754_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_754_ce <= ap_const_logic_1;
        else 
            grp_fu_754_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_754_p1 <= (shl_ln_reg_909 or ap_const_lv14_4);

    grp_fu_761_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_761_ce <= ap_const_logic_1;
        else 
            grp_fu_761_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_761_p1 <= (shl_ln_reg_909 or ap_const_lv14_5);

    grp_fu_768_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_768_ce <= ap_const_logic_1;
        else 
            grp_fu_768_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_768_p1 <= (shl_ln_reg_909 or ap_const_lv14_6);

    grp_fu_775_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_775_ce <= ap_const_logic_1;
        else 
            grp_fu_775_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_775_p1 <= (shl_ln_reg_909 or ap_const_lv14_7);

    grp_fu_782_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_782_ce <= ap_const_logic_1;
        else 
            grp_fu_782_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_782_p1 <= (shl_ln_reg_909 or ap_const_lv14_8);

    grp_fu_789_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_789_ce <= ap_const_logic_1;
        else 
            grp_fu_789_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_789_p1 <= (shl_ln_reg_909 or ap_const_lv14_9);

    grp_fu_796_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_796_ce <= ap_const_logic_1;
        else 
            grp_fu_796_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_796_p1 <= (shl_ln_reg_909 or ap_const_lv14_A);

    grp_fu_803_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_803_ce <= ap_const_logic_1;
        else 
            grp_fu_803_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_803_p1 <= (shl_ln_reg_909 or ap_const_lv14_B);

    grp_fu_810_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_810_ce <= ap_const_logic_1;
        else 
            grp_fu_810_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_810_p1 <= (shl_ln_reg_909 or ap_const_lv14_C);

    grp_fu_816_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_816_ce <= ap_const_logic_1;
        else 
            grp_fu_816_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_816_p1 <= (shl_ln_reg_909 or ap_const_lv14_D);

    grp_fu_823_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_823_ce <= ap_const_logic_1;
        else 
            grp_fu_823_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_823_p1 <= (shl_ln_reg_909 or ap_const_lv14_E);

    grp_fu_829_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_829_ce <= ap_const_logic_1;
        else 
            grp_fu_829_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_829_p1 <= (shl_ln_reg_909 or ap_const_lv14_F);
    icmp_ln165_fu_347_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_286_p4 = bound_reg_885) else "0";
    icmp_ln167_fu_358_p2 <= "1" when (ap_phi_mux_k_phi_fu_297_p4 = trunc_ln_reg_875) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_v_121_fu_647_p1 <= l_val_m_Val_1_reg_1006;
    l_v_122_fu_650_p1 <= l_val_m_Val_2_reg_1011;
    l_v_123_fu_653_p1 <= l_val_m_Val_3_reg_1036;
    l_v_124_fu_656_p1 <= l_val_m_Val_4_reg_1041;
    l_v_125_fu_659_p1 <= l_val_m_Val_5_reg_1066;
    l_v_126_fu_662_p1 <= l_val_m_Val_6_reg_1071;
    l_v_127_fu_665_p1 <= l_val_m_Val_7_reg_1096;
    l_v_128_fu_668_p1 <= l_val_m_Val_8_reg_1101;
    l_v_129_fu_671_p1 <= l_val_m_Val_9_reg_1131;
    l_v_130_fu_674_p1 <= l_val_m_Val_10_reg_1136;
    l_v_131_fu_677_p1 <= l_val_m_Val_11_reg_1156;
    l_v_132_fu_680_p1 <= l_val_m_Val_12_reg_1176;
    l_v_133_fu_683_p1 <= l_val_m_Val_13_reg_1181;
    l_v_134_fu_686_p1 <= p_in_q1;
    l_v_135_fu_690_p1 <= p_in_q0;
    l_v_fu_644_p1 <= l_val_m_Val_0_reg_1151;

    p_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln173_2_fu_450_p1, ap_block_pp0_stage4, zext_ln173_4_fu_478_p1, ap_block_pp0_stage5, zext_ln173_6_fu_506_p1, ap_block_pp0_stage6, zext_ln173_8_fu_534_p1, ap_block_pp0_stage7, zext_ln173_10_fu_562_p1, zext_ln173_11_fu_603_p1, ap_block_pp0_stage1, zext_ln173_13_fu_621_p1, zext_ln173_15_fu_639_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_in_address0 <= zext_ln173_15_fu_639_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_in_address0 <= zext_ln173_13_fu_621_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address0 <= zext_ln173_11_fu_603_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln173_10_fu_562_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln173_8_fu_534_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln173_6_fu_506_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln173_4_fu_478_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address0 <= zext_ln173_2_fu_450_p1(14 - 1 downto 0);
        else 
            p_in_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln173_1_fu_441_p1, zext_ln173_3_fu_469_p1, ap_block_pp0_stage4, zext_ln173_5_fu_497_p1, ap_block_pp0_stage5, zext_ln173_7_fu_525_p1, ap_block_pp0_stage6, zext_ln173_9_fu_553_p1, ap_block_pp0_stage7, zext_ln173_fu_594_p1, zext_ln173_12_fu_612_p1, ap_block_pp0_stage1, zext_ln173_14_fu_630_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            p_in_address1 <= zext_ln173_14_fu_630_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_in_address1 <= zext_ln173_12_fu_612_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_in_address1 <= zext_ln173_fu_594_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln173_9_fu_553_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln173_7_fu_525_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln173_5_fu_497_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln173_3_fu_469_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_in_address1 <= zext_ln173_1_fu_441_p1(14 - 1 downto 0);
        else 
            p_in_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    p_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce0 <= ap_const_logic_1;
        else 
            p_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_in_ce1 <= ap_const_logic_1;
        else 
            p_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_in_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_blk_n <= p_in_offset_empty_n;
        else 
            p_in_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_in_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_read <= ap_const_logic_1;
        else 
            p_in_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    p_k_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_blk_n <= p_k_empty_n;
        else 
            p_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_blk_n <= p_k_out_full_n;
        else 
            p_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out_din <= p_k_dout;

    p_k_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_write <= ap_const_logic_1;
        else 
            p_k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_read <= ap_const_logic_1;
        else 
            p_k_read <= ap_const_logic_0;
        end if; 
    end process;


    p_n_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_blk_n <= p_n_empty_n;
        else 
            p_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_n_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_blk_n <= p_n_out_full_n;
        else 
            p_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_n_out_din <= p_n_dout;

    p_n_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_out_write <= ap_const_logic_1;
        else 
            p_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_n_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_n_empty_n, p_k_empty_n, p_in_offset_empty_n, p_n_out_full_n, p_k_out_full_n)
    begin
        if ((not(((p_k_out_full_n = ap_const_logic_0) or (p_n_out_full_n = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (p_k_empty_n = ap_const_logic_0) or (p_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_n_read <= ap_const_logic_1;
        else 
            p_n_read <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, icmp_ln165_reg_890_pp0_iter1_reg)
    begin
        if (((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= (((((((((((((((l_v_135_fu_690_p1 & l_v_134_fu_686_p1) & l_v_133_fu_683_p1) & l_v_132_fu_680_p1) & l_v_131_fu_677_p1) & l_v_130_fu_674_p1) & l_v_129_fu_671_p1) & l_v_128_fu_668_p1) & l_v_127_fu_665_p1) & l_v_126_fu_662_p1) & l_v_125_fu_659_p1) & l_v_124_fu_656_p1) & l_v_123_fu_653_p1) & l_v_122_fu_650_p1) & l_v_121_fu_647_p1) & l_v_fu_644_p1);

    p_out_write_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, icmp_ln165_reg_890_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln165_reg_890_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln165_1_fu_416_p3 <= 
        add_ln165_1_fu_410_p2 when (icmp_ln167_reg_899(0) = '1') else 
        ap_phi_mux_i_phi_fu_308_p4;
    select_ln165_fu_363_p3 <= 
        ap_const_lv28_0 when (icmp_ln167_fu_358_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_297_p4;
    shl_ln173_1_fu_577_p3 <= (mul_ln173_reg_926 & ap_const_lv4_0);
    shl_ln_fu_375_p3 <= (empty_83_fu_371_p1 & ap_const_lv4_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln165_fu_423_p1 <= select_ln165_1_fu_416_p3(14 - 1 downto 0);
    trunc_ln173_fu_329_p1 <= p_k_dout(10 - 1 downto 0);
    trunc_ln_fu_319_p4 <= p_n_dout(31 downto 4);
    zext_ln173_10_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_21_fu_558_p2),64));
    zext_ln173_11_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_23_fu_599_p2),64));
    zext_ln173_12_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_25_fu_608_p2),64));
    zext_ln173_13_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_27_fu_617_p2),64));
    zext_ln173_14_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_29_fu_626_p2),64));
    zext_ln173_15_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_31_fu_635_p2),64));
    zext_ln173_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_3_fu_437_p2),64));
    zext_ln173_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_5_fu_446_p2),64));
    zext_ln173_3_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_7_fu_465_p2),64));
    zext_ln173_4_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_9_fu_474_p2),64));
    zext_ln173_5_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_11_fu_493_p2),64));
    zext_ln173_6_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_13_fu_502_p2),64));
    zext_ln173_7_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_15_fu_521_p2),64));
    zext_ln173_8_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_17_fu_530_p2),64));
    zext_ln173_9_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_19_fu_549_p2),64));
    zext_ln173_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln173_1_fu_589_p2),64));
end behav;
