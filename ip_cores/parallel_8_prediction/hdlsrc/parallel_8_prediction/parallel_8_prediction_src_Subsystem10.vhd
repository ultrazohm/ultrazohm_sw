-- -------------------------------------------------------------
-- 
-- File Name: C:\ultrazohm_sw\ip_cores\parallel_8_prediction\hdlsrc\parallel_8_prediction\parallel_8_prediction_src_Subsystem10.vhd
-- Created: 2022-10-17 15:11:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: parallel_8_prediction_src_Subsystem10
-- Source Path: parallel_8_prediction/Prediction_and_cost_function2/Subsystem/Subsystem10
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.parallel_8_prediction_src_Prediction_and_cost_function2_pkg.ALL;

ENTITY parallel_8_prediction_src_Subsystem10 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        SampleTime_div_Ld                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lq                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Lx                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        SampleTime_div_Ly                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        d_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        q_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        x_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        y_phase_voltage_per_switching_state :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_k                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iq_k                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ix_k                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        iy_k                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        psiPM                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Lq                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Ld                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Rs                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        omega_el                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        id_6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        iq_6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        ix_6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        iy_6                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END parallel_8_prediction_src_Subsystem10;


ARCHITECTURE rtl OF parallel_8_prediction_src_Subsystem10 IS

  -- Component Declarations
  COMPONENT parallel_8_prediction_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT parallel_8_prediction_src_nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : parallel_8_prediction_src_nfp_mul_single
    USE ENTITY work.parallel_8_prediction_src_nfp_mul_single(rtl);

  FOR ALL : parallel_8_prediction_src_nfp_sub_single
    USE ENTITY work.parallel_8_prediction_src_nfp_sub_single(rtl);

  FOR ALL : parallel_8_prediction_src_nfp_add_single
    USE ENTITY work.parallel_8_prediction_src_nfp_add_single(rtl);

  -- Signals
  SIGNAL delayMatch14_reg                 : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch14_reg_next            : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL SampleTime_div_Ld_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch11_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch11_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL d_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL reduced_reg_next                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Rs_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_op_stage1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch13_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch13_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Subtract_op_stage1_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch9_reg                  : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch9_reg_next             : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL Lq_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_1                    : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL reduced_reg_next_1               : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL iq_k_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch15_reg                 : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch15_reg_next            : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL id_k_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch22_reg                 : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL delayMatch22_reg_next            : vector_of_std_logic_vector32(0 TO 29);  -- ufix32 [30]
  SIGNAL SampleTime_div_Lq_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch17_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch17_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL q_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_op_stage1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch21_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch21_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Subtract1_op_stage1_1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch20_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch20_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL omega_el_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch19_reg                 : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL delayMatch19_reg_next            : vector_of_std_logic_vector32(0 TO 11);  -- ufix32 [12]
  SIGNAL psiPM_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch18_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch18_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL Ld_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product7_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg_2                    : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL reduced_reg_next_2               : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL iq_k_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch26_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch26_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL SampleTime_div_Lx_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch25_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch25_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL x_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product8_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch27_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch27_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL ix_k_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch30_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch30_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL SampleTime_div_Ly_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch29_reg                 : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch29_reg_next            : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL y_phase_voltage_per_switching_state_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product10_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch31_reg                 : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL delayMatch31_reg_next            : vector_of_std_logic_vector32(0 TO 17);  -- ufix32 [18]
  SIGNAL iy_k_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_k,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_sub_comp : parallel_8_prediction_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => d_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => Product2_out1,  -- single
              nfp_out => Subtract_op_stage1  -- single
              );

  -- mul #1
  u_nfp_mul_comp_1 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el,  -- single
              nfp_in2 => Lq_1,  -- single
              nfp_out => Product3_out_1  -- single
              );

  -- mul #2
  u_nfp_mul_comp_2 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out_1,  -- single
              nfp_in2 => iq_k_1,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_add_comp : parallel_8_prediction_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Subtract_op_stage1_1,  -- single
              nfp_in2 => Product3_out1,  -- single
              nfp_out => Subtract_out1  -- single
              );

  u_nfp_mul_comp_3 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Ld_1,  -- single
              nfp_in2 => Subtract_out1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_add_comp_1 : parallel_8_prediction_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product1_out1,  -- single
              nfp_in2 => id_k_1,  -- single
              nfp_out => Add_out1  -- single
              );

  u_nfp_mul_comp_4 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iq_k,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => Product5_out1  -- single
              );

  u_nfp_sub_comp_1 : parallel_8_prediction_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => q_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => Product5_out1,  -- single
              nfp_out => Subtract1_op_stage1  -- single
              );

  u_nfp_mul_comp_5 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => id_k,  -- single
              nfp_in2 => Ld_1,  -- single
              nfp_out => Product7_out1  -- single
              );

  u_nfp_add_comp_2 : parallel_8_prediction_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => psiPM_1,  -- single
              nfp_in2 => Product7_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  u_nfp_mul_comp_6 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => omega_el_1,  -- single
              nfp_in2 => Add2_out1,  -- single
              nfp_out => Product6_out1  -- single
              );

  u_nfp_sub_comp_2 : parallel_8_prediction_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Subtract1_op_stage1_1,  -- single
              nfp_in2 => Product6_out1,  -- single
              nfp_out => Subtract1_out1  -- single
              );

  u_nfp_mul_comp_7 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Lq_1,  -- single
              nfp_in2 => Subtract1_out1,  -- single
              nfp_out => Product4_out1  -- single
              );

  u_nfp_add_comp_3 : parallel_8_prediction_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product4_out1,  -- single
              nfp_in2 => iq_k_2,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_nfp_mul_comp_8 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => ix_k,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => Product9_out1  -- single
              );

  u_nfp_sub_comp_3 : parallel_8_prediction_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => x_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => Product9_out1,  -- single
              nfp_out => Subtract2_out1  -- single
              );

  u_nfp_mul_comp_9 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Lx_1,  -- single
              nfp_in2 => Subtract2_out1,  -- single
              nfp_out => Product8_out1  -- single
              );

  u_nfp_add_comp_4 : parallel_8_prediction_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product8_out1,  -- single
              nfp_in2 => ix_k_1,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_nfp_mul_comp_10 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => iy_k,  -- single
              nfp_in2 => Rs_1,  -- single
              nfp_out => Product11_out1  -- single
              );

  u_nfp_sub_comp_4 : parallel_8_prediction_src_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => y_phase_voltage_per_switching_state_1,  -- single
              nfp_in2 => Product11_out1,  -- single
              nfp_out => Subtract3_out1  -- single
              );

  u_nfp_mul_comp_11 : parallel_8_prediction_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => SampleTime_div_Ly_1,  -- single
              nfp_in2 => Subtract3_out1,  -- single
              nfp_out => Product10_out1  -- single
              );

  u_nfp_add_comp_5 : parallel_8_prediction_src_nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product10_out1,  -- single
              nfp_in2 => iy_k_1,  -- single
              nfp_out => Add4_out1  -- single
              );

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch14_reg(0) <= X"00000000";
        delayMatch14_reg(1) <= X"00000000";
        delayMatch14_reg(2) <= X"00000000";
        delayMatch14_reg(3) <= X"00000000";
        delayMatch14_reg(4) <= X"00000000";
        delayMatch14_reg(5) <= X"00000000";
        delayMatch14_reg(6) <= X"00000000";
        delayMatch14_reg(7) <= X"00000000";
        delayMatch14_reg(8) <= X"00000000";
        delayMatch14_reg(9) <= X"00000000";
        delayMatch14_reg(10) <= X"00000000";
        delayMatch14_reg(11) <= X"00000000";
        delayMatch14_reg(12) <= X"00000000";
        delayMatch14_reg(13) <= X"00000000";
        delayMatch14_reg(14) <= X"00000000";
        delayMatch14_reg(15) <= X"00000000";
        delayMatch14_reg(16) <= X"00000000";
        delayMatch14_reg(17) <= X"00000000";
        delayMatch14_reg(18) <= X"00000000";
        delayMatch14_reg(19) <= X"00000000";
        delayMatch14_reg(20) <= X"00000000";
        delayMatch14_reg(21) <= X"00000000";
        delayMatch14_reg(22) <= X"00000000";
        delayMatch14_reg(23) <= X"00000000";
        delayMatch14_reg(24) <= X"00000000";
        delayMatch14_reg(25) <= X"00000000";
        delayMatch14_reg(26) <= X"00000000";
        delayMatch14_reg(27) <= X"00000000";
        delayMatch14_reg(28) <= X"00000000";
        delayMatch14_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= delayMatch14_reg_next(0);
        delayMatch14_reg(1) <= delayMatch14_reg_next(1);
        delayMatch14_reg(2) <= delayMatch14_reg_next(2);
        delayMatch14_reg(3) <= delayMatch14_reg_next(3);
        delayMatch14_reg(4) <= delayMatch14_reg_next(4);
        delayMatch14_reg(5) <= delayMatch14_reg_next(5);
        delayMatch14_reg(6) <= delayMatch14_reg_next(6);
        delayMatch14_reg(7) <= delayMatch14_reg_next(7);
        delayMatch14_reg(8) <= delayMatch14_reg_next(8);
        delayMatch14_reg(9) <= delayMatch14_reg_next(9);
        delayMatch14_reg(10) <= delayMatch14_reg_next(10);
        delayMatch14_reg(11) <= delayMatch14_reg_next(11);
        delayMatch14_reg(12) <= delayMatch14_reg_next(12);
        delayMatch14_reg(13) <= delayMatch14_reg_next(13);
        delayMatch14_reg(14) <= delayMatch14_reg_next(14);
        delayMatch14_reg(15) <= delayMatch14_reg_next(15);
        delayMatch14_reg(16) <= delayMatch14_reg_next(16);
        delayMatch14_reg(17) <= delayMatch14_reg_next(17);
        delayMatch14_reg(18) <= delayMatch14_reg_next(18);
        delayMatch14_reg(19) <= delayMatch14_reg_next(19);
        delayMatch14_reg(20) <= delayMatch14_reg_next(20);
        delayMatch14_reg(21) <= delayMatch14_reg_next(21);
        delayMatch14_reg(22) <= delayMatch14_reg_next(22);
        delayMatch14_reg(23) <= delayMatch14_reg_next(23);
        delayMatch14_reg(24) <= delayMatch14_reg_next(24);
        delayMatch14_reg(25) <= delayMatch14_reg_next(25);
        delayMatch14_reg(26) <= delayMatch14_reg_next(26);
        delayMatch14_reg(27) <= delayMatch14_reg_next(27);
        delayMatch14_reg(28) <= delayMatch14_reg_next(28);
        delayMatch14_reg(29) <= delayMatch14_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  SampleTime_div_Ld_1 <= delayMatch14_reg(29);
  delayMatch14_reg_next(0) <= SampleTime_div_Ld;
  delayMatch14_reg_next(1) <= delayMatch14_reg(0);
  delayMatch14_reg_next(2) <= delayMatch14_reg(1);
  delayMatch14_reg_next(3) <= delayMatch14_reg(2);
  delayMatch14_reg_next(4) <= delayMatch14_reg(3);
  delayMatch14_reg_next(5) <= delayMatch14_reg(4);
  delayMatch14_reg_next(6) <= delayMatch14_reg(5);
  delayMatch14_reg_next(7) <= delayMatch14_reg(6);
  delayMatch14_reg_next(8) <= delayMatch14_reg(7);
  delayMatch14_reg_next(9) <= delayMatch14_reg(8);
  delayMatch14_reg_next(10) <= delayMatch14_reg(9);
  delayMatch14_reg_next(11) <= delayMatch14_reg(10);
  delayMatch14_reg_next(12) <= delayMatch14_reg(11);
  delayMatch14_reg_next(13) <= delayMatch14_reg(12);
  delayMatch14_reg_next(14) <= delayMatch14_reg(13);
  delayMatch14_reg_next(15) <= delayMatch14_reg(14);
  delayMatch14_reg_next(16) <= delayMatch14_reg(15);
  delayMatch14_reg_next(17) <= delayMatch14_reg(16);
  delayMatch14_reg_next(18) <= delayMatch14_reg(17);
  delayMatch14_reg_next(19) <= delayMatch14_reg(18);
  delayMatch14_reg_next(20) <= delayMatch14_reg(19);
  delayMatch14_reg_next(21) <= delayMatch14_reg(20);
  delayMatch14_reg_next(22) <= delayMatch14_reg(21);
  delayMatch14_reg_next(23) <= delayMatch14_reg(22);
  delayMatch14_reg_next(24) <= delayMatch14_reg(23);
  delayMatch14_reg_next(25) <= delayMatch14_reg(24);
  delayMatch14_reg_next(26) <= delayMatch14_reg(25);
  delayMatch14_reg_next(27) <= delayMatch14_reg(26);
  delayMatch14_reg_next(28) <= delayMatch14_reg(27);
  delayMatch14_reg_next(29) <= delayMatch14_reg(28);

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg(0) <= X"00000000";
        delayMatch11_reg(1) <= X"00000000";
        delayMatch11_reg(2) <= X"00000000";
        delayMatch11_reg(3) <= X"00000000";
        delayMatch11_reg(4) <= X"00000000";
        delayMatch11_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
        delayMatch11_reg(2) <= delayMatch11_reg_next(2);
        delayMatch11_reg(3) <= delayMatch11_reg_next(3);
        delayMatch11_reg(4) <= delayMatch11_reg_next(4);
        delayMatch11_reg(5) <= delayMatch11_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  d_phase_voltage_per_switching_state_1 <= delayMatch11_reg(5);
  delayMatch11_reg_next(0) <= d_phase_voltage_per_switching_state;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);
  delayMatch11_reg_next(2) <= delayMatch11_reg(1);
  delayMatch11_reg_next(3) <= delayMatch11_reg(2);
  delayMatch11_reg_next(4) <= delayMatch11_reg(3);
  delayMatch11_reg_next(5) <= delayMatch11_reg(4);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg(0) <= X"00000000";
        reduced_reg(1) <= X"00000000";
        reduced_reg(2) <= X"00000000";
        reduced_reg(3) <= X"00000000";
        reduced_reg(4) <= X"00000000";
        reduced_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg(0) <= reduced_reg_next(0);
        reduced_reg(1) <= reduced_reg_next(1);
        reduced_reg(2) <= reduced_reg_next(2);
        reduced_reg(3) <= reduced_reg_next(3);
        reduced_reg(4) <= reduced_reg_next(4);
        reduced_reg(5) <= reduced_reg_next(5);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Rs_1 <= reduced_reg(5);
  reduced_reg_next(0) <= Rs;
  reduced_reg_next(1) <= reduced_reg(0);
  reduced_reg_next(2) <= reduced_reg(1);
  reduced_reg_next(3) <= reduced_reg(2);
  reduced_reg_next(4) <= reduced_reg(3);
  reduced_reg_next(5) <= reduced_reg(4);

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch13_reg(0) <= X"00000000";
        delayMatch13_reg(1) <= X"00000000";
        delayMatch13_reg(2) <= X"00000000";
        delayMatch13_reg(3) <= X"00000000";
        delayMatch13_reg(4) <= X"00000000";
        delayMatch13_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= delayMatch13_reg_next(0);
        delayMatch13_reg(1) <= delayMatch13_reg_next(1);
        delayMatch13_reg(2) <= delayMatch13_reg_next(2);
        delayMatch13_reg(3) <= delayMatch13_reg_next(3);
        delayMatch13_reg(4) <= delayMatch13_reg_next(4);
        delayMatch13_reg(5) <= delayMatch13_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  Subtract_op_stage1_1 <= delayMatch13_reg(5);
  delayMatch13_reg_next(0) <= Subtract_op_stage1;
  delayMatch13_reg_next(1) <= delayMatch13_reg(0);
  delayMatch13_reg_next(2) <= delayMatch13_reg(1);
  delayMatch13_reg_next(3) <= delayMatch13_reg(2);
  delayMatch13_reg_next(4) <= delayMatch13_reg(3);
  delayMatch13_reg_next(5) <= delayMatch13_reg(4);

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch9_reg(0) <= X"00000000";
        delayMatch9_reg(1) <= X"00000000";
        delayMatch9_reg(2) <= X"00000000";
        delayMatch9_reg(3) <= X"00000000";
        delayMatch9_reg(4) <= X"00000000";
        delayMatch9_reg(5) <= X"00000000";
        delayMatch9_reg(6) <= X"00000000";
        delayMatch9_reg(7) <= X"00000000";
        delayMatch9_reg(8) <= X"00000000";
        delayMatch9_reg(9) <= X"00000000";
        delayMatch9_reg(10) <= X"00000000";
        delayMatch9_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
        delayMatch9_reg(2) <= delayMatch9_reg_next(2);
        delayMatch9_reg(3) <= delayMatch9_reg_next(3);
        delayMatch9_reg(4) <= delayMatch9_reg_next(4);
        delayMatch9_reg(5) <= delayMatch9_reg_next(5);
        delayMatch9_reg(6) <= delayMatch9_reg_next(6);
        delayMatch9_reg(7) <= delayMatch9_reg_next(7);
        delayMatch9_reg(8) <= delayMatch9_reg_next(8);
        delayMatch9_reg(9) <= delayMatch9_reg_next(9);
        delayMatch9_reg(10) <= delayMatch9_reg_next(10);
        delayMatch9_reg(11) <= delayMatch9_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Lq_1 <= delayMatch9_reg(11);
  delayMatch9_reg_next(0) <= Lq;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);
  delayMatch9_reg_next(2) <= delayMatch9_reg(1);
  delayMatch9_reg_next(3) <= delayMatch9_reg(2);
  delayMatch9_reg_next(4) <= delayMatch9_reg(3);
  delayMatch9_reg_next(5) <= delayMatch9_reg(4);
  delayMatch9_reg_next(6) <= delayMatch9_reg(5);
  delayMatch9_reg_next(7) <= delayMatch9_reg(6);
  delayMatch9_reg_next(8) <= delayMatch9_reg(7);
  delayMatch9_reg_next(9) <= delayMatch9_reg(8);
  delayMatch9_reg_next(10) <= delayMatch9_reg(9);
  delayMatch9_reg_next(11) <= delayMatch9_reg(10);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1(0) <= X"00000000";
        reduced_reg_1(1) <= X"00000000";
        reduced_reg_1(2) <= X"00000000";
        reduced_reg_1(3) <= X"00000000";
        reduced_reg_1(4) <= X"00000000";
        reduced_reg_1(5) <= X"00000000";
        reduced_reg_1(6) <= X"00000000";
        reduced_reg_1(7) <= X"00000000";
        reduced_reg_1(8) <= X"00000000";
        reduced_reg_1(9) <= X"00000000";
        reduced_reg_1(10) <= X"00000000";
        reduced_reg_1(11) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= reduced_reg_next_1(0);
        reduced_reg_1(1) <= reduced_reg_next_1(1);
        reduced_reg_1(2) <= reduced_reg_next_1(2);
        reduced_reg_1(3) <= reduced_reg_next_1(3);
        reduced_reg_1(4) <= reduced_reg_next_1(4);
        reduced_reg_1(5) <= reduced_reg_next_1(5);
        reduced_reg_1(6) <= reduced_reg_next_1(6);
        reduced_reg_1(7) <= reduced_reg_next_1(7);
        reduced_reg_1(8) <= reduced_reg_next_1(8);
        reduced_reg_1(9) <= reduced_reg_next_1(9);
        reduced_reg_1(10) <= reduced_reg_next_1(10);
        reduced_reg_1(11) <= reduced_reg_next_1(11);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  iq_k_1 <= reduced_reg_1(11);
  reduced_reg_next_1(0) <= iq_k;
  reduced_reg_next_1(1) <= reduced_reg_1(0);
  reduced_reg_next_1(2) <= reduced_reg_1(1);
  reduced_reg_next_1(3) <= reduced_reg_1(2);
  reduced_reg_next_1(4) <= reduced_reg_1(3);
  reduced_reg_next_1(5) <= reduced_reg_1(4);
  reduced_reg_next_1(6) <= reduced_reg_1(5);
  reduced_reg_next_1(7) <= reduced_reg_1(6);
  reduced_reg_next_1(8) <= reduced_reg_1(7);
  reduced_reg_next_1(9) <= reduced_reg_1(8);
  reduced_reg_next_1(10) <= reduced_reg_1(9);
  reduced_reg_next_1(11) <= reduced_reg_1(10);

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch15_reg(0) <= X"00000000";
        delayMatch15_reg(1) <= X"00000000";
        delayMatch15_reg(2) <= X"00000000";
        delayMatch15_reg(3) <= X"00000000";
        delayMatch15_reg(4) <= X"00000000";
        delayMatch15_reg(5) <= X"00000000";
        delayMatch15_reg(6) <= X"00000000";
        delayMatch15_reg(7) <= X"00000000";
        delayMatch15_reg(8) <= X"00000000";
        delayMatch15_reg(9) <= X"00000000";
        delayMatch15_reg(10) <= X"00000000";
        delayMatch15_reg(11) <= X"00000000";
        delayMatch15_reg(12) <= X"00000000";
        delayMatch15_reg(13) <= X"00000000";
        delayMatch15_reg(14) <= X"00000000";
        delayMatch15_reg(15) <= X"00000000";
        delayMatch15_reg(16) <= X"00000000";
        delayMatch15_reg(17) <= X"00000000";
        delayMatch15_reg(18) <= X"00000000";
        delayMatch15_reg(19) <= X"00000000";
        delayMatch15_reg(20) <= X"00000000";
        delayMatch15_reg(21) <= X"00000000";
        delayMatch15_reg(22) <= X"00000000";
        delayMatch15_reg(23) <= X"00000000";
        delayMatch15_reg(24) <= X"00000000";
        delayMatch15_reg(25) <= X"00000000";
        delayMatch15_reg(26) <= X"00000000";
        delayMatch15_reg(27) <= X"00000000";
        delayMatch15_reg(28) <= X"00000000";
        delayMatch15_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= delayMatch15_reg_next(0);
        delayMatch15_reg(1) <= delayMatch15_reg_next(1);
        delayMatch15_reg(2) <= delayMatch15_reg_next(2);
        delayMatch15_reg(3) <= delayMatch15_reg_next(3);
        delayMatch15_reg(4) <= delayMatch15_reg_next(4);
        delayMatch15_reg(5) <= delayMatch15_reg_next(5);
        delayMatch15_reg(6) <= delayMatch15_reg_next(6);
        delayMatch15_reg(7) <= delayMatch15_reg_next(7);
        delayMatch15_reg(8) <= delayMatch15_reg_next(8);
        delayMatch15_reg(9) <= delayMatch15_reg_next(9);
        delayMatch15_reg(10) <= delayMatch15_reg_next(10);
        delayMatch15_reg(11) <= delayMatch15_reg_next(11);
        delayMatch15_reg(12) <= delayMatch15_reg_next(12);
        delayMatch15_reg(13) <= delayMatch15_reg_next(13);
        delayMatch15_reg(14) <= delayMatch15_reg_next(14);
        delayMatch15_reg(15) <= delayMatch15_reg_next(15);
        delayMatch15_reg(16) <= delayMatch15_reg_next(16);
        delayMatch15_reg(17) <= delayMatch15_reg_next(17);
        delayMatch15_reg(18) <= delayMatch15_reg_next(18);
        delayMatch15_reg(19) <= delayMatch15_reg_next(19);
        delayMatch15_reg(20) <= delayMatch15_reg_next(20);
        delayMatch15_reg(21) <= delayMatch15_reg_next(21);
        delayMatch15_reg(22) <= delayMatch15_reg_next(22);
        delayMatch15_reg(23) <= delayMatch15_reg_next(23);
        delayMatch15_reg(24) <= delayMatch15_reg_next(24);
        delayMatch15_reg(25) <= delayMatch15_reg_next(25);
        delayMatch15_reg(26) <= delayMatch15_reg_next(26);
        delayMatch15_reg(27) <= delayMatch15_reg_next(27);
        delayMatch15_reg(28) <= delayMatch15_reg_next(28);
        delayMatch15_reg(29) <= delayMatch15_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  id_k_1 <= delayMatch15_reg(29);
  delayMatch15_reg_next(0) <= id_k;
  delayMatch15_reg_next(1) <= delayMatch15_reg(0);
  delayMatch15_reg_next(2) <= delayMatch15_reg(1);
  delayMatch15_reg_next(3) <= delayMatch15_reg(2);
  delayMatch15_reg_next(4) <= delayMatch15_reg(3);
  delayMatch15_reg_next(5) <= delayMatch15_reg(4);
  delayMatch15_reg_next(6) <= delayMatch15_reg(5);
  delayMatch15_reg_next(7) <= delayMatch15_reg(6);
  delayMatch15_reg_next(8) <= delayMatch15_reg(7);
  delayMatch15_reg_next(9) <= delayMatch15_reg(8);
  delayMatch15_reg_next(10) <= delayMatch15_reg(9);
  delayMatch15_reg_next(11) <= delayMatch15_reg(10);
  delayMatch15_reg_next(12) <= delayMatch15_reg(11);
  delayMatch15_reg_next(13) <= delayMatch15_reg(12);
  delayMatch15_reg_next(14) <= delayMatch15_reg(13);
  delayMatch15_reg_next(15) <= delayMatch15_reg(14);
  delayMatch15_reg_next(16) <= delayMatch15_reg(15);
  delayMatch15_reg_next(17) <= delayMatch15_reg(16);
  delayMatch15_reg_next(18) <= delayMatch15_reg(17);
  delayMatch15_reg_next(19) <= delayMatch15_reg(18);
  delayMatch15_reg_next(20) <= delayMatch15_reg(19);
  delayMatch15_reg_next(21) <= delayMatch15_reg(20);
  delayMatch15_reg_next(22) <= delayMatch15_reg(21);
  delayMatch15_reg_next(23) <= delayMatch15_reg(22);
  delayMatch15_reg_next(24) <= delayMatch15_reg(23);
  delayMatch15_reg_next(25) <= delayMatch15_reg(24);
  delayMatch15_reg_next(26) <= delayMatch15_reg(25);
  delayMatch15_reg_next(27) <= delayMatch15_reg(26);
  delayMatch15_reg_next(28) <= delayMatch15_reg(27);
  delayMatch15_reg_next(29) <= delayMatch15_reg(28);

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch22_reg(0) <= X"00000000";
        delayMatch22_reg(1) <= X"00000000";
        delayMatch22_reg(2) <= X"00000000";
        delayMatch22_reg(3) <= X"00000000";
        delayMatch22_reg(4) <= X"00000000";
        delayMatch22_reg(5) <= X"00000000";
        delayMatch22_reg(6) <= X"00000000";
        delayMatch22_reg(7) <= X"00000000";
        delayMatch22_reg(8) <= X"00000000";
        delayMatch22_reg(9) <= X"00000000";
        delayMatch22_reg(10) <= X"00000000";
        delayMatch22_reg(11) <= X"00000000";
        delayMatch22_reg(12) <= X"00000000";
        delayMatch22_reg(13) <= X"00000000";
        delayMatch22_reg(14) <= X"00000000";
        delayMatch22_reg(15) <= X"00000000";
        delayMatch22_reg(16) <= X"00000000";
        delayMatch22_reg(17) <= X"00000000";
        delayMatch22_reg(18) <= X"00000000";
        delayMatch22_reg(19) <= X"00000000";
        delayMatch22_reg(20) <= X"00000000";
        delayMatch22_reg(21) <= X"00000000";
        delayMatch22_reg(22) <= X"00000000";
        delayMatch22_reg(23) <= X"00000000";
        delayMatch22_reg(24) <= X"00000000";
        delayMatch22_reg(25) <= X"00000000";
        delayMatch22_reg(26) <= X"00000000";
        delayMatch22_reg(27) <= X"00000000";
        delayMatch22_reg(28) <= X"00000000";
        delayMatch22_reg(29) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch22_reg(0) <= delayMatch22_reg_next(0);
        delayMatch22_reg(1) <= delayMatch22_reg_next(1);
        delayMatch22_reg(2) <= delayMatch22_reg_next(2);
        delayMatch22_reg(3) <= delayMatch22_reg_next(3);
        delayMatch22_reg(4) <= delayMatch22_reg_next(4);
        delayMatch22_reg(5) <= delayMatch22_reg_next(5);
        delayMatch22_reg(6) <= delayMatch22_reg_next(6);
        delayMatch22_reg(7) <= delayMatch22_reg_next(7);
        delayMatch22_reg(8) <= delayMatch22_reg_next(8);
        delayMatch22_reg(9) <= delayMatch22_reg_next(9);
        delayMatch22_reg(10) <= delayMatch22_reg_next(10);
        delayMatch22_reg(11) <= delayMatch22_reg_next(11);
        delayMatch22_reg(12) <= delayMatch22_reg_next(12);
        delayMatch22_reg(13) <= delayMatch22_reg_next(13);
        delayMatch22_reg(14) <= delayMatch22_reg_next(14);
        delayMatch22_reg(15) <= delayMatch22_reg_next(15);
        delayMatch22_reg(16) <= delayMatch22_reg_next(16);
        delayMatch22_reg(17) <= delayMatch22_reg_next(17);
        delayMatch22_reg(18) <= delayMatch22_reg_next(18);
        delayMatch22_reg(19) <= delayMatch22_reg_next(19);
        delayMatch22_reg(20) <= delayMatch22_reg_next(20);
        delayMatch22_reg(21) <= delayMatch22_reg_next(21);
        delayMatch22_reg(22) <= delayMatch22_reg_next(22);
        delayMatch22_reg(23) <= delayMatch22_reg_next(23);
        delayMatch22_reg(24) <= delayMatch22_reg_next(24);
        delayMatch22_reg(25) <= delayMatch22_reg_next(25);
        delayMatch22_reg(26) <= delayMatch22_reg_next(26);
        delayMatch22_reg(27) <= delayMatch22_reg_next(27);
        delayMatch22_reg(28) <= delayMatch22_reg_next(28);
        delayMatch22_reg(29) <= delayMatch22_reg_next(29);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  SampleTime_div_Lq_1 <= delayMatch22_reg(29);
  delayMatch22_reg_next(0) <= SampleTime_div_Lq;
  delayMatch22_reg_next(1) <= delayMatch22_reg(0);
  delayMatch22_reg_next(2) <= delayMatch22_reg(1);
  delayMatch22_reg_next(3) <= delayMatch22_reg(2);
  delayMatch22_reg_next(4) <= delayMatch22_reg(3);
  delayMatch22_reg_next(5) <= delayMatch22_reg(4);
  delayMatch22_reg_next(6) <= delayMatch22_reg(5);
  delayMatch22_reg_next(7) <= delayMatch22_reg(6);
  delayMatch22_reg_next(8) <= delayMatch22_reg(7);
  delayMatch22_reg_next(9) <= delayMatch22_reg(8);
  delayMatch22_reg_next(10) <= delayMatch22_reg(9);
  delayMatch22_reg_next(11) <= delayMatch22_reg(10);
  delayMatch22_reg_next(12) <= delayMatch22_reg(11);
  delayMatch22_reg_next(13) <= delayMatch22_reg(12);
  delayMatch22_reg_next(14) <= delayMatch22_reg(13);
  delayMatch22_reg_next(15) <= delayMatch22_reg(14);
  delayMatch22_reg_next(16) <= delayMatch22_reg(15);
  delayMatch22_reg_next(17) <= delayMatch22_reg(16);
  delayMatch22_reg_next(18) <= delayMatch22_reg(17);
  delayMatch22_reg_next(19) <= delayMatch22_reg(18);
  delayMatch22_reg_next(20) <= delayMatch22_reg(19);
  delayMatch22_reg_next(21) <= delayMatch22_reg(20);
  delayMatch22_reg_next(22) <= delayMatch22_reg(21);
  delayMatch22_reg_next(23) <= delayMatch22_reg(22);
  delayMatch22_reg_next(24) <= delayMatch22_reg(23);
  delayMatch22_reg_next(25) <= delayMatch22_reg(24);
  delayMatch22_reg_next(26) <= delayMatch22_reg(25);
  delayMatch22_reg_next(27) <= delayMatch22_reg(26);
  delayMatch22_reg_next(28) <= delayMatch22_reg(27);
  delayMatch22_reg_next(29) <= delayMatch22_reg(28);

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch17_reg(0) <= X"00000000";
        delayMatch17_reg(1) <= X"00000000";
        delayMatch17_reg(2) <= X"00000000";
        delayMatch17_reg(3) <= X"00000000";
        delayMatch17_reg(4) <= X"00000000";
        delayMatch17_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= delayMatch17_reg_next(0);
        delayMatch17_reg(1) <= delayMatch17_reg_next(1);
        delayMatch17_reg(2) <= delayMatch17_reg_next(2);
        delayMatch17_reg(3) <= delayMatch17_reg_next(3);
        delayMatch17_reg(4) <= delayMatch17_reg_next(4);
        delayMatch17_reg(5) <= delayMatch17_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  q_phase_voltage_per_switching_state_1 <= delayMatch17_reg(5);
  delayMatch17_reg_next(0) <= q_phase_voltage_per_switching_state;
  delayMatch17_reg_next(1) <= delayMatch17_reg(0);
  delayMatch17_reg_next(2) <= delayMatch17_reg(1);
  delayMatch17_reg_next(3) <= delayMatch17_reg(2);
  delayMatch17_reg_next(4) <= delayMatch17_reg(3);
  delayMatch17_reg_next(5) <= delayMatch17_reg(4);

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch21_reg(0) <= X"00000000";
        delayMatch21_reg(1) <= X"00000000";
        delayMatch21_reg(2) <= X"00000000";
        delayMatch21_reg(3) <= X"00000000";
        delayMatch21_reg(4) <= X"00000000";
        delayMatch21_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch21_reg(0) <= delayMatch21_reg_next(0);
        delayMatch21_reg(1) <= delayMatch21_reg_next(1);
        delayMatch21_reg(2) <= delayMatch21_reg_next(2);
        delayMatch21_reg(3) <= delayMatch21_reg_next(3);
        delayMatch21_reg(4) <= delayMatch21_reg_next(4);
        delayMatch21_reg(5) <= delayMatch21_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Subtract1_op_stage1_1 <= delayMatch21_reg(5);
  delayMatch21_reg_next(0) <= Subtract1_op_stage1;
  delayMatch21_reg_next(1) <= delayMatch21_reg(0);
  delayMatch21_reg_next(2) <= delayMatch21_reg(1);
  delayMatch21_reg_next(3) <= delayMatch21_reg(2);
  delayMatch21_reg_next(4) <= delayMatch21_reg(3);
  delayMatch21_reg_next(5) <= delayMatch21_reg(4);

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch20_reg(0) <= X"00000000";
        delayMatch20_reg(1) <= X"00000000";
        delayMatch20_reg(2) <= X"00000000";
        delayMatch20_reg(3) <= X"00000000";
        delayMatch20_reg(4) <= X"00000000";
        delayMatch20_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch20_reg(0) <= delayMatch20_reg_next(0);
        delayMatch20_reg(1) <= delayMatch20_reg_next(1);
        delayMatch20_reg(2) <= delayMatch20_reg_next(2);
        delayMatch20_reg(3) <= delayMatch20_reg_next(3);
        delayMatch20_reg(4) <= delayMatch20_reg_next(4);
        delayMatch20_reg(5) <= delayMatch20_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  omega_el_1 <= delayMatch20_reg(5);
  delayMatch20_reg_next(0) <= omega_el;
  delayMatch20_reg_next(1) <= delayMatch20_reg(0);
  delayMatch20_reg_next(2) <= delayMatch20_reg(1);
  delayMatch20_reg_next(3) <= delayMatch20_reg(2);
  delayMatch20_reg_next(4) <= delayMatch20_reg(3);
  delayMatch20_reg_next(5) <= delayMatch20_reg(4);

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch19_reg(0) <= X"00000000";
        delayMatch19_reg(1) <= X"00000000";
        delayMatch19_reg(2) <= X"00000000";
        delayMatch19_reg(3) <= X"00000000";
        delayMatch19_reg(4) <= X"00000000";
        delayMatch19_reg(5) <= X"00000000";
        delayMatch19_reg(6) <= X"00000000";
        delayMatch19_reg(7) <= X"00000000";
        delayMatch19_reg(8) <= X"00000000";
        delayMatch19_reg(9) <= X"00000000";
        delayMatch19_reg(10) <= X"00000000";
        delayMatch19_reg(11) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch19_reg(0) <= delayMatch19_reg_next(0);
        delayMatch19_reg(1) <= delayMatch19_reg_next(1);
        delayMatch19_reg(2) <= delayMatch19_reg_next(2);
        delayMatch19_reg(3) <= delayMatch19_reg_next(3);
        delayMatch19_reg(4) <= delayMatch19_reg_next(4);
        delayMatch19_reg(5) <= delayMatch19_reg_next(5);
        delayMatch19_reg(6) <= delayMatch19_reg_next(6);
        delayMatch19_reg(7) <= delayMatch19_reg_next(7);
        delayMatch19_reg(8) <= delayMatch19_reg_next(8);
        delayMatch19_reg(9) <= delayMatch19_reg_next(9);
        delayMatch19_reg(10) <= delayMatch19_reg_next(10);
        delayMatch19_reg(11) <= delayMatch19_reg_next(11);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  psiPM_1 <= delayMatch19_reg(11);
  delayMatch19_reg_next(0) <= psiPM;
  delayMatch19_reg_next(1) <= delayMatch19_reg(0);
  delayMatch19_reg_next(2) <= delayMatch19_reg(1);
  delayMatch19_reg_next(3) <= delayMatch19_reg(2);
  delayMatch19_reg_next(4) <= delayMatch19_reg(3);
  delayMatch19_reg_next(5) <= delayMatch19_reg(4);
  delayMatch19_reg_next(6) <= delayMatch19_reg(5);
  delayMatch19_reg_next(7) <= delayMatch19_reg(6);
  delayMatch19_reg_next(8) <= delayMatch19_reg(7);
  delayMatch19_reg_next(9) <= delayMatch19_reg(8);
  delayMatch19_reg_next(10) <= delayMatch19_reg(9);
  delayMatch19_reg_next(11) <= delayMatch19_reg(10);

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch18_reg(0) <= X"00000000";
        delayMatch18_reg(1) <= X"00000000";
        delayMatch18_reg(2) <= X"00000000";
        delayMatch18_reg(3) <= X"00000000";
        delayMatch18_reg(4) <= X"00000000";
        delayMatch18_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch18_reg(0) <= delayMatch18_reg_next(0);
        delayMatch18_reg(1) <= delayMatch18_reg_next(1);
        delayMatch18_reg(2) <= delayMatch18_reg_next(2);
        delayMatch18_reg(3) <= delayMatch18_reg_next(3);
        delayMatch18_reg(4) <= delayMatch18_reg_next(4);
        delayMatch18_reg(5) <= delayMatch18_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  Ld_1 <= delayMatch18_reg(5);
  delayMatch18_reg_next(0) <= Ld;
  delayMatch18_reg_next(1) <= delayMatch18_reg(0);
  delayMatch18_reg_next(2) <= delayMatch18_reg(1);
  delayMatch18_reg_next(3) <= delayMatch18_reg(2);
  delayMatch18_reg_next(4) <= delayMatch18_reg(3);
  delayMatch18_reg_next(5) <= delayMatch18_reg(4);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_2(0) <= X"00000000";
        reduced_reg_2(1) <= X"00000000";
        reduced_reg_2(2) <= X"00000000";
        reduced_reg_2(3) <= X"00000000";
        reduced_reg_2(4) <= X"00000000";
        reduced_reg_2(5) <= X"00000000";
        reduced_reg_2(6) <= X"00000000";
        reduced_reg_2(7) <= X"00000000";
        reduced_reg_2(8) <= X"00000000";
        reduced_reg_2(9) <= X"00000000";
        reduced_reg_2(10) <= X"00000000";
        reduced_reg_2(11) <= X"00000000";
        reduced_reg_2(12) <= X"00000000";
        reduced_reg_2(13) <= X"00000000";
        reduced_reg_2(14) <= X"00000000";
        reduced_reg_2(15) <= X"00000000";
        reduced_reg_2(16) <= X"00000000";
        reduced_reg_2(17) <= X"00000000";
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= reduced_reg_next_2(0);
        reduced_reg_2(1) <= reduced_reg_next_2(1);
        reduced_reg_2(2) <= reduced_reg_next_2(2);
        reduced_reg_2(3) <= reduced_reg_next_2(3);
        reduced_reg_2(4) <= reduced_reg_next_2(4);
        reduced_reg_2(5) <= reduced_reg_next_2(5);
        reduced_reg_2(6) <= reduced_reg_next_2(6);
        reduced_reg_2(7) <= reduced_reg_next_2(7);
        reduced_reg_2(8) <= reduced_reg_next_2(8);
        reduced_reg_2(9) <= reduced_reg_next_2(9);
        reduced_reg_2(10) <= reduced_reg_next_2(10);
        reduced_reg_2(11) <= reduced_reg_next_2(11);
        reduced_reg_2(12) <= reduced_reg_next_2(12);
        reduced_reg_2(13) <= reduced_reg_next_2(13);
        reduced_reg_2(14) <= reduced_reg_next_2(14);
        reduced_reg_2(15) <= reduced_reg_next_2(15);
        reduced_reg_2(16) <= reduced_reg_next_2(16);
        reduced_reg_2(17) <= reduced_reg_next_2(17);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  iq_k_2 <= reduced_reg_2(17);
  reduced_reg_next_2(0) <= iq_k_1;
  reduced_reg_next_2(1) <= reduced_reg_2(0);
  reduced_reg_next_2(2) <= reduced_reg_2(1);
  reduced_reg_next_2(3) <= reduced_reg_2(2);
  reduced_reg_next_2(4) <= reduced_reg_2(3);
  reduced_reg_next_2(5) <= reduced_reg_2(4);
  reduced_reg_next_2(6) <= reduced_reg_2(5);
  reduced_reg_next_2(7) <= reduced_reg_2(6);
  reduced_reg_next_2(8) <= reduced_reg_2(7);
  reduced_reg_next_2(9) <= reduced_reg_2(8);
  reduced_reg_next_2(10) <= reduced_reg_2(9);
  reduced_reg_next_2(11) <= reduced_reg_2(10);
  reduced_reg_next_2(12) <= reduced_reg_2(11);
  reduced_reg_next_2(13) <= reduced_reg_2(12);
  reduced_reg_next_2(14) <= reduced_reg_2(13);
  reduced_reg_next_2(15) <= reduced_reg_2(14);
  reduced_reg_next_2(16) <= reduced_reg_2(15);
  reduced_reg_next_2(17) <= reduced_reg_2(16);

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch26_reg(0) <= X"00000000";
        delayMatch26_reg(1) <= X"00000000";
        delayMatch26_reg(2) <= X"00000000";
        delayMatch26_reg(3) <= X"00000000";
        delayMatch26_reg(4) <= X"00000000";
        delayMatch26_reg(5) <= X"00000000";
        delayMatch26_reg(6) <= X"00000000";
        delayMatch26_reg(7) <= X"00000000";
        delayMatch26_reg(8) <= X"00000000";
        delayMatch26_reg(9) <= X"00000000";
        delayMatch26_reg(10) <= X"00000000";
        delayMatch26_reg(11) <= X"00000000";
        delayMatch26_reg(12) <= X"00000000";
        delayMatch26_reg(13) <= X"00000000";
        delayMatch26_reg(14) <= X"00000000";
        delayMatch26_reg(15) <= X"00000000";
        delayMatch26_reg(16) <= X"00000000";
        delayMatch26_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch26_reg(0) <= delayMatch26_reg_next(0);
        delayMatch26_reg(1) <= delayMatch26_reg_next(1);
        delayMatch26_reg(2) <= delayMatch26_reg_next(2);
        delayMatch26_reg(3) <= delayMatch26_reg_next(3);
        delayMatch26_reg(4) <= delayMatch26_reg_next(4);
        delayMatch26_reg(5) <= delayMatch26_reg_next(5);
        delayMatch26_reg(6) <= delayMatch26_reg_next(6);
        delayMatch26_reg(7) <= delayMatch26_reg_next(7);
        delayMatch26_reg(8) <= delayMatch26_reg_next(8);
        delayMatch26_reg(9) <= delayMatch26_reg_next(9);
        delayMatch26_reg(10) <= delayMatch26_reg_next(10);
        delayMatch26_reg(11) <= delayMatch26_reg_next(11);
        delayMatch26_reg(12) <= delayMatch26_reg_next(12);
        delayMatch26_reg(13) <= delayMatch26_reg_next(13);
        delayMatch26_reg(14) <= delayMatch26_reg_next(14);
        delayMatch26_reg(15) <= delayMatch26_reg_next(15);
        delayMatch26_reg(16) <= delayMatch26_reg_next(16);
        delayMatch26_reg(17) <= delayMatch26_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  SampleTime_div_Lx_1 <= delayMatch26_reg(17);
  delayMatch26_reg_next(0) <= SampleTime_div_Lx;
  delayMatch26_reg_next(1) <= delayMatch26_reg(0);
  delayMatch26_reg_next(2) <= delayMatch26_reg(1);
  delayMatch26_reg_next(3) <= delayMatch26_reg(2);
  delayMatch26_reg_next(4) <= delayMatch26_reg(3);
  delayMatch26_reg_next(5) <= delayMatch26_reg(4);
  delayMatch26_reg_next(6) <= delayMatch26_reg(5);
  delayMatch26_reg_next(7) <= delayMatch26_reg(6);
  delayMatch26_reg_next(8) <= delayMatch26_reg(7);
  delayMatch26_reg_next(9) <= delayMatch26_reg(8);
  delayMatch26_reg_next(10) <= delayMatch26_reg(9);
  delayMatch26_reg_next(11) <= delayMatch26_reg(10);
  delayMatch26_reg_next(12) <= delayMatch26_reg(11);
  delayMatch26_reg_next(13) <= delayMatch26_reg(12);
  delayMatch26_reg_next(14) <= delayMatch26_reg(13);
  delayMatch26_reg_next(15) <= delayMatch26_reg(14);
  delayMatch26_reg_next(16) <= delayMatch26_reg(15);
  delayMatch26_reg_next(17) <= delayMatch26_reg(16);

  delayMatch25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch25_reg(0) <= X"00000000";
        delayMatch25_reg(1) <= X"00000000";
        delayMatch25_reg(2) <= X"00000000";
        delayMatch25_reg(3) <= X"00000000";
        delayMatch25_reg(4) <= X"00000000";
        delayMatch25_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch25_reg(0) <= delayMatch25_reg_next(0);
        delayMatch25_reg(1) <= delayMatch25_reg_next(1);
        delayMatch25_reg(2) <= delayMatch25_reg_next(2);
        delayMatch25_reg(3) <= delayMatch25_reg_next(3);
        delayMatch25_reg(4) <= delayMatch25_reg_next(4);
        delayMatch25_reg(5) <= delayMatch25_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch25_process;

  x_phase_voltage_per_switching_state_1 <= delayMatch25_reg(5);
  delayMatch25_reg_next(0) <= x_phase_voltage_per_switching_state;
  delayMatch25_reg_next(1) <= delayMatch25_reg(0);
  delayMatch25_reg_next(2) <= delayMatch25_reg(1);
  delayMatch25_reg_next(3) <= delayMatch25_reg(2);
  delayMatch25_reg_next(4) <= delayMatch25_reg(3);
  delayMatch25_reg_next(5) <= delayMatch25_reg(4);

  delayMatch27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch27_reg(0) <= X"00000000";
        delayMatch27_reg(1) <= X"00000000";
        delayMatch27_reg(2) <= X"00000000";
        delayMatch27_reg(3) <= X"00000000";
        delayMatch27_reg(4) <= X"00000000";
        delayMatch27_reg(5) <= X"00000000";
        delayMatch27_reg(6) <= X"00000000";
        delayMatch27_reg(7) <= X"00000000";
        delayMatch27_reg(8) <= X"00000000";
        delayMatch27_reg(9) <= X"00000000";
        delayMatch27_reg(10) <= X"00000000";
        delayMatch27_reg(11) <= X"00000000";
        delayMatch27_reg(12) <= X"00000000";
        delayMatch27_reg(13) <= X"00000000";
        delayMatch27_reg(14) <= X"00000000";
        delayMatch27_reg(15) <= X"00000000";
        delayMatch27_reg(16) <= X"00000000";
        delayMatch27_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch27_reg(0) <= delayMatch27_reg_next(0);
        delayMatch27_reg(1) <= delayMatch27_reg_next(1);
        delayMatch27_reg(2) <= delayMatch27_reg_next(2);
        delayMatch27_reg(3) <= delayMatch27_reg_next(3);
        delayMatch27_reg(4) <= delayMatch27_reg_next(4);
        delayMatch27_reg(5) <= delayMatch27_reg_next(5);
        delayMatch27_reg(6) <= delayMatch27_reg_next(6);
        delayMatch27_reg(7) <= delayMatch27_reg_next(7);
        delayMatch27_reg(8) <= delayMatch27_reg_next(8);
        delayMatch27_reg(9) <= delayMatch27_reg_next(9);
        delayMatch27_reg(10) <= delayMatch27_reg_next(10);
        delayMatch27_reg(11) <= delayMatch27_reg_next(11);
        delayMatch27_reg(12) <= delayMatch27_reg_next(12);
        delayMatch27_reg(13) <= delayMatch27_reg_next(13);
        delayMatch27_reg(14) <= delayMatch27_reg_next(14);
        delayMatch27_reg(15) <= delayMatch27_reg_next(15);
        delayMatch27_reg(16) <= delayMatch27_reg_next(16);
        delayMatch27_reg(17) <= delayMatch27_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch27_process;

  ix_k_1 <= delayMatch27_reg(17);
  delayMatch27_reg_next(0) <= ix_k;
  delayMatch27_reg_next(1) <= delayMatch27_reg(0);
  delayMatch27_reg_next(2) <= delayMatch27_reg(1);
  delayMatch27_reg_next(3) <= delayMatch27_reg(2);
  delayMatch27_reg_next(4) <= delayMatch27_reg(3);
  delayMatch27_reg_next(5) <= delayMatch27_reg(4);
  delayMatch27_reg_next(6) <= delayMatch27_reg(5);
  delayMatch27_reg_next(7) <= delayMatch27_reg(6);
  delayMatch27_reg_next(8) <= delayMatch27_reg(7);
  delayMatch27_reg_next(9) <= delayMatch27_reg(8);
  delayMatch27_reg_next(10) <= delayMatch27_reg(9);
  delayMatch27_reg_next(11) <= delayMatch27_reg(10);
  delayMatch27_reg_next(12) <= delayMatch27_reg(11);
  delayMatch27_reg_next(13) <= delayMatch27_reg(12);
  delayMatch27_reg_next(14) <= delayMatch27_reg(13);
  delayMatch27_reg_next(15) <= delayMatch27_reg(14);
  delayMatch27_reg_next(16) <= delayMatch27_reg(15);
  delayMatch27_reg_next(17) <= delayMatch27_reg(16);

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch30_reg(0) <= X"00000000";
        delayMatch30_reg(1) <= X"00000000";
        delayMatch30_reg(2) <= X"00000000";
        delayMatch30_reg(3) <= X"00000000";
        delayMatch30_reg(4) <= X"00000000";
        delayMatch30_reg(5) <= X"00000000";
        delayMatch30_reg(6) <= X"00000000";
        delayMatch30_reg(7) <= X"00000000";
        delayMatch30_reg(8) <= X"00000000";
        delayMatch30_reg(9) <= X"00000000";
        delayMatch30_reg(10) <= X"00000000";
        delayMatch30_reg(11) <= X"00000000";
        delayMatch30_reg(12) <= X"00000000";
        delayMatch30_reg(13) <= X"00000000";
        delayMatch30_reg(14) <= X"00000000";
        delayMatch30_reg(15) <= X"00000000";
        delayMatch30_reg(16) <= X"00000000";
        delayMatch30_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch30_reg(0) <= delayMatch30_reg_next(0);
        delayMatch30_reg(1) <= delayMatch30_reg_next(1);
        delayMatch30_reg(2) <= delayMatch30_reg_next(2);
        delayMatch30_reg(3) <= delayMatch30_reg_next(3);
        delayMatch30_reg(4) <= delayMatch30_reg_next(4);
        delayMatch30_reg(5) <= delayMatch30_reg_next(5);
        delayMatch30_reg(6) <= delayMatch30_reg_next(6);
        delayMatch30_reg(7) <= delayMatch30_reg_next(7);
        delayMatch30_reg(8) <= delayMatch30_reg_next(8);
        delayMatch30_reg(9) <= delayMatch30_reg_next(9);
        delayMatch30_reg(10) <= delayMatch30_reg_next(10);
        delayMatch30_reg(11) <= delayMatch30_reg_next(11);
        delayMatch30_reg(12) <= delayMatch30_reg_next(12);
        delayMatch30_reg(13) <= delayMatch30_reg_next(13);
        delayMatch30_reg(14) <= delayMatch30_reg_next(14);
        delayMatch30_reg(15) <= delayMatch30_reg_next(15);
        delayMatch30_reg(16) <= delayMatch30_reg_next(16);
        delayMatch30_reg(17) <= delayMatch30_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch30_process;

  SampleTime_div_Ly_1 <= delayMatch30_reg(17);
  delayMatch30_reg_next(0) <= SampleTime_div_Ly;
  delayMatch30_reg_next(1) <= delayMatch30_reg(0);
  delayMatch30_reg_next(2) <= delayMatch30_reg(1);
  delayMatch30_reg_next(3) <= delayMatch30_reg(2);
  delayMatch30_reg_next(4) <= delayMatch30_reg(3);
  delayMatch30_reg_next(5) <= delayMatch30_reg(4);
  delayMatch30_reg_next(6) <= delayMatch30_reg(5);
  delayMatch30_reg_next(7) <= delayMatch30_reg(6);
  delayMatch30_reg_next(8) <= delayMatch30_reg(7);
  delayMatch30_reg_next(9) <= delayMatch30_reg(8);
  delayMatch30_reg_next(10) <= delayMatch30_reg(9);
  delayMatch30_reg_next(11) <= delayMatch30_reg(10);
  delayMatch30_reg_next(12) <= delayMatch30_reg(11);
  delayMatch30_reg_next(13) <= delayMatch30_reg(12);
  delayMatch30_reg_next(14) <= delayMatch30_reg(13);
  delayMatch30_reg_next(15) <= delayMatch30_reg(14);
  delayMatch30_reg_next(16) <= delayMatch30_reg(15);
  delayMatch30_reg_next(17) <= delayMatch30_reg(16);

  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch29_reg(0) <= X"00000000";
        delayMatch29_reg(1) <= X"00000000";
        delayMatch29_reg(2) <= X"00000000";
        delayMatch29_reg(3) <= X"00000000";
        delayMatch29_reg(4) <= X"00000000";
        delayMatch29_reg(5) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch29_reg(0) <= delayMatch29_reg_next(0);
        delayMatch29_reg(1) <= delayMatch29_reg_next(1);
        delayMatch29_reg(2) <= delayMatch29_reg_next(2);
        delayMatch29_reg(3) <= delayMatch29_reg_next(3);
        delayMatch29_reg(4) <= delayMatch29_reg_next(4);
        delayMatch29_reg(5) <= delayMatch29_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch29_process;

  y_phase_voltage_per_switching_state_1 <= delayMatch29_reg(5);
  delayMatch29_reg_next(0) <= y_phase_voltage_per_switching_state;
  delayMatch29_reg_next(1) <= delayMatch29_reg(0);
  delayMatch29_reg_next(2) <= delayMatch29_reg(1);
  delayMatch29_reg_next(3) <= delayMatch29_reg(2);
  delayMatch29_reg_next(4) <= delayMatch29_reg(3);
  delayMatch29_reg_next(5) <= delayMatch29_reg(4);

  delayMatch31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch31_reg(0) <= X"00000000";
        delayMatch31_reg(1) <= X"00000000";
        delayMatch31_reg(2) <= X"00000000";
        delayMatch31_reg(3) <= X"00000000";
        delayMatch31_reg(4) <= X"00000000";
        delayMatch31_reg(5) <= X"00000000";
        delayMatch31_reg(6) <= X"00000000";
        delayMatch31_reg(7) <= X"00000000";
        delayMatch31_reg(8) <= X"00000000";
        delayMatch31_reg(9) <= X"00000000";
        delayMatch31_reg(10) <= X"00000000";
        delayMatch31_reg(11) <= X"00000000";
        delayMatch31_reg(12) <= X"00000000";
        delayMatch31_reg(13) <= X"00000000";
        delayMatch31_reg(14) <= X"00000000";
        delayMatch31_reg(15) <= X"00000000";
        delayMatch31_reg(16) <= X"00000000";
        delayMatch31_reg(17) <= X"00000000";
      ELSIF enb = '1' THEN
        delayMatch31_reg(0) <= delayMatch31_reg_next(0);
        delayMatch31_reg(1) <= delayMatch31_reg_next(1);
        delayMatch31_reg(2) <= delayMatch31_reg_next(2);
        delayMatch31_reg(3) <= delayMatch31_reg_next(3);
        delayMatch31_reg(4) <= delayMatch31_reg_next(4);
        delayMatch31_reg(5) <= delayMatch31_reg_next(5);
        delayMatch31_reg(6) <= delayMatch31_reg_next(6);
        delayMatch31_reg(7) <= delayMatch31_reg_next(7);
        delayMatch31_reg(8) <= delayMatch31_reg_next(8);
        delayMatch31_reg(9) <= delayMatch31_reg_next(9);
        delayMatch31_reg(10) <= delayMatch31_reg_next(10);
        delayMatch31_reg(11) <= delayMatch31_reg_next(11);
        delayMatch31_reg(12) <= delayMatch31_reg_next(12);
        delayMatch31_reg(13) <= delayMatch31_reg_next(13);
        delayMatch31_reg(14) <= delayMatch31_reg_next(14);
        delayMatch31_reg(15) <= delayMatch31_reg_next(15);
        delayMatch31_reg(16) <= delayMatch31_reg_next(16);
        delayMatch31_reg(17) <= delayMatch31_reg_next(17);
      END IF;
    END IF;
  END PROCESS delayMatch31_process;

  iy_k_1 <= delayMatch31_reg(17);
  delayMatch31_reg_next(0) <= iy_k;
  delayMatch31_reg_next(1) <= delayMatch31_reg(0);
  delayMatch31_reg_next(2) <= delayMatch31_reg(1);
  delayMatch31_reg_next(3) <= delayMatch31_reg(2);
  delayMatch31_reg_next(4) <= delayMatch31_reg(3);
  delayMatch31_reg_next(5) <= delayMatch31_reg(4);
  delayMatch31_reg_next(6) <= delayMatch31_reg(5);
  delayMatch31_reg_next(7) <= delayMatch31_reg(6);
  delayMatch31_reg_next(8) <= delayMatch31_reg(7);
  delayMatch31_reg_next(9) <= delayMatch31_reg(8);
  delayMatch31_reg_next(10) <= delayMatch31_reg(9);
  delayMatch31_reg_next(11) <= delayMatch31_reg(10);
  delayMatch31_reg_next(12) <= delayMatch31_reg(11);
  delayMatch31_reg_next(13) <= delayMatch31_reg(12);
  delayMatch31_reg_next(14) <= delayMatch31_reg(13);
  delayMatch31_reg_next(15) <= delayMatch31_reg(14);
  delayMatch31_reg_next(16) <= delayMatch31_reg(15);
  delayMatch31_reg_next(17) <= delayMatch31_reg(16);

  id_6 <= Add_out1;

  iq_6 <= Add1_out1;

  ix_6 <= Add3_out1;

  iy_6 <= Add4_out1;

END rtl;

