-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\inc_enc_v26\Incremental_Encoder_v26_addr_decoder.vhd
-- Created: 2023-04-17 11:31:03
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Encoder_v26_addr_decoder
-- Source Path: Incremental_Encoder_v26/Incremental_Encoder_v26_axi_lite/Incremental_Encoder_v26_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Encoder_v26_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_omega_AXI4                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_theta_el_AXI4                :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
        read_position_AXI4                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        read_direction_AXI4               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        read_countPerPeriod_AXI4          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        read_omega_MA_N4_AXI              :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        read_position_wOffset_AXI4        :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        read_Index_found_AXI4             :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_Position_offset_AXI4        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_Timer_FPGA_ms_AXI4          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En32
        write_PI2_Inc_AXI4                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24_En24
        write_IncPerTurn_mech_AXI4        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_theta_el_offset_AXI4        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_IncPerTurn_elek_AXI4        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_d_axis_Hit_Compare_AXI      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_OmegaPerOverSampl_AXI4      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En11
        write_timeout_value_AXI4          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_CW_CCW_Switch_AXI4          :   OUT   std_logic  -- ufix1
        );
END Incremental_Encoder_v26_addr_decoder;


ARCHITECTURE rtl OF Incremental_Encoder_v26_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_Index_found_AXI4_1_1  : std_logic;  -- ufix1
  SIGNAL decode_sel_CW_CCW_Switch_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_countPerPeriod_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_timeout_value_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_direction_AXI4_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_OmegaPerOverSampl_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_omega_AXI4_1_1        : std_logic;  -- ufix1
  SIGNAL decode_sel_d_axis_Hit_Compare_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_IncPerTurn_elek_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_theta_el_offset_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_IncPerTurn_mech_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_PI2_Inc_AXI4_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_Timer_FPGA_ms_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_Position_offset_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL data_slice_axi_enable_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_enable_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_Position_offset_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_Position_offset_AXI4     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_reg_Position_offset_AXI4_1_1 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_slice_Position_offset_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Position_offset_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_Timer_FPGA_ms_AXI4_1_1   : std_logic;  -- ufix1
  SIGNAL data_in_Timer_FPGA_ms_AXI4       : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL data_reg_Timer_FPGA_ms_AXI4_1_1  : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL data_slice_Timer_FPGA_ms_AXI4_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Timer_FPGA_ms_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_PI2_Inc_AXI4_1_1         : std_logic;  -- ufix1
  SIGNAL data_in_PI2_Inc_AXI4             : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL data_reg_PI2_Inc_AXI4_1_1        : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL data_slice_PI2_Inc_AXI4_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_PI2_Inc_AXI4_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_IncPerTurn_mech_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_IncPerTurn_mech_AXI4     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_reg_IncPerTurn_mech_AXI4_1_1 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_slice_IncPerTurn_mech_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_IncPerTurn_mech_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_theta_el_offset_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_theta_el_offset_AXI4     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_reg_theta_el_offset_AXI4_1_1 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_slice_theta_el_offset_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_theta_el_offset_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_IncPerTurn_elek_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_IncPerTurn_elek_AXI4     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_reg_IncPerTurn_elek_AXI4_1_1 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_slice_IncPerTurn_elek_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_IncPerTurn_elek_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_d_axis_Hit_Compare_AXI_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_d_axis_Hit_Compare_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_omega_AXI4_signed           : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_theta_el_AXI4_signed        : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL read_position_AXI4_unsigned      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_position_AXI4_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_theta_el_AXI4_1_1     : std_logic;  -- ufix1
  SIGNAL decode_rd_d_axis_Hit_Compare_AXI_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_omega_AXI4              : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_omega_AXI4_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_omega_AXI4_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_theta_el_AXI4           : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL data_slice_theta_el_AXI4_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_theta_el_AXI4_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_position_AXI4           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_slice_position_AXI4_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_position_AXI4_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_OmegaPerOverSampl_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_OmegaPerOverSampl_AXI4   : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_reg_OmegaPerOverSampl_AXI4_1_1 : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_OmegaPerOverSampl_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_direction_AXI4_signed       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL decode_rd_OmegaPerOverSampl_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_direction_AXI4          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL data_slice_direction_AXI4_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_direction_AXI4_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_timeout_value_AXI4_1_1   : std_logic;  -- ufix1
  SIGNAL data_reg_timeout_value_AXI4_1_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_countPerPeriod_AXI4_signed  : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL read_omega_MA_N4_AXI_signed      : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL read_position_wOffset_AXI4_unsigned : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL decode_sel_position_wOffset_AXI4_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_omega_MA_N4_AXI_1_1   : std_logic;  -- ufix1
  SIGNAL decode_rd_timeout_value_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_countPerPeriod_AXI4     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_slice_countPerPeriod_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_countPerPeriod_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_omega_MA_N4_AXI         : signed(23 DOWNTO 0);  -- sfix24_En11
  SIGNAL data_slice_omega_MA_N4_AXI_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_omega_MA_N4_AXI_1_1    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_position_wOffset_AXI4   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_slice_position_wOffset_AXI4_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_position_wOffset_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_CW_CCW_Switch_AXI4_1_1   : std_logic;  -- ufix1
  SIGNAL data_in_CW_CCW_Switch_AXI4       : std_logic;  -- ufix1
  SIGNAL data_reg_CW_CCW_Switch_AXI4_1_1  : std_logic;  -- ufix1
  SIGNAL data_slice_CW_CCW_Switch_AXI4_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_CW_CCW_Switch_AXI4_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Index_found_AXI4        : std_logic;  -- ufix1
  SIGNAL data_slice_Index_found_AXI4_1    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Index_found_AXI4_1_1   : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_Index_found_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  
  decode_sel_CW_CCW_Switch_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  
  decode_sel_countPerPeriod_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  
  decode_sel_timeout_value_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  
  decode_sel_direction_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  
  decode_sel_OmegaPerOverSampl_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  
  decode_sel_omega_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_d_axis_Hit_Compare_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_IncPerTurn_elek_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_theta_el_offset_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_IncPerTurn_mech_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_PI2_Inc_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_Timer_FPGA_ms_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_Position_offset_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  data_slice_axi_enable_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_axi_enable_1_1;

  
  decode_rd_axi_enable_1_1 <= const_0 WHEN decode_sel_axi_enable_1_1 = '0' ELSE
      data_slice_axi_enable_1;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= decode_rd_axi_enable_1_1 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_enb_Position_offset_AXI4_1_1 <= decode_sel_Position_offset_AXI4_1_1 AND wr_enb;

  data_in_Position_offset_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_Position_offset_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_Position_offset_AXI4_1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_Position_offset_AXI4_1_1 = '1' THEN
        data_reg_Position_offset_AXI4_1_1 <= data_in_Position_offset_AXI4;
      END IF;
    END IF;
  END PROCESS reg_Position_offset_AXI4_1_1_process;


  data_slice_Position_offset_AXI4_1 <= resize(data_reg_Position_offset_AXI4_1_1, 32);

  
  decode_rd_Position_offset_AXI4_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_Position_offset_AXI4_1_1 = '0' ELSE
      data_slice_Position_offset_AXI4_1;

  reg_enb_Timer_FPGA_ms_AXI4_1_1 <= decode_sel_Timer_FPGA_ms_AXI4_1_1 AND wr_enb;

  data_in_Timer_FPGA_ms_AXI4 <= data_write_unsigned;

  reg_Timer_FPGA_ms_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_Timer_FPGA_ms_AXI4_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_Timer_FPGA_ms_AXI4_1_1 = '1' THEN
        data_reg_Timer_FPGA_ms_AXI4_1_1 <= data_in_Timer_FPGA_ms_AXI4;
      END IF;
    END IF;
  END PROCESS reg_Timer_FPGA_ms_AXI4_1_1_process;


  data_slice_Timer_FPGA_ms_AXI4_1 <= data_reg_Timer_FPGA_ms_AXI4_1_1;

  
  decode_rd_Timer_FPGA_ms_AXI4_1_1 <= decode_rd_Position_offset_AXI4_1_1 WHEN decode_sel_Timer_FPGA_ms_AXI4_1_1 = '0' ELSE
      data_slice_Timer_FPGA_ms_AXI4_1;

  reg_enb_PI2_Inc_AXI4_1_1 <= decode_sel_PI2_Inc_AXI4_1_1 AND wr_enb;

  data_in_PI2_Inc_AXI4 <= data_write_unsigned(23 DOWNTO 0);

  reg_PI2_Inc_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_PI2_Inc_AXI4_1_1 <= to_unsigned(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_PI2_Inc_AXI4_1_1 = '1' THEN
        data_reg_PI2_Inc_AXI4_1_1 <= data_in_PI2_Inc_AXI4;
      END IF;
    END IF;
  END PROCESS reg_PI2_Inc_AXI4_1_1_process;


  data_slice_PI2_Inc_AXI4_1 <= resize(data_reg_PI2_Inc_AXI4_1_1, 32);

  
  decode_rd_PI2_Inc_AXI4_1_1 <= decode_rd_Timer_FPGA_ms_AXI4_1_1 WHEN decode_sel_PI2_Inc_AXI4_1_1 = '0' ELSE
      data_slice_PI2_Inc_AXI4_1;

  reg_enb_IncPerTurn_mech_AXI4_1_1 <= decode_sel_IncPerTurn_mech_AXI4_1_1 AND wr_enb;

  data_in_IncPerTurn_mech_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_IncPerTurn_mech_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_IncPerTurn_mech_AXI4_1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_IncPerTurn_mech_AXI4_1_1 = '1' THEN
        data_reg_IncPerTurn_mech_AXI4_1_1 <= data_in_IncPerTurn_mech_AXI4;
      END IF;
    END IF;
  END PROCESS reg_IncPerTurn_mech_AXI4_1_1_process;


  data_slice_IncPerTurn_mech_AXI4_1 <= resize(data_reg_IncPerTurn_mech_AXI4_1_1, 32);

  
  decode_rd_IncPerTurn_mech_AXI4_1_1 <= decode_rd_PI2_Inc_AXI4_1_1 WHEN decode_sel_IncPerTurn_mech_AXI4_1_1 = '0' ELSE
      data_slice_IncPerTurn_mech_AXI4_1;

  reg_enb_theta_el_offset_AXI4_1_1 <= decode_sel_theta_el_offset_AXI4_1_1 AND wr_enb;

  data_in_theta_el_offset_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_theta_el_offset_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_theta_el_offset_AXI4_1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_theta_el_offset_AXI4_1_1 = '1' THEN
        data_reg_theta_el_offset_AXI4_1_1 <= data_in_theta_el_offset_AXI4;
      END IF;
    END IF;
  END PROCESS reg_theta_el_offset_AXI4_1_1_process;


  data_slice_theta_el_offset_AXI4_1 <= resize(data_reg_theta_el_offset_AXI4_1_1, 32);

  
  decode_rd_theta_el_offset_AXI4_1_1 <= decode_rd_IncPerTurn_mech_AXI4_1_1 WHEN decode_sel_theta_el_offset_AXI4_1_1 = '0' ELSE
      data_slice_theta_el_offset_AXI4_1;

  reg_enb_IncPerTurn_elek_AXI4_1_1 <= decode_sel_IncPerTurn_elek_AXI4_1_1 AND wr_enb;

  data_in_IncPerTurn_elek_AXI4 <= data_write_unsigned(15 DOWNTO 0);

  reg_IncPerTurn_elek_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_IncPerTurn_elek_AXI4_1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_IncPerTurn_elek_AXI4_1_1 = '1' THEN
        data_reg_IncPerTurn_elek_AXI4_1_1 <= data_in_IncPerTurn_elek_AXI4;
      END IF;
    END IF;
  END PROCESS reg_IncPerTurn_elek_AXI4_1_1_process;


  data_slice_IncPerTurn_elek_AXI4_1 <= resize(data_reg_IncPerTurn_elek_AXI4_1_1, 32);

  
  decode_rd_IncPerTurn_elek_AXI4_1_1 <= decode_rd_theta_el_offset_AXI4_1_1 WHEN decode_sel_IncPerTurn_elek_AXI4_1_1 = '0' ELSE
      data_slice_IncPerTurn_elek_AXI4_1;

  reg_enb_d_axis_Hit_Compare_AXI_1_1 <= decode_sel_d_axis_Hit_Compare_AXI_1_1 AND wr_enb;

  reg_d_axis_Hit_Compare_AXI_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_d_axis_Hit_Compare_AXI_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_d_axis_Hit_Compare_AXI_1_1 = '1' THEN
        data_reg_d_axis_Hit_Compare_AXI_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_d_axis_Hit_Compare_AXI_1_1_process;


  read_omega_AXI4_signed <= signed(read_omega_AXI4);

  read_theta_el_AXI4_signed <= signed(read_theta_el_AXI4);

  read_position_AXI4_unsigned <= unsigned(read_position_AXI4);

  
  decode_sel_position_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  
  decode_sel_theta_el_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  
  decode_rd_d_axis_Hit_Compare_AXI_1_1 <= decode_rd_IncPerTurn_elek_AXI4_1_1 WHEN decode_sel_d_axis_Hit_Compare_AXI_1_1 = '0' ELSE
      data_reg_d_axis_Hit_Compare_AXI_1_1;

  reg_omega_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_omega_AXI4 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_omega_AXI4 <= read_omega_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_omega_AXI4_process;


  data_slice_omega_AXI4_1 <= unsigned(resize(read_reg_omega_AXI4, 32));

  
  decode_rd_omega_AXI4_1_1 <= decode_rd_d_axis_Hit_Compare_AXI_1_1 WHEN decode_sel_omega_AXI4_1_1 = '0' ELSE
      data_slice_omega_AXI4_1;

  reg_theta_el_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_theta_el_AXI4 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_theta_el_AXI4 <= read_theta_el_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_theta_el_AXI4_process;


  data_slice_theta_el_AXI4_1 <= unsigned(resize(read_reg_theta_el_AXI4, 32));

  
  decode_rd_theta_el_AXI4_1_1 <= decode_rd_omega_AXI4_1_1 WHEN decode_sel_theta_el_AXI4_1_1 = '0' ELSE
      data_slice_theta_el_AXI4_1;

  reg_position_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_position_AXI4 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        read_reg_position_AXI4 <= read_position_AXI4_unsigned;
      END IF;
    END IF;
  END PROCESS reg_position_AXI4_process;


  data_slice_position_AXI4_1 <= resize(read_reg_position_AXI4, 32);

  
  decode_rd_position_AXI4_1_1 <= decode_rd_theta_el_AXI4_1_1 WHEN decode_sel_position_AXI4_1_1 = '0' ELSE
      data_slice_position_AXI4_1;

  reg_enb_OmegaPerOverSampl_AXI4_1_1 <= decode_sel_OmegaPerOverSampl_AXI4_1_1 AND wr_enb;

  data_in_OmegaPerOverSampl_AXI4 <= signed(data_write_unsigned(23 DOWNTO 0));

  reg_OmegaPerOverSampl_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_OmegaPerOverSampl_AXI4_1_1 <= to_signed(16#000000#, 24);
      ELSIF enb = '1' AND reg_enb_OmegaPerOverSampl_AXI4_1_1 = '1' THEN
        data_reg_OmegaPerOverSampl_AXI4_1_1 <= data_in_OmegaPerOverSampl_AXI4;
      END IF;
    END IF;
  END PROCESS reg_OmegaPerOverSampl_AXI4_1_1_process;


  data_slice_OmegaPerOverSampl_AXI4_1 <= unsigned(resize(data_reg_OmegaPerOverSampl_AXI4_1_1, 32));

  read_direction_AXI4_signed <= signed(read_direction_AXI4);

  
  decode_rd_OmegaPerOverSampl_AXI4_1_1 <= decode_rd_position_AXI4_1_1 WHEN decode_sel_OmegaPerOverSampl_AXI4_1_1 = '0' ELSE
      data_slice_OmegaPerOverSampl_AXI4_1;

  reg_direction_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_direction_AXI4 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        read_reg_direction_AXI4 <= read_direction_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_direction_AXI4_process;


  data_slice_direction_AXI4_1 <= unsigned(resize(read_reg_direction_AXI4, 32));

  
  decode_rd_direction_AXI4_1_1 <= decode_rd_OmegaPerOverSampl_AXI4_1_1 WHEN decode_sel_direction_AXI4_1_1 = '0' ELSE
      data_slice_direction_AXI4_1;

  reg_enb_timeout_value_AXI4_1_1 <= decode_sel_timeout_value_AXI4_1_1 AND wr_enb;

  reg_timeout_value_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_timeout_value_AXI4_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_timeout_value_AXI4_1_1 = '1' THEN
        data_reg_timeout_value_AXI4_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timeout_value_AXI4_1_1_process;


  read_countPerPeriod_AXI4_signed <= signed(read_countPerPeriod_AXI4);

  read_omega_MA_N4_AXI_signed <= signed(read_omega_MA_N4_AXI);

  read_position_wOffset_AXI4_unsigned <= unsigned(read_position_wOffset_AXI4);

  
  decode_sel_position_wOffset_AXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  
  decode_sel_omega_MA_N4_AXI_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  
  decode_rd_timeout_value_AXI4_1_1 <= decode_rd_direction_AXI4_1_1 WHEN decode_sel_timeout_value_AXI4_1_1 = '0' ELSE
      data_reg_timeout_value_AXI4_1_1;

  reg_countPerPeriod_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_countPerPeriod_AXI4 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        read_reg_countPerPeriod_AXI4 <= read_countPerPeriod_AXI4_signed;
      END IF;
    END IF;
  END PROCESS reg_countPerPeriod_AXI4_process;


  data_slice_countPerPeriod_AXI4_1 <= unsigned(resize(read_reg_countPerPeriod_AXI4, 32));

  
  decode_rd_countPerPeriod_AXI4_1_1 <= decode_rd_timeout_value_AXI4_1_1 WHEN decode_sel_countPerPeriod_AXI4_1_1 = '0' ELSE
      data_slice_countPerPeriod_AXI4_1;

  reg_omega_MA_N4_AXI_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_omega_MA_N4_AXI <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        read_reg_omega_MA_N4_AXI <= read_omega_MA_N4_AXI_signed;
      END IF;
    END IF;
  END PROCESS reg_omega_MA_N4_AXI_process;


  data_slice_omega_MA_N4_AXI_1 <= unsigned(resize(read_reg_omega_MA_N4_AXI, 32));

  
  decode_rd_omega_MA_N4_AXI_1_1 <= decode_rd_countPerPeriod_AXI4_1_1 WHEN decode_sel_omega_MA_N4_AXI_1_1 = '0' ELSE
      data_slice_omega_MA_N4_AXI_1;

  reg_position_wOffset_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_position_wOffset_AXI4 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        read_reg_position_wOffset_AXI4 <= read_position_wOffset_AXI4_unsigned;
      END IF;
    END IF;
  END PROCESS reg_position_wOffset_AXI4_process;


  data_slice_position_wOffset_AXI4_1 <= resize(read_reg_position_wOffset_AXI4, 32);

  
  decode_rd_position_wOffset_AXI4_1_1 <= decode_rd_omega_MA_N4_AXI_1_1 WHEN decode_sel_position_wOffset_AXI4_1_1 = '0' ELSE
      data_slice_position_wOffset_AXI4_1;

  reg_enb_CW_CCW_Switch_AXI4_1_1 <= decode_sel_CW_CCW_Switch_AXI4_1_1 AND wr_enb;

  data_in_CW_CCW_Switch_AXI4 <= data_write_unsigned(0);

  reg_CW_CCW_Switch_AXI4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_CW_CCW_Switch_AXI4_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_CW_CCW_Switch_AXI4_1_1 = '1' THEN
        data_reg_CW_CCW_Switch_AXI4_1_1 <= data_in_CW_CCW_Switch_AXI4;
      END IF;
    END IF;
  END PROCESS reg_CW_CCW_Switch_AXI4_1_1_process;


  data_slice_CW_CCW_Switch_AXI4_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_CW_CCW_Switch_AXI4_1_1;

  
  decode_rd_CW_CCW_Switch_AXI4_1_1 <= decode_rd_position_wOffset_AXI4_1_1 WHEN decode_sel_CW_CCW_Switch_AXI4_1_1 = '0' ELSE
      data_slice_CW_CCW_Switch_AXI4_1;

  reg_Index_found_AXI4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_Index_found_AXI4 <= '0';
      ELSIF enb = '1' THEN
        read_reg_Index_found_AXI4 <= read_Index_found_AXI4;
      END IF;
    END IF;
  END PROCESS reg_Index_found_AXI4_process;


  data_slice_Index_found_AXI4_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_Index_found_AXI4;

  
  decode_rd_Index_found_AXI4_1_1 <= decode_rd_CW_CCW_Switch_AXI4_1_1 WHEN decode_sel_Index_found_AXI4_1_1 = '0' ELSE
      data_slice_Index_found_AXI4_1;

  data_read <= std_logic_vector(decode_rd_Index_found_AXI4_1_1);

  write_Position_offset_AXI4 <= std_logic_vector(data_reg_Position_offset_AXI4_1_1);

  write_Timer_FPGA_ms_AXI4 <= std_logic_vector(data_reg_Timer_FPGA_ms_AXI4_1_1);

  write_PI2_Inc_AXI4 <= std_logic_vector(data_reg_PI2_Inc_AXI4_1_1);

  write_IncPerTurn_mech_AXI4 <= std_logic_vector(data_reg_IncPerTurn_mech_AXI4_1_1);

  write_theta_el_offset_AXI4 <= std_logic_vector(data_reg_theta_el_offset_AXI4_1_1);

  write_IncPerTurn_elek_AXI4 <= std_logic_vector(data_reg_IncPerTurn_elek_AXI4_1_1);

  write_d_axis_Hit_Compare_AXI <= std_logic_vector(data_reg_d_axis_Hit_Compare_AXI_1_1);

  write_OmegaPerOverSampl_AXI4 <= std_logic_vector(data_reg_OmegaPerOverSampl_AXI4_1_1);

  write_timeout_value_AXI4 <= std_logic_vector(data_reg_timeout_value_AXI4_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

  write_CW_CCW_Switch_AXI4 <= data_reg_CW_CCW_Switch_AXI4_1_1;

END rtl;

