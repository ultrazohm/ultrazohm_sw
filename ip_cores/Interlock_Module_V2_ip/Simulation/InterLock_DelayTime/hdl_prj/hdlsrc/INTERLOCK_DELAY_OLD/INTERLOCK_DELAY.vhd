-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\INTERLOCK_DELAY\INTERLOCK_DELAY.vhd
-- Created: 2017-07-21 16:29:13
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.001
-- Target subsystem base rate: 0.001
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.001
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Switch_S0_OUT                 ce_out        0.001
-- Switch_S1_OUT                 ce_out        0.001
-- Switch_S2_OUT                 ce_out        0.001
-- Switch_S3_OUT                 ce_out        0.001
-- Switch_S4_OUT                 ce_out        0.001
-- Switch_S5_OUT                 ce_out        0.001
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: INTERLOCK_DELAY
-- Source Path: INTERLOCK_DELAY
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY INTERLOCK_DELAY IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Switch_S0_IN                      :   IN    std_logic;
        Switch_S1_IN                      :   IN    std_logic;
        Switch_S2_IN                      :   IN    std_logic;
        Switch_S3_IN                      :   IN    std_logic;
        Switch_S4_IN                      :   IN    std_logic;
        Switch_S5_IN                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Switch_S0_OUT                     :   OUT   std_logic;
        Switch_S1_OUT                     :   OUT   std_logic;
        Switch_S2_OUT                     :   OUT   std_logic;
        Switch_S3_OUT                     :   OUT   std_logic;
        Switch_S4_OUT                     :   OUT   std_logic;
        Switch_S5_OUT                     :   OUT   std_logic
        );
END INTERLOCK_DELAY;


ARCHITECTURE rtl OF INTERLOCK_DELAY IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay0_reg                       : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Delay0_out1                      : std_logic;
  SIGNAL Logical0_out1                    : std_logic;
  SIGNAL CompareToZero0_out1              : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical1_out1                    : std_logic;
  SIGNAL CompareToZero1_out1              : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical2_out1                    : std_logic;
  SIGNAL CompareToZero2_out1              : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical3_out1                    : std_logic;
  SIGNAL CompareToZero3_out1              : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical4_out1                    : std_logic;
  SIGNAL CompareToZero4_out1              : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Logical5_out1                    : std_logic;
  SIGNAL CompareToZero5_out1              : std_logic;

BEGIN
  enb <= clk_enable;

  Delay0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay0_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay0_reg(0) <= Switch_S0_IN;
        Delay0_reg(1 TO 9) <= Delay0_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Delay0_process;

  Delay0_out1 <= Delay0_reg(9);

  Logical0_out1 <= Switch_S0_IN AND Delay0_out1;

  
  CompareToZero0_out1 <= '1' WHEN Logical0_out1 /= '0' ELSE
      '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= Switch_S1_IN;
        Delay1_reg(1 TO 9) <= Delay1_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(9);

  Logical1_out1 <= Switch_S1_IN AND Delay1_out1;

  
  CompareToZero1_out1 <= '1' WHEN Logical1_out1 /= '0' ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Switch_S2_IN;
        Delay2_reg(1 TO 9) <= Delay2_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(9);

  Logical2_out1 <= Switch_S2_IN AND Delay2_out1;

  
  CompareToZero2_out1 <= '1' WHEN Logical2_out1 /= '0' ELSE
      '0';

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Switch_S3_IN;
        Delay3_reg(1 TO 9) <= Delay3_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(9);

  Logical3_out1 <= Switch_S3_IN AND Delay3_out1;

  
  CompareToZero3_out1 <= '1' WHEN Logical3_out1 /= '0' ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Switch_S4_IN;
        Delay4_reg(1 TO 9) <= Delay4_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(9);

  Logical4_out1 <= Switch_S4_IN AND Delay4_out1;

  
  CompareToZero4_out1 <= '1' WHEN Logical4_out1 /= '0' ELSE
      '0';

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= Switch_S5_IN;
        Delay5_reg(1 TO 9) <= Delay5_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(9);

  Logical5_out1 <= Switch_S5_IN AND Delay5_out1;

  
  CompareToZero5_out1 <= '1' WHEN Logical5_out1 /= '0' ELSE
      '0';

  ce_out <= clk_enable;

  Switch_S0_OUT <= CompareToZero0_out1;

  Switch_S1_OUT <= CompareToZero1_out1;

  Switch_S2_OUT <= CompareToZero2_out1;

  Switch_S3_OUT <= CompareToZero3_out1;

  Switch_S4_OUT <= CompareToZero4_out1;

  Switch_S5_OUT <= CompareToZero5_out1;

END rtl;

