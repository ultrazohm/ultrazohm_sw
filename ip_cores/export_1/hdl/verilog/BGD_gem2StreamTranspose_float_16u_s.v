// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BGD_gem2StreamTranspose_float_16u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_n_dout,
        p_n_empty_n,
        p_n_read,
        p_k_dout,
        p_k_empty_n,
        p_k_read,
        p_in_address0,
        p_in_ce0,
        p_in_q0,
        p_in_address1,
        p_in_ce1,
        p_in_q1,
        p_in_offset_dout,
        p_in_offset_empty_n,
        p_in_offset_read,
        p_n_out_din,
        p_n_out_full_n,
        p_n_out_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state14 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [511:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [31:0] p_n_dout;
input   p_n_empty_n;
output   p_n_read;
input  [31:0] p_k_dout;
input   p_k_empty_n;
output   p_k_read;
output  [13:0] p_in_address0;
output   p_in_ce0;
input  [31:0] p_in_q0;
output  [13:0] p_in_address1;
output   p_in_ce1;
input  [31:0] p_in_q1;
input  [13:0] p_in_offset_dout;
input   p_in_offset_empty_n;
output   p_in_offset_read;
output  [31:0] p_n_out_din;
input   p_n_out_full_n;
output   p_n_out_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_out_write;
reg p_n_read;
reg p_k_read;
reg[13:0] p_in_address0;
reg p_in_ce0;
reg[13:0] p_in_address1;
reg p_in_ce1;
reg p_in_offset_read;
reg p_n_out_write;
reg p_k_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_out_blk_n;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln165_reg_890;
reg   [0:0] icmp_ln165_reg_890_pp0_iter1_reg;
reg    p_n_blk_n;
reg    p_k_blk_n;
reg    p_in_offset_blk_n;
reg    p_n_out_blk_n;
reg    p_k_out_blk_n;
reg   [59:0] indvar_flatten_reg_282;
reg   [27:0] k_reg_293;
reg   [31:0] i_reg_304;
reg   [13:0] p_in_offset_read_reg_836;
reg    ap_block_state1;
wire  signed [13:0] empty_fu_315_p1;
reg  signed [13:0] empty_reg_856;
wire   [27:0] trunc_ln_fu_319_p4;
reg   [27:0] trunc_ln_reg_875;
wire  signed [9:0] trunc_ln173_fu_329_p1;
reg  signed [9:0] trunc_ln173_reg_880;
wire   [59:0] bound_fu_341_p2;
reg   [59:0] bound_reg_885;
wire   [0:0] icmp_ln165_fu_347_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [59:0] add_ln165_fu_352_p2;
reg   [59:0] add_ln165_reg_894;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln167_fu_358_p2;
reg   [0:0] icmp_ln167_reg_899;
wire   [27:0] select_ln165_fu_363_p3;
reg   [27:0] select_ln165_reg_904;
wire   [13:0] shl_ln_fu_375_p3;
reg   [13:0] shl_ln_reg_909;
wire   [9:0] mul_ln173_fu_383_p2;
reg   [9:0] mul_ln173_reg_926;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln165_1_fu_416_p3;
reg   [31:0] select_ln165_1_reg_951;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [13:0] trunc_ln165_fu_423_p1;
reg   [13:0] trunc_ln165_reg_956;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state13_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] l_val_m_Val_1_reg_1006;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] l_val_m_Val_2_reg_1011;
reg   [31:0] l_val_m_Val_3_reg_1036;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] l_val_m_Val_4_reg_1041;
reg   [31:0] l_val_m_Val_5_reg_1066;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] l_val_m_Val_6_reg_1071;
reg   [31:0] l_val_m_Val_7_reg_1096;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [31:0] l_val_m_Val_8_reg_1101;
wire   [27:0] add_ln167_fu_572_p2;
reg   [27:0] add_ln167_reg_1121;
reg   [31:0] l_val_m_Val_9_reg_1131;
reg   [31:0] l_val_m_Val_10_reg_1136;
wire  signed [13:0] grp_fu_810_p3;
reg  signed [13:0] add_ln173_24_reg_1146;
reg   [31:0] l_val_m_Val_0_reg_1151;
reg   [31:0] l_val_m_Val_11_reg_1156;
wire  signed [13:0] grp_fu_823_p3;
reg  signed [13:0] add_ln173_28_reg_1171;
reg   [31:0] l_val_m_Val_12_reg_1176;
reg   [31:0] l_val_m_Val_13_reg_1181;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage3_subdone;
reg   [59:0] ap_phi_mux_indvar_flatten_phi_fu_286_p4;
wire    ap_block_pp0_stage0;
reg   [27:0] ap_phi_mux_k_phi_fu_297_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_308_p4;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln173_1_fu_441_p1;
wire   [63:0] zext_ln173_2_fu_450_p1;
wire   [63:0] zext_ln173_3_fu_469_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln173_4_fu_478_p1;
wire   [63:0] zext_ln173_5_fu_497_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln173_6_fu_506_p1;
wire   [63:0] zext_ln173_7_fu_525_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln173_8_fu_534_p1;
wire   [63:0] zext_ln173_9_fu_553_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln173_10_fu_562_p1;
wire   [63:0] zext_ln173_fu_594_p1;
wire   [63:0] zext_ln173_11_fu_603_p1;
wire   [63:0] zext_ln173_12_fu_612_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln173_13_fu_621_p1;
wire   [63:0] zext_ln173_14_fu_630_p1;
wire   [63:0] zext_ln173_15_fu_639_p1;
reg    ap_block_pp0_stage3_01001;
wire   [31:0] bound_fu_341_p0;
wire   [27:0] bound_fu_341_p1;
wire  signed [9:0] empty_83_fu_371_p1;
wire   [31:0] add_ln165_1_fu_410_p2;
wire  signed [13:0] grp_fu_731_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_3_fu_437_p2;
wire  signed [13:0] grp_fu_739_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_5_fu_446_p2;
wire  signed [13:0] grp_fu_747_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_7_fu_465_p2;
wire  signed [13:0] grp_fu_754_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_9_fu_474_p2;
wire  signed [13:0] grp_fu_761_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_11_fu_493_p2;
wire  signed [13:0] grp_fu_768_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_13_fu_502_p2;
wire  signed [13:0] grp_fu_775_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_15_fu_521_p2;
wire  signed [13:0] grp_fu_782_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_17_fu_530_p2;
wire  signed [13:0] grp_fu_789_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_19_fu_549_p2;
wire  signed [13:0] grp_fu_796_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_21_fu_558_p2;
wire   [13:0] shl_ln173_1_fu_577_p3;
wire   [13:0] add_ln173_fu_584_p2;
wire   [13:0] add_ln173_1_fu_589_p2;
wire  signed [13:0] grp_fu_803_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_23_fu_599_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_25_fu_608_p2;
wire  signed [13:0] grp_fu_816_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_27_fu_617_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_29_fu_626_p2;
wire  signed [13:0] grp_fu_829_p3;
(* use_dsp48 = "no" *) wire   [13:0] add_ln173_31_fu_635_p2;
wire   [31:0] l_v_135_fu_690_p1;
wire   [31:0] l_v_134_fu_686_p1;
wire   [31:0] l_v_133_fu_683_p1;
wire   [31:0] l_v_132_fu_680_p1;
wire   [31:0] l_v_131_fu_677_p1;
wire   [31:0] l_v_130_fu_674_p1;
wire   [31:0] l_v_129_fu_671_p1;
wire   [31:0] l_v_128_fu_668_p1;
wire   [31:0] l_v_127_fu_665_p1;
wire   [31:0] l_v_126_fu_662_p1;
wire   [31:0] l_v_125_fu_659_p1;
wire   [31:0] l_v_124_fu_656_p1;
wire   [31:0] l_v_123_fu_653_p1;
wire   [31:0] l_v_122_fu_650_p1;
wire   [31:0] l_v_121_fu_647_p1;
wire   [31:0] l_v_fu_644_p1;
wire  signed [13:0] grp_fu_731_p1;
wire  signed [13:0] grp_fu_739_p1;
wire  signed [13:0] grp_fu_747_p1;
wire  signed [13:0] grp_fu_754_p1;
wire  signed [13:0] grp_fu_761_p1;
wire  signed [13:0] grp_fu_768_p1;
wire  signed [13:0] grp_fu_775_p1;
wire  signed [13:0] grp_fu_782_p1;
wire  signed [13:0] grp_fu_789_p1;
wire  signed [13:0] grp_fu_796_p1;
wire  signed [13:0] grp_fu_803_p1;
wire  signed [13:0] grp_fu_810_p1;
wire  signed [13:0] grp_fu_816_p1;
wire  signed [13:0] grp_fu_823_p1;
wire  signed [13:0] grp_fu_829_p1;
reg    grp_fu_731_ce;
reg    grp_fu_739_ce;
reg    grp_fu_747_ce;
reg    grp_fu_754_ce;
reg    grp_fu_761_ce;
reg    grp_fu_768_ce;
reg    grp_fu_775_ce;
reg    grp_fu_782_ce;
reg    grp_fu_789_ce;
reg    grp_fu_796_ce;
reg    grp_fu_803_ce;
reg    grp_fu_810_ce;
reg    grp_fu_816_ce;
reg    grp_fu_823_ce;
reg    grp_fu_829_ce;
wire    ap_CS_fsm_state14;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [59:0] bound_fu_341_p00;
wire   [59:0] bound_fu_341_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

BGD_mul_32ns_28ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 60 ))
mul_32ns_28ns_60_1_1_U156(
    .din0(bound_fu_341_p0),
    .din1(bound_fu_341_p1),
    .dout(bound_fu_341_p2)
);

BGD_mul_10s_10s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_1_1_U157(
    .din0(empty_83_fu_371_p1),
    .din1(trunc_ln173_reg_880),
    .dout(mul_ln173_fu_383_p2)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_731_p1),
    .din2(trunc_ln165_fu_423_p1),
    .ce(grp_fu_731_ce),
    .dout(grp_fu_731_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_739_p1),
    .din2(trunc_ln165_fu_423_p1),
    .ce(grp_fu_739_ce),
    .dout(grp_fu_739_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_747_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_747_ce),
    .dout(grp_fu_747_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_754_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_754_ce),
    .dout(grp_fu_754_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_761_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_761_ce),
    .dout(grp_fu_761_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_768_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_768_ce),
    .dout(grp_fu_768_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_775_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_775_ce),
    .dout(grp_fu_775_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_782_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_782_ce),
    .dout(grp_fu_782_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_789_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_789_ce),
    .dout(grp_fu_789_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_796_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_796_ce),
    .dout(grp_fu_796_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_803_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_803_ce),
    .dout(grp_fu_803_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_810_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_810_ce),
    .dout(grp_fu_810_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_816_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_816_ce),
    .dout(grp_fu_816_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_823_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_823_ce),
    .dout(grp_fu_823_p3)
);

BGD_mac_muladd_14s_14s_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_14s_14s_14ns_14_4_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_856),
    .din1(grp_fu_829_p1),
    .din2(trunc_ln165_reg_956),
    .ce(grp_fu_829_ce),
    .dout(grp_fu_829_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        i_reg_304 <= select_ln165_1_reg_951;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_304 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_282 <= add_ln165_reg_894;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_282 <= 60'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_293 <= add_ln167_reg_1121;
    end else if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_293 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln165_reg_894 <= add_ln165_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln167_reg_1121 <= add_ln167_fu_572_p2;
        l_val_m_Val_7_reg_1096 <= p_in_q1;
        l_val_m_Val_8_reg_1101 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln173_24_reg_1146 <= grp_fu_810_p3;
        l_val_m_Val_10_reg_1136 <= p_in_q0;
        l_val_m_Val_9_reg_1131 <= p_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln173_28_reg_1171 <= grp_fu_823_p3;
        l_val_m_Val_0_reg_1151 <= p_in_q1;
        l_val_m_Val_11_reg_1156 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_885 <= bound_fu_341_p2;
        empty_reg_856 <= empty_fu_315_p1;
        p_in_offset_read_reg_836 <= p_in_offset_dout;
        trunc_ln173_reg_880 <= trunc_ln173_fu_329_p1;
        trunc_ln_reg_875 <= {{p_n_dout[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln165_reg_890 <= icmp_ln165_fu_347_p2;
        icmp_ln165_reg_890_pp0_iter1_reg <= icmp_ln165_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln165_fu_347_p2 == 1'd0))) begin
        icmp_ln167_reg_899 <= icmp_ln167_fu_358_p2;
        mul_ln173_reg_926 <= mul_ln173_fu_383_p2;
        select_ln165_reg_904 <= select_ln165_fu_363_p3;
        shl_ln_reg_909[13 : 4] <= shl_ln_fu_375_p3[13 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        l_val_m_Val_12_reg_1176 <= p_in_q1;
        l_val_m_Val_13_reg_1181 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_1_reg_1006 <= p_in_q1;
        l_val_m_Val_2_reg_1011 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_3_reg_1036 <= p_in_q1;
        l_val_m_Val_4_reg_1041 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        l_val_m_Val_5_reg_1066 <= p_in_q1;
        l_val_m_Val_6_reg_1071 <= p_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln165_1_reg_951 <= select_ln165_1_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln165_reg_956 <= trunc_ln165_fu_423_p1;
    end
end

always @ (*) begin
    if ((icmp_ln165_reg_890 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_mux_i_phi_fu_308_p4 = select_ln165_1_reg_951;
    end else begin
        ap_phi_mux_i_phi_fu_308_p4 = i_reg_304;
    end
end

always @ (*) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_286_p4 = add_ln165_reg_894;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_286_p4 = indvar_flatten_reg_282;
    end
end

always @ (*) begin
    if (((icmp_ln165_reg_890 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_297_p4 = add_ln167_reg_1121;
    end else begin
        ap_phi_mux_k_phi_fu_297_p4 = k_reg_293;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_731_ce = 1'b1;
    end else begin
        grp_fu_731_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_739_ce = 1'b1;
    end else begin
        grp_fu_739_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_747_ce = 1'b1;
    end else begin
        grp_fu_747_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_754_ce = 1'b1;
    end else begin
        grp_fu_754_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_761_ce = 1'b1;
    end else begin
        grp_fu_761_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_768_ce = 1'b1;
    end else begin
        grp_fu_768_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_775_ce = 1'b1;
    end else begin
        grp_fu_775_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_782_ce = 1'b1;
    end else begin
        grp_fu_782_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_fu_789_ce = 1'b1;
    end else begin
        grp_fu_789_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_fu_796_ce = 1'b1;
    end else begin
        grp_fu_796_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_803_ce = 1'b1;
    end else begin
        grp_fu_803_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_810_ce = 1'b1;
    end else begin
        grp_fu_810_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_816_ce = 1'b1;
    end else begin
        grp_fu_816_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_823_ce = 1'b1;
    end else begin
        grp_fu_823_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_829_ce = 1'b1;
    end else begin
        grp_fu_829_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_in_address0 = zext_ln173_15_fu_639_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_in_address0 = zext_ln173_13_fu_621_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address0 = zext_ln173_11_fu_603_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address0 = zext_ln173_10_fu_562_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address0 = zext_ln173_8_fu_534_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address0 = zext_ln173_6_fu_506_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address0 = zext_ln173_4_fu_478_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address0 = zext_ln173_2_fu_450_p1;
    end else begin
        p_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_in_address1 = zext_ln173_14_fu_630_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_in_address1 = zext_ln173_12_fu_612_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_in_address1 = zext_ln173_fu_594_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address1 = zext_ln173_9_fu_553_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address1 = zext_ln173_7_fu_525_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address1 = zext_ln173_5_fu_497_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address1 = zext_ln173_3_fu_469_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_in_address1 = zext_ln173_1_fu_441_p1;
    end else begin
        p_in_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce0 = 1'b1;
    end else begin
        p_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_in_ce1 = 1'b1;
    end else begin
        p_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_blk_n = p_in_offset_empty_n;
    end else begin
        p_in_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_in_offset_read = 1'b1;
    end else begin
        p_in_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_blk_n = p_k_empty_n;
    end else begin
        p_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_read = 1'b1;
    end else begin
        p_k_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_blk_n = p_n_empty_n;
    end else begin
        p_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_blk_n = p_n_out_full_n;
    end else begin
        p_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_out_write = 1'b1;
    end else begin
        p_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_n_read = 1'b1;
    end else begin
        p_n_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((icmp_ln165_reg_890 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((icmp_ln165_reg_890 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln165_1_fu_410_p2 = (32'd1 + ap_phi_mux_i_phi_fu_308_p4);

assign add_ln165_fu_352_p2 = (ap_phi_mux_indvar_flatten_phi_fu_286_p4 + 60'd1);

assign add_ln167_fu_572_p2 = (28'd1 + select_ln165_reg_904);

assign add_ln173_11_fu_493_p2 = ($signed(grp_fu_761_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_13_fu_502_p2 = ($signed(grp_fu_768_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_15_fu_521_p2 = ($signed(grp_fu_775_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_17_fu_530_p2 = ($signed(grp_fu_782_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_19_fu_549_p2 = ($signed(grp_fu_789_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_1_fu_589_p2 = (add_ln173_fu_584_p2 + p_in_offset_read_reg_836);

assign add_ln173_21_fu_558_p2 = ($signed(grp_fu_796_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_23_fu_599_p2 = ($signed(grp_fu_803_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_25_fu_608_p2 = ($signed(add_ln173_24_reg_1146) + $signed(p_in_offset_read_reg_836));

assign add_ln173_27_fu_617_p2 = ($signed(grp_fu_816_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_29_fu_626_p2 = ($signed(add_ln173_28_reg_1171) + $signed(p_in_offset_read_reg_836));

assign add_ln173_31_fu_635_p2 = ($signed(grp_fu_829_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_3_fu_437_p2 = ($signed(grp_fu_731_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_5_fu_446_p2 = ($signed(grp_fu_739_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_7_fu_465_p2 = ($signed(grp_fu_747_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_9_fu_474_p2 = ($signed(grp_fu_754_p3) + $signed(p_in_offset_read_reg_836));

assign add_ln173_fu_584_p2 = (trunc_ln165_reg_956 + shl_ln173_1_fu_577_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_out_full_n == 1'b0));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_k_out_full_n == 1'b0) | (p_n_out_full_n == 1'b0) | (p_in_offset_empty_n == 1'b0) | (p_k_empty_n == 1'b0) | (p_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = ((icmp_ln165_reg_890_pp0_iter1_reg == 1'd0) & (p_out_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_341_p0 = bound_fu_341_p00;

assign bound_fu_341_p00 = p_k_dout;

assign bound_fu_341_p1 = bound_fu_341_p10;

assign bound_fu_341_p10 = trunc_ln_fu_319_p4;

assign empty_83_fu_371_p1 = select_ln165_fu_363_p3[9:0];

assign empty_fu_315_p1 = p_k_dout[13:0];

assign grp_fu_731_p1 = (shl_ln_fu_375_p3 | 14'd1);

assign grp_fu_739_p1 = (shl_ln_fu_375_p3 | 14'd2);

assign grp_fu_747_p1 = (shl_ln_reg_909 | 14'd3);

assign grp_fu_754_p1 = (shl_ln_reg_909 | 14'd4);

assign grp_fu_761_p1 = (shl_ln_reg_909 | 14'd5);

assign grp_fu_768_p1 = (shl_ln_reg_909 | 14'd6);

assign grp_fu_775_p1 = (shl_ln_reg_909 | 14'd7);

assign grp_fu_782_p1 = (shl_ln_reg_909 | 14'd8);

assign grp_fu_789_p1 = (shl_ln_reg_909 | 14'd9);

assign grp_fu_796_p1 = (shl_ln_reg_909 | 14'd10);

assign grp_fu_803_p1 = (shl_ln_reg_909 | 14'd11);

assign grp_fu_810_p1 = (shl_ln_reg_909 | 14'd12);

assign grp_fu_816_p1 = (shl_ln_reg_909 | 14'd13);

assign grp_fu_823_p1 = (shl_ln_reg_909 | 14'd14);

assign grp_fu_829_p1 = (shl_ln_reg_909 | 14'd15);

assign icmp_ln165_fu_347_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_286_p4 == bound_reg_885) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_358_p2 = ((ap_phi_mux_k_phi_fu_297_p4 == trunc_ln_reg_875) ? 1'b1 : 1'b0);

assign l_v_121_fu_647_p1 = l_val_m_Val_1_reg_1006;

assign l_v_122_fu_650_p1 = l_val_m_Val_2_reg_1011;

assign l_v_123_fu_653_p1 = l_val_m_Val_3_reg_1036;

assign l_v_124_fu_656_p1 = l_val_m_Val_4_reg_1041;

assign l_v_125_fu_659_p1 = l_val_m_Val_5_reg_1066;

assign l_v_126_fu_662_p1 = l_val_m_Val_6_reg_1071;

assign l_v_127_fu_665_p1 = l_val_m_Val_7_reg_1096;

assign l_v_128_fu_668_p1 = l_val_m_Val_8_reg_1101;

assign l_v_129_fu_671_p1 = l_val_m_Val_9_reg_1131;

assign l_v_130_fu_674_p1 = l_val_m_Val_10_reg_1136;

assign l_v_131_fu_677_p1 = l_val_m_Val_11_reg_1156;

assign l_v_132_fu_680_p1 = l_val_m_Val_12_reg_1176;

assign l_v_133_fu_683_p1 = l_val_m_Val_13_reg_1181;

assign l_v_134_fu_686_p1 = p_in_q1;

assign l_v_135_fu_690_p1 = p_in_q0;

assign l_v_fu_644_p1 = l_val_m_Val_0_reg_1151;

assign p_k_out_din = p_k_dout;

assign p_n_out_din = p_n_dout;

assign p_out_din = {{{{{{{{{{{{{{{{l_v_135_fu_690_p1}, {l_v_134_fu_686_p1}}, {l_v_133_fu_683_p1}}, {l_v_132_fu_680_p1}}, {l_v_131_fu_677_p1}}, {l_v_130_fu_674_p1}}, {l_v_129_fu_671_p1}}, {l_v_128_fu_668_p1}}, {l_v_127_fu_665_p1}}, {l_v_126_fu_662_p1}}, {l_v_125_fu_659_p1}}, {l_v_124_fu_656_p1}}, {l_v_123_fu_653_p1}}, {l_v_122_fu_650_p1}}, {l_v_121_fu_647_p1}}, {l_v_fu_644_p1}};

assign select_ln165_1_fu_416_p3 = ((icmp_ln167_reg_899[0:0] === 1'b1) ? add_ln165_1_fu_410_p2 : ap_phi_mux_i_phi_fu_308_p4);

assign select_ln165_fu_363_p3 = ((icmp_ln167_fu_358_p2[0:0] === 1'b1) ? 28'd0 : ap_phi_mux_k_phi_fu_297_p4);

assign shl_ln173_1_fu_577_p3 = {{mul_ln173_reg_926}, {4'd0}};

assign shl_ln_fu_375_p3 = {{empty_83_fu_371_p1}, {4'd0}};

assign start_out = real_start;

assign trunc_ln165_fu_423_p1 = select_ln165_1_fu_416_p3[13:0];

assign trunc_ln173_fu_329_p1 = p_k_dout[9:0];

assign trunc_ln_fu_319_p4 = {{p_n_dout[31:4]}};

assign zext_ln173_10_fu_562_p1 = add_ln173_21_fu_558_p2;

assign zext_ln173_11_fu_603_p1 = add_ln173_23_fu_599_p2;

assign zext_ln173_12_fu_612_p1 = add_ln173_25_fu_608_p2;

assign zext_ln173_13_fu_621_p1 = add_ln173_27_fu_617_p2;

assign zext_ln173_14_fu_630_p1 = add_ln173_29_fu_626_p2;

assign zext_ln173_15_fu_639_p1 = add_ln173_31_fu_635_p2;

assign zext_ln173_1_fu_441_p1 = add_ln173_3_fu_437_p2;

assign zext_ln173_2_fu_450_p1 = add_ln173_5_fu_446_p2;

assign zext_ln173_3_fu_469_p1 = add_ln173_7_fu_465_p2;

assign zext_ln173_4_fu_478_p1 = add_ln173_9_fu_474_p2;

assign zext_ln173_5_fu_497_p1 = add_ln173_11_fu_493_p2;

assign zext_ln173_6_fu_506_p1 = add_ln173_13_fu_502_p2;

assign zext_ln173_7_fu_525_p1 = add_ln173_15_fu_521_p2;

assign zext_ln173_8_fu_534_p1 = add_ln173_17_fu_530_p2;

assign zext_ln173_9_fu_553_p1 = add_ln173_19_fu_549_p2;

assign zext_ln173_fu_594_p1 = add_ln173_1_fu_589_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_909[3:0] <= 4'b0000;
end

endmodule //BGD_gem2StreamTranspose_float_16u_s
