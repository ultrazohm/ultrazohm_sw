// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uz_fixdt_to_float_uz_fixdt_to_float,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.929000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=560,HLS_VERSION=2022_2}" *)

module uz_fixdt_to_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_fixed,
        fraction,
        word,
        sign,
        out_float
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_fixed;
input  [7:0] fraction;
input  [7:0] word;
input   sign;
output  [31:0] out_float;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] add_ln10_fu_104_p2;
reg   [8:0] add_ln10_reg_335;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_97_p1;
reg   [31:0] input_float_reg_345;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_97_p0;
wire   [8:0] zext_ln10_1_fu_100_p1;
wire  signed [31:0] sext_ln10_fu_113_p1;
wire   [31:0] shl_ln10_fu_116_p2;
wire   [31:0] and_ln10_fu_122_p2;
wire   [31:0] zext_ln10_fu_110_p1;
wire   [0:0] xor_ln3_fu_140_p0;
wire   [0:0] icmp_ln10_fu_128_p2;
wire   [0:0] xor_ln3_fu_140_p2;
wire   [0:0] or_ln10_fu_146_p2;
wire   [31:0] shl_ln11_fu_134_p2;
wire   [31:0] select_ln10_fu_152_p3;
wire   [31:0] data_V_fu_171_p1;
wire   [7:0] xs_exp_V_3_fu_182_p4;
wire   [8:0] zext_ln17_fu_196_p1;
wire   [8:0] zext_ln9_fu_167_p1;
wire   [8:0] sub_ln17_fu_200_p2;
wire   [0:0] ininf_fu_206_p2;
wire   [0:0] icmp_ln1031_fu_212_p2;
wire   [22:0] xs_sig_V_fu_192_p1;
wire   [0:0] icmp_ln1023_fu_224_p2;
wire   [0:0] icmp_ln23_1_fu_242_p2;
wire   [0:0] icmp_ln23_fu_236_p2;
wire   [0:0] and_ln23_fu_248_p2;
wire   [0:0] inf_fu_218_p2;
wire   [7:0] xs_exp_V_fu_260_p2;
wire   [0:0] p_Result_s_fu_174_p3;
wire   [7:0] xs_exp_V_4_fu_266_p3;
wire   [22:0] xs_sig_V_1_fu_274_p3;
wire   [0:0] and_ln18_fu_230_p2;
wire   [0:0] or_ln23_fu_254_p2;
wire   [0:0] xor_ln23_fu_300_p2;
wire   [31:0] p_Result_1_fu_282_p4;
wire   [31:0] p_Result_2_fu_292_p3;
wire   [31:0] select_ln23_fu_306_p3;
wire   [31:0] bitcast_ln23_fu_314_p1;
wire   [31:0] select_ln18_fu_318_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

uz_fixdt_to_float_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_97_p0),
    .ce(1'b1),
    .dout(grp_fu_97_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln10_reg_335 <= add_ln10_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_float_reg_345 <= grp_fu_97_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_104_p2 = ($signed(zext_ln10_1_fu_100_p1) + $signed(9'd511));

assign and_ln10_fu_122_p2 = (shl_ln10_fu_116_p2 & in_fixed);

assign and_ln18_fu_230_p2 = (ininf_fu_206_p2 & icmp_ln1023_fu_224_p2);

assign and_ln23_fu_248_p2 = (icmp_ln23_fu_236_p2 & icmp_ln23_1_fu_242_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln23_fu_314_p1 = select_ln23_fu_306_p3;

assign data_V_fu_171_p1 = input_float_reg_345;

assign grp_fu_97_p0 = (select_ln10_fu_152_p3 | in_fixed);

assign icmp_ln1023_fu_224_p2 = ((xs_sig_V_fu_192_p1 != 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln1031_fu_212_p2 = ((sub_ln17_fu_200_p2 == 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_128_p2 = ((and_ln10_fu_122_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_242_p2 = (($signed(sub_ln17_fu_200_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_236_p2 = ((xs_exp_V_3_fu_182_p4 != 8'd0) ? 1'b1 : 1'b0);

assign inf_fu_218_p2 = (ininf_fu_206_p2 | icmp_ln1031_fu_212_p2);

assign ininf_fu_206_p2 = ((xs_exp_V_3_fu_182_p4 == 8'd255) ? 1'b1 : 1'b0);

assign or_ln10_fu_146_p2 = (xor_ln3_fu_140_p2 | icmp_ln10_fu_128_p2);

assign or_ln23_fu_254_p2 = (ininf_fu_206_p2 | and_ln23_fu_248_p2);

assign out_float = select_ln18_fu_318_p3;

assign p_Result_1_fu_282_p4 = {{{p_Result_s_fu_174_p3}, {xs_exp_V_4_fu_266_p3}}, {xs_sig_V_1_fu_274_p3}};

assign p_Result_2_fu_292_p3 = {{p_Result_s_fu_174_p3}, {31'd0}};

assign p_Result_s_fu_174_p3 = data_V_fu_171_p1[32'd31];

assign select_ln10_fu_152_p3 = ((or_ln10_fu_146_p2[0:0] == 1'b1) ? 32'd0 : shl_ln11_fu_134_p2);

assign select_ln18_fu_318_p3 = ((and_ln18_fu_230_p2[0:0] == 1'b1) ? input_float_reg_345 : bitcast_ln23_fu_314_p1);

assign select_ln23_fu_306_p3 = ((xor_ln23_fu_300_p2[0:0] == 1'b1) ? p_Result_1_fu_282_p4 : p_Result_2_fu_292_p3);

assign sext_ln10_fu_113_p1 = $signed(add_ln10_reg_335);

assign shl_ln10_fu_116_p2 = 32'd1 << sext_ln10_fu_113_p1;

assign shl_ln11_fu_134_p2 = 32'd4294967295 << zext_ln10_fu_110_p1;

assign sub_ln17_fu_200_p2 = (zext_ln17_fu_196_p1 - zext_ln9_fu_167_p1);

assign xor_ln23_fu_300_p2 = (or_ln23_fu_254_p2 ^ and_ln18_fu_230_p2);

assign xor_ln3_fu_140_p0 = sign;

assign xor_ln3_fu_140_p2 = (xor_ln3_fu_140_p0 ^ 1'd1);

assign xs_exp_V_3_fu_182_p4 = {{data_V_fu_171_p1[30:23]}};

assign xs_exp_V_4_fu_266_p3 = ((inf_fu_218_p2[0:0] == 1'b1) ? 8'd255 : xs_exp_V_fu_260_p2);

assign xs_exp_V_fu_260_p2 = (xs_exp_V_3_fu_182_p4 - fraction);

assign xs_sig_V_1_fu_274_p3 = ((inf_fu_218_p2[0:0] == 1'b1) ? 23'd0 : xs_sig_V_fu_192_p1);

assign xs_sig_V_fu_192_p1 = data_V_fu_171_p1[22:0];

assign zext_ln10_1_fu_100_p1 = word;

assign zext_ln10_fu_110_p1 = word;

assign zext_ln17_fu_196_p1 = xs_exp_V_3_fu_182_p4;

assign zext_ln9_fu_167_p1 = fraction;

endmodule //uz_fixdt_to_float
