-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg_rom is 
    generic(
             DWIDTH     : integer := 49; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000000000000000000000000000000", 
    1 => "0000010000000000000000000000000000010101010101010", 
    2 => "0000100000000000001000000000000100101010101101001", 
    3 => "0000110000000000011000000000010101000000010011100", 
    4 => "0001000000000000110000000000111001010110100000010", 
    5 => "0001010000000001010000000001111001101101110111110", 
    6 => "0001100000000001111000000011011110000111001001101", 
    7 => "0001110000000010101000000101101110100011010010011", 
    8 => "0010000000000011100000001000110011000011011001110", 
    9 => "0010010000000100100000001100110011101000110100001", 
    10 => "0010100000000101101000010001111000010101000001100", 
    11 => "0010110000000110111000011000001001001001101110011", 
    12 => "0011000000001000010000011111101110001000110010110", 
    13 => "0011010000001001110000101000101111010100010011010", 
    14 => "0011100000001011011000110011010100101110100000000", 
    15 => "0011110000001101001000111111100110011001110101110", 
    16 => "0100000000001111000001001101101100011000111101000", 
    17 => "0100010000010001000001011101101110101110101010011", 
    18 => "0100100000010011001001101111110101011101111110110", 
    19 => "0100110000010101011010000100001000101010000110110", 
    20 => "0101000000010111110010011010110000010110011011100", 
    21 => "0101010000011010010010110011110100100110100010001", 
    22 => "0101100000011100111011001111011101011110001011101", 
    23 => "0101110000011111101011101101110011000001010101011", 
    24 => "0110000000100010100100001110111101010100001000110", 
    25 => "0110010000100101100100110011000100011010111011011", 
    26 => "0110100000101000101101011010010000011010001111000", 
    27 => "0110110000101011111110000100101001010110110001010", 
    28 => "0111000000101111010110110010010111010101011100011", 
    29 => "0111010000110010110111100011100010011011010110011", 
    30 => "0111100000110110100000011000010010101101110001101", 
    31 => "0111110000111010010001010000110000010010001100100", 
    32 => "1000000000111110001010001101000011001110010001110", 
    33 => "1000010001000010001011001101010011100111111000010", 
    34 => "1000100001000110010100010001101001100101000011000", 
    35 => "1000110001001010100101011010001101001100000001000", 
    36 => "1001000001001110111110100111000110100011001110000", 
    37 => "1001010001010011011111111000011101110001010001011", 
    38 => "1001100001011000001001001110011010111100111111000", 
    39 => "1001110001011100111010101001000110001101010110111", 
    40 => "1010000001100001110100001000100111101001100101011", 
    41 => "1010010001100110110101101101000111011001000011000", 
    42 => "1010100001101011111111010110101101100011010100011", 
    43 => "1010110001110001010001000101100010010000001010101", 
    44 => "1011000001110110101010111001101101100111100010110", 
    45 => "1011010001111100001100110011010111110001100110010", 
    46 => "1011100010000001110110110010101000110110101011000", 
    47 => "1011110010000111101000110111101000111111010010111", 
    48 => "1100000010001101100011000010100000010100001100010", 
    49 => "1100010010010011100101010011010110111110010001100", 
    50 => "1100100010011001101111101010010101000110101001100", 
    51 => "1100110010100000000010000111100010110110100111011", 
    52 => "1101000010100110011100101011001000010111101010100", 
    53 => "1101010010101100111111010101001101110011011110110", 
    54 => "1101100010110011101010000101111011010011111011110", 
    55 => "1101110010111010011100111101011001000011000110010", 
    56 => "1110000011000001010111111011101111001011001110100", 
    57 => "1110010011001000011011000001000101110110110001110", 
    58 => "1110100011001111100110001101100101010000011001010", 
    59 => "1110110011010110111001100001010101100010111010100", 
    60 => "1111000011011110010100111100011110111001010111101", 
    61 => "1111010011100101111000011111001001011110111110110", 
    62 => "1111100011101101100100001001011101011111001010110", 
    63 => "1111110011110101010111111011100011000101100010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg is
    generic (
        DataWidth : INTEGER := 49;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg is
    component uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg_rom_U :  component uz_FOC_sample_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_65_eOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


