-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/uz_dac_spi_interface/uz_dac_spi_interface_addr_decoder.vhd
-- Created: 2022-05-17 10:01:01
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: uz_dac_spi_interface_addr_decoder
-- Source Path: uz_dac_spi_interface/uz_dac_spi_interface_axi4/uz_dac_spi_interface_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY uz_dac_spi_interface_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_trigger_write               :   OUT   std_logic;  -- ufix1
        write_dac_data_1                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_2                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_3                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_4                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_5                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_6                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_7                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_dac_data_8                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16
        );
END uz_dac_spi_interface_addr_decoder;


ARCHITECTURE rtl OF uz_dac_spi_interface_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_trigger_write_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_trigger_write_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_trigger_write            : std_logic;  -- ufix1
  SIGNAL data_reg_trigger_write_1_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_dac_data_1_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_1_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_1               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_1_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_2_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_2_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_2               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_2_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_3_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_3_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_3               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_3_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_4_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_4_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_4               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_4_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_5_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_5_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_5               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_5_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_6_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_6_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_6               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_6_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_7_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_7_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_7               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_7_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_dac_data_8_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_dac_data_8_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_dac_data_8               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_dac_data_8_1_1          : signed(15 DOWNTO 0);  -- sfix16

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  data_read <= std_logic_vector(decode_rd_ip_timestamp_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_trigger_write_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_trigger_write_1_1 <= decode_sel_trigger_write_1_1 AND wr_enb;

  data_in_trigger_write <= data_write_unsigned(0);

  reg_trigger_write_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_trigger_write_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_trigger_write_1_1 = '1' THEN
        data_reg_trigger_write_1_1 <= data_in_trigger_write;
      END IF;
    END IF;
  END PROCESS reg_trigger_write_1_1_process;


  
  decode_sel_dac_data_1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_dac_data_1_1_1 <= decode_sel_dac_data_1_1_1 AND wr_enb;

  data_in_dac_data_1 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_1_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_1_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_1_1_1 = '1' THEN
        data_reg_dac_data_1_1_1 <= data_in_dac_data_1;
      END IF;
    END IF;
  END PROCESS reg_dac_data_1_1_1_process;


  write_dac_data_1 <= std_logic_vector(data_reg_dac_data_1_1_1);

  
  decode_sel_dac_data_2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_dac_data_2_1_1 <= decode_sel_dac_data_2_1_1 AND wr_enb;

  data_in_dac_data_2 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_2_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_2_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_2_1_1 = '1' THEN
        data_reg_dac_data_2_1_1 <= data_in_dac_data_2;
      END IF;
    END IF;
  END PROCESS reg_dac_data_2_1_1_process;


  write_dac_data_2 <= std_logic_vector(data_reg_dac_data_2_1_1);

  
  decode_sel_dac_data_3_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_dac_data_3_1_1 <= decode_sel_dac_data_3_1_1 AND wr_enb;

  data_in_dac_data_3 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_3_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_3_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_3_1_1 = '1' THEN
        data_reg_dac_data_3_1_1 <= data_in_dac_data_3;
      END IF;
    END IF;
  END PROCESS reg_dac_data_3_1_1_process;


  write_dac_data_3 <= std_logic_vector(data_reg_dac_data_3_1_1);

  
  decode_sel_dac_data_4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_dac_data_4_1_1 <= decode_sel_dac_data_4_1_1 AND wr_enb;

  data_in_dac_data_4 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_4_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_4_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_4_1_1 = '1' THEN
        data_reg_dac_data_4_1_1 <= data_in_dac_data_4;
      END IF;
    END IF;
  END PROCESS reg_dac_data_4_1_1_process;


  write_dac_data_4 <= std_logic_vector(data_reg_dac_data_4_1_1);

  
  decode_sel_dac_data_5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_dac_data_5_1_1 <= decode_sel_dac_data_5_1_1 AND wr_enb;

  data_in_dac_data_5 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_5_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_5_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_5_1_1 = '1' THEN
        data_reg_dac_data_5_1_1 <= data_in_dac_data_5;
      END IF;
    END IF;
  END PROCESS reg_dac_data_5_1_1_process;


  write_dac_data_5 <= std_logic_vector(data_reg_dac_data_5_1_1);

  
  decode_sel_dac_data_6_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_dac_data_6_1_1 <= decode_sel_dac_data_6_1_1 AND wr_enb;

  data_in_dac_data_6 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_6_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_6_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_6_1_1 = '1' THEN
        data_reg_dac_data_6_1_1 <= data_in_dac_data_6;
      END IF;
    END IF;
  END PROCESS reg_dac_data_6_1_1_process;


  write_dac_data_6 <= std_logic_vector(data_reg_dac_data_6_1_1);

  
  decode_sel_dac_data_7_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_dac_data_7_1_1 <= decode_sel_dac_data_7_1_1 AND wr_enb;

  data_in_dac_data_7 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_7_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_7_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_7_1_1 = '1' THEN
        data_reg_dac_data_7_1_1 <= data_in_dac_data_7;
      END IF;
    END IF;
  END PROCESS reg_dac_data_7_1_1_process;


  write_dac_data_7 <= std_logic_vector(data_reg_dac_data_7_1_1);

  
  decode_sel_dac_data_8_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_dac_data_8_1_1 <= decode_sel_dac_data_8_1_1 AND wr_enb;

  data_in_dac_data_8 <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_dac_data_8_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_dac_data_8_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_dac_data_8_1_1 = '1' THEN
        data_reg_dac_data_8_1_1 <= data_in_dac_data_8;
      END IF;
    END IF;
  END PROCESS reg_dac_data_8_1_1_process;


  write_dac_data_8 <= std_logic_vector(data_reg_dac_data_8_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

  write_trigger_write <= data_reg_trigger_write_1_1;

END rtl;

